""" Python_Designer"""

#pylint: disable=attribute-defined-outside-init
#pylint: disable=line-too-long
#pylint: disable=too-many-arguments
#pylint: disable=too-many-positional-arguments
#pylint: disable=too-many-public-methods
#pylint: disable=too-many-branches
#pylint: disable=too-many-instance-attributes
#pylint: disable=too-many-locals
#pylint: disable=too-many-lines
#pylint: disable=too-many-statements
#pylint: disable=unused-argument
#pylint: disable=unused-wildcard-import
#pylint: disable=wildcard-import

#pylint: disable=fixme
#pylint: disable=missing-function-docstring

import math
import tkinter as tk
from tkinter import *
from tkinter import ttk
from tkinter import messagebox
from tkinter import filedialog
import re
import json

class Python_Designer():
    """Python_Designer class"""
    def __init__(self):
        """ Initial class, establish TKinter usage, labels, dropdowns and buttons"""
        self.datestamp: str = "09_07_2025"
        self.set_columns()
        self.root = tk.Tk()
        self.root.state('zoomed')
        self.root.title(f"Python Car Wars Designer: Version {self.datestamp}") # Sets window title
        self.root.geometry("1600x800") # Sets window size
        self.current_file_path: str = ""
        self.is_cycle: bool = False

        #Add drop down menus
        self.load_menus()

        self.temp_dropdown_list = None
        self.selected_sub_weapon_1 = None
        self.sub_weapon_dropdown_1 = None
        self.selected_sub_weapon_1_canvas = None
        self.sub_weapon_dropdown_1_canvas = None
        self.selected_sub_weapon_2_canvas = None
        self.sub_weapon_dropdown_2_canvas = None
        self.selected_sub_weapon_3_canvas = None
        self.sub_weapon_dropdown_3_canvas = None
        self.selected_sub_weapon_4_canvas = None
        self.sub_weapon_dropdown_4_canvas = None
        self.selected_sub_weapon_5_canvas = None
        self.sub_weapon_dropdown_5_canvas = None
        self.selected_sub_weapon_6_canvas = None
        self.sub_weapon_dropdown_6_canvas = None
        self.selected_sub_weapon_7_canvas = None
        self.sub_weapon_dropdown_7_canvas = None
        self.selected_sub_weapon_8_canvas = None
        self.sub_weapon_dropdown_8_canvas = None
        self.selected_sub_weapon_9_canvas = None
        self.sub_weapon_dropdown_9_canvas = None
        self.selected_sub_weapon_10_canvas = None
        self.sub_weapon_dropdown_10_canvas = None
        self.weapon_armor_facing_1 = None
        self.weapon_armor_facing_1_dropdown = None
        self.weapon_armor_facing_2 = None
        self.weapon_armor_facing_2_dropdown = None
        self.weapon_armor_facing_3 = None
        self.weapon_armor_facing_3_dropdown = None
        self.weapon_armor_facing_4 = None
        self.weapon_armor_facing_4_dropdown = None
        self.weapon_armor_facing_5 = None
        self.weapon_armor_facing_5_dropdown = None
        self.weapon_armor_facing_6 = None
        self.weapon_armor_facing_6_dropdown = None
        self.weapon_armor_facing_7 = None
        self.weapon_armor_facing_7_dropdown = None
        self.weapon_armor_facing_8 = None
        self.weapon_armor_facing_8_dropdown = None
        self.weapon_armor_facing_9 = None
        self.weapon_armor_facing_9_dropdown = None
        self.weapon_armor_facing_10 = None
        self.weapon_armor_facing_10_dropdown = None
        self.gas_tank_dropdown = None

        self.hc_adjusted: float = 0.0
        self.age_value: int = 0

        self.canvas_type = None
        self.main_frame = Frame(self.root)
        self.main_frame.pack(fill=BOTH, expand=1)
        # create a canvas
        self.my_canvas = Canvas(self.main_frame)
        self.my_canvas.pack(side=LEFT, fill=BOTH, expand=1)
        #add a scroll bar to the canvas
        self.my_scrollbar = Scrollbar(self.main_frame, orient=VERTICAL, command=self.my_canvas.yview)
        self.my_scrollbar.pack(side=RIGHT, fill=Y)
        self.horizontal_scrollbar = Scrollbar(self.main_frame, orient=HORIZONTAL, command=self.my_canvas.xview)
        self.horizontal_scrollbar.pack(side=BOTTOM, fill=X)
        #configure the canvas to have a scroll bar
        self.my_canvas.configure(yscrollcommand=self.my_scrollbar.set, xscrollcommand=self.horizontal_scrollbar.set)
        self.my_canvas.bind('<Configure>', lambda e: self.my_canvas.configure(scrollregion = self.my_canvas.bbox("all")))

        #create another frame inside the canvas
        self.second_frame = Frame(self.my_canvas)
        #add the new frame to a window in the canvas
        self.my_canvas.create_window((0,0), window=self.second_frame, anchor="nw")

        self.add_labels_canvas(canvas_type=self.second_frame)
        self.add_dropdowns_canvas(canvas_type=self.second_frame)
        self.add_buttons_canvas(canvas_type=self.second_frame)
        self.add_labels_buttons_weapon_header(canvas_type=self.second_frame)
        self.add_labels_buttons_weapon_row_1(canvas_type=self.second_frame)
        self.add_labels_buttons_weapon_row_2(canvas_type=self.second_frame)
        self.add_labels_buttons_weapon_row_3(canvas_type=self.second_frame)
        self.add_labels_buttons_weapon_row_4(canvas_type=self.second_frame)
        self.add_labels_buttons_weapon_row_5(canvas_type=self.second_frame)
        self.add_labels_buttons_weapon_row_6(canvas_type=self.second_frame)
        self.add_labels_buttons_weapon_row_7(canvas_type=self.second_frame)
        self.add_labels_buttons_weapon_row_8(canvas_type=self.second_frame)
        self.add_labels_buttons_weapon_row_9(canvas_type=self.second_frame)
        self.add_labels_buttons_weapon_row_10(canvas_type=self.second_frame)
        self.add_labels_buttons_accessories_1_canvas(canvas_type=self.second_frame)
        self.add_labels_buttons_accessories_2_canvas(canvas_type=self.second_frame)
        self.add_labels_buttons_accessories_3_canvas(canvas_type=self.second_frame)
        self.add_labels_buttons_accessories_4_canvas(canvas_type=self.second_frame)
        self.add_labels_buttons_accessories_5_canvas(canvas_type=self.second_frame)
        self.add_labels_buttons_accessories_6_canvas(canvas_type=self.second_frame)
        self.add_labels_buttons_accessories_7_canvas(canvas_type=self.second_frame)
        self.add_labels_buttons_accessories_8_canvas(canvas_type=self.second_frame)
        self.add_labels_buttons_accessories_9_canvas(canvas_type=self.second_frame)
        self.add_labels_buttons_accessories_10_canvas(canvas_type=self.second_frame)
        self.add_labels_buttons_accessories_11_canvas(canvas_type=self.second_frame)
        self.add_labels_buttons_accessories_12_canvas(canvas_type=self.second_frame)
        self.add_labels_buttons_accessories_13_canvas(canvas_type=self.second_frame)
        self.add_labels_buttons_accessories_14_canvas(canvas_type=self.second_frame)
        self.add_labels_buttons_accessories_15_canvas(canvas_type=self.second_frame)
        self.add_labels_buttons_accessories_16_canvas(canvas_type=self.second_frame)
        self.add_labels_buttons_accessories_17_canvas(canvas_type=self.second_frame)
        self.add_labels_buttons_accessories_18_canvas(canvas_type=self.second_frame)
        self.add_labels_buttons_accessories_19_canvas(canvas_type=self.second_frame)
        self.add_labels_buttons_accessories_20_canvas(canvas_type=self.second_frame)
        self.add_labels_buttons_accessories_21_canvas(canvas_type=self.second_frame)
        self.add_labels_buttons_accessories_22_canvas(canvas_type=self.second_frame)
        self.add_labels_buttons_accessories_23_canvas(canvas_type=self.second_frame)
        self.add_labels_buttons_accessories_24_canvas(canvas_type=self.second_frame)
        self.add_labels_buttons_accessories_25_canvas(canvas_type=self.second_frame)
        self.add_labels_buttons_accessories_26_canvas(canvas_type=self.second_frame)
        self.add_labels_buttons_accessories_27_canvas(canvas_type=self.second_frame)
        self.add_labels_buttons_accessories_28_canvas(canvas_type=self.second_frame)
        self.add_labels_buttons_accessories_29_canvas(canvas_type=self.second_frame)
        self.add_labels_buttons_accessories_30_canvas(canvas_type=self.second_frame)
        self.add_dropdown_weapons(canvas_type=self.second_frame)
        self.add_component_armor_rows(canvas_type=self.second_frame)
        self.get_component_armor_facing_dictionaries()
        self.add_dropdown_component_armor_canvas(canvas_type=self.second_frame)
        self.get_rocket_booster_facing_dictionaries()
        self.add_row_rocket_boosters(canvas_type=self.second_frame)
        self.load_accessories_processing_list()
        self.add_labels_buttons_personal_equipment(canvas_type=self.second_frame)
        self.canvas_type = self.second_frame
        self.hide_electric_engine_options()
        self.hide_gas_engine_options()

    def load_menus(self):
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        file_menu = tk.Menu(menubar, tearoff=0)  # tearoff=0 prevents detaching the menu
        edit_menu = tk.Menu(menubar, tearoff=0)
        help_menu = tk.Menu(menubar, tearoff=0)

        menubar.add_cascade(label="File", menu=file_menu)
        menubar.add_cascade(label="Edit", menu=edit_menu)
        menubar.add_cascade(label="Help", menu=help_menu)

        file_menu.add_command(label="New", command=self.menu_file_new)
        file_menu.add_command(label="Open", command=self.menu_file_open)
        file_menu.add_command(label="Print", command=self.menu_file_print)
        file_menu.add_command(label="Save", command=self.menu_file_save)
        file_menu.add_command(label="Save As", command=self.menu_file_save_as)
        file_menu.add_separator()  # Add a visual separator
        file_menu.add_command(label="Exit", command=self.menu_file_exit)

        help_menu.add_command(label="How Does This Work?", command=self.menu_help_how_does_this_work)
        help_menu.add_command(label="What's New", command=self.menu_help_whats_new)
        help_menu.add_command(label="What's Next", command=self.menu_help_whats_next)
        help_menu.add_command(label="About", command=self.menu_help_about)

    def menu_file_new(self, *args):
        self.selected_body.set('Body')
        self.selected_modifications.set('No Mods')
        self.selected_chassis.set('Chassis')
        self.selected_suspension.set('Suspension')
        self.selected_engine.set('Engine')
        self.var_engine_gas_super_charger.set(0)
        self.var_engine_gas_vp_turbo.set(0)
        self.var_engine_gas_tube_headers.set(0)
        self.var_engine_gas_blue_print.set(0)
        self.var_engine_gas_turbo.set(0)
        self.var_engine_electric_super_conductors.set(0)
        self.var_engine_electric_platnium_catalysts.set(0)
        self.var_engine_electric_extra_power_cells.set(0)
        self.selected_gas_tank.set('Gas Tank')
        self.var_gas_gallon_qty.set(0)
        self.var_front_tire_qty.set(0)
        self.var_rear_tire_qty.set(0)
        self.var_driver_gunner_qty.set(0)
        self.var_passenger_qty.set(0)
        self.var_outer_armor_qty.set(0)
        self.var_inner_armor_qty.set(0)
        self.var_front_tire_steelbelting.set(0)
        self.var_front_tire_radial.set(0)
        self.var_front_tire_fireproof.set(0)
        self.var_front_tire_offroad.set(0)
        self.var_front_tire_racing_slick.set(0)
        self.var_rear_tire_steelbelting.set(0)
        self.var_rear_tire_radial.set(0)
        self.var_rear_tire_fireproof.set(0)
        self.var_rear_tire_offroad.set(0)
        self.var_rear_tire_racing_slick.set(0)
        self.selected_front_tire.set('Tires')
        self.selected_rear_tire.set('Tires')
        self.selected_outer_armor.set('Outer Armor')
        self.selected_inner_armor.set('Inner Armor')
        self.selected_weapon_alt_1.set('Weapon')
        if self.sub_weapon_dropdown_1_canvas is not None:
            self.sub_weapon_dropdown_1_canvas.grid_forget()
        self.selected_sub_weapon_1_canvas = None
        self.var_sub_weapon_1_qty.set(0)
        self.var_sub_weapon_ammo_1_qty.set(0)
        self.var_sub_weapon_extra_mags_1_qty.set(0)
        self.label_sub_weapon_1_cost.configure(text="0")
        self.label_sub_weapon_1_weight.configure(text="0")
        self.label_sub_weapon_1_space.configure(text="0")
        self.label_sub_weapon_1_shots.configure(text="0")
        self.label_sub_weapon_1_ammo_cost.configure(text="0")
        self.label_sub_weapon_1_ammo_weight.configure(text="0")
        self.weapon_armor_facing_1.set("Facing")
        self.selected_weapon_alt_2.set('Weapon')
        if self.sub_weapon_dropdown_2_canvas is not None:
            self.sub_weapon_dropdown_2_canvas.grid_forget()
        self.selected_sub_weapon_2_canvas = None
        self.var_sub_weapon_2_qty.set(0)
        self.var_sub_weapon_ammo_2_qty.set(0)
        self.var_sub_weapon_extra_mags_2_qty.set(0)
        self.label_sub_weapon_2_cost.configure(text="0")
        self.label_sub_weapon_2_weight.configure(text="0")
        self.label_sub_weapon_2_space.configure(text="0")
        self.label_sub_weapon_2_shots.configure(text="0")
        self.label_sub_weapon_2_ammo_cost.configure(text="0")
        self.label_sub_weapon_2_ammo_weight.configure(text="0")
        self.weapon_armor_facing_2.set("Facing")
        self.selected_weapon_alt_3.set('Weapon')
        if self.sub_weapon_dropdown_3_canvas is not None:
            self.sub_weapon_dropdown_3_canvas.grid_forget()
        self.selected_sub_weapon_3_canvas = None
        self.var_sub_weapon_3_qty.set(0)
        self.var_sub_weapon_ammo_3_qty.set(0)
        self.var_sub_weapon_extra_mags_3_qty.set(0)
        self.label_sub_weapon_3_cost.configure(text="0")
        self.label_sub_weapon_3_weight.configure(text="0")
        self.label_sub_weapon_3_space.configure(text="0")
        self.label_sub_weapon_3_shots.configure(text="0")
        self.label_sub_weapon_3_ammo_cost.configure(text="0")
        self.label_sub_weapon_3_ammo_weight.configure(text="0")
        self.weapon_armor_facing_3.set("Facing")
        self.selected_weapon_alt_4.set('Weapon')
        if self.sub_weapon_dropdown_4_canvas is not None:
            self.sub_weapon_dropdown_4_canvas.grid_forget()
        self.selected_sub_weapon_4_canvas = None
        self.var_sub_weapon_4_qty.set(0)
        self.var_sub_weapon_ammo_4_qty.set(0)
        self.var_sub_weapon_extra_mags_4_qty.set(0)
        self.label_sub_weapon_4_cost.configure(text="0")
        self.label_sub_weapon_4_weight.configure(text="0")
        self.label_sub_weapon_4_space.configure(text="0")
        self.label_sub_weapon_4_shots.configure(text="0")
        self.label_sub_weapon_4_ammo_cost.configure(text="0")
        self.label_sub_weapon_4_ammo_weight.configure(text="0")
        self.weapon_armor_facing_4.set("Facing")
        self.selected_weapon_alt_5.set('Weapon')
        if self.sub_weapon_dropdown_5_canvas is not None:
            self.sub_weapon_dropdown_5_canvas.grid_forget()
        self.selected_sub_weapon_5_canvas = None
        self.var_sub_weapon_5_qty.set(0)
        self.var_sub_weapon_ammo_5_qty.set(0)
        self.var_sub_weapon_extra_mags_5_qty.set(0)
        self.label_sub_weapon_5_cost.configure(text="0")
        self.label_sub_weapon_5_weight.configure(text="0")
        self.label_sub_weapon_5_space.configure(text="0")
        self.label_sub_weapon_5_shots.configure(text="0")
        self.label_sub_weapon_5_ammo_cost.configure(text="0")
        self.label_sub_weapon_5_ammo_weight.configure(text="0")
        self.weapon_armor_facing_5.set("Facing")
        self.selected_weapon_alt_6.set('Weapon')
        if self.sub_weapon_dropdown_6_canvas is not None:
            self.sub_weapon_dropdown_6_canvas.grid_forget()
        self.selected_sub_weapon_6_canvas = None
        self.var_sub_weapon_6_qty.set(0)
        self.var_sub_weapon_ammo_6_qty.set(0)
        self.var_sub_weapon_extra_mags_6_qty.set(0)
        self.label_sub_weapon_6_cost.configure(text="0")
        self.label_sub_weapon_6_weight.configure(text="0")
        self.label_sub_weapon_6_space.configure(text="0")
        self.label_sub_weapon_6_shots.configure(text="0")
        self.label_sub_weapon_6_ammo_cost.configure(text="0")
        self.label_sub_weapon_6_ammo_weight.configure(text="0")
        self.weapon_armor_facing_6.set("Facing")
        self.selected_weapon_alt_7.set('Weapon')
        if self.sub_weapon_dropdown_7_canvas is not None:
            self.sub_weapon_dropdown_7_canvas.grid_forget()
        self.selected_sub_weapon_7_canvas = None
        self.var_sub_weapon_7_qty.set(0)
        self.var_sub_weapon_ammo_7_qty.set(0)
        self.var_sub_weapon_extra_mags_7_qty.set(0)
        self.label_sub_weapon_7_cost.configure(text="0")
        self.label_sub_weapon_7_weight.configure(text="0")
        self.label_sub_weapon_7_space.configure(text="0")
        self.label_sub_weapon_7_shots.configure(text="0")
        self.label_sub_weapon_7_ammo_cost.configure(text="0")
        self.label_sub_weapon_7_ammo_weight.configure(text="0")
        self.weapon_armor_facing_7.set("Facing")
        self.selected_weapon_alt_8.set('Weapon')
        if self.sub_weapon_dropdown_8_canvas is not None:
            self.sub_weapon_dropdown_8_canvas.grid_forget()
        self.selected_sub_weapon_8_canvas = None
        self.var_sub_weapon_8_qty.set(0)
        self.var_sub_weapon_ammo_8_qty.set(0)
        self.var_sub_weapon_extra_mags_8_qty.set(0)
        self.label_sub_weapon_8_cost.configure(text="0")
        self.label_sub_weapon_8_weight.configure(text="0")
        self.label_sub_weapon_8_space.configure(text="0")
        self.label_sub_weapon_8_shots.configure(text="0")
        self.label_sub_weapon_8_ammo_cost.configure(text="0")
        self.label_sub_weapon_8_ammo_weight.configure(text="0")
        self.weapon_armor_facing_8.set("Facing")
        self.selected_weapon_alt_9.set('Weapon')
        if self.sub_weapon_dropdown_9_canvas is not None:
            self.sub_weapon_dropdown_9_canvas.grid_forget()
        self.selected_sub_weapon_9_canvas = None
        self.var_sub_weapon_9_qty.set(0)
        self.var_sub_weapon_ammo_9_qty.set(0)
        self.var_sub_weapon_extra_mags_9_qty.set(0)
        self.label_sub_weapon_9_cost.configure(text="0")
        self.label_sub_weapon_9_weight.configure(text="0")
        self.label_sub_weapon_9_space.configure(text="0")
        self.label_sub_weapon_9_shots.configure(text="0")
        self.label_sub_weapon_9_ammo_cost.configure(text="0")
        self.label_sub_weapon_9_ammo_weight.configure(text="0")
        self.weapon_armor_facing_9.set("Facing")
        self.selected_weapon_alt_10.set('Weapon')
        if self.sub_weapon_dropdown_10_canvas is not None:
            self.sub_weapon_dropdown_10_canvas.grid_forget()
        self.selected_sub_weapon_10_canvas = None
        self.var_sub_weapon_10_qty.set(0)
        self.var_sub_weapon_ammo_10_qty.set(0)
        self.var_sub_weapon_extra_mags_10_qty.set(0)
        self.label_sub_weapon_10_cost.configure(text="0")
        self.label_sub_weapon_10_weight.configure(text="0")
        self.label_sub_weapon_10_space.configure(text="0")
        self.label_sub_weapon_10_shots.configure(text="0")
        self.label_sub_weapon_10_ammo_cost.configure(text="0")
        self.label_sub_weapon_10_ammo_weight.configure(text="0")
        self.weapon_armor_facing_10.set("Facing")
        self.selected_accessories_1.set('Accessory')
        self.var_accessories_1_qty.set(0)
        self.selected_accessories_2.set('Accessory')
        self.var_accessories_2_qty.set(0)
        self.selected_accessories_3.set('Accessory')
        self.var_accessories_3_qty.set(0)
        self.selected_accessories_4.set('Accessory')
        self.var_accessories_4_qty.set(0)
        self.selected_accessories_5.set('Accessory')
        self.var_accessories_5_qty.set(0)
        self.selected_accessories_6.set('Accessory')
        self.var_accessories_6_qty.set(0)
        self.selected_accessories_7.set('Accessory')
        self.var_accessories_7_qty.set(0)
        self.selected_accessories_8.set('Accessory')
        self.var_accessories_8_qty.set(0)
        self.selected_accessories_9.set('Accessory')
        self.var_accessories_9_qty.set(0)
        self.selected_accessories_10.set('Accessory')
        self.var_accessories_10_qty.set(0)
        self.selected_accessories_11.set('Accessory')
        self.var_accessories_11_qty.set(0)
        self.selected_accessories_12.set('Accessory')
        self.var_accessories_12_qty.set(0)
        self.selected_accessories_13.set('Accessory')
        self.var_accessories_13_qty.set(0)
        self.selected_accessories_14.set('Accessory')
        self.var_accessories_14_qty.set(0)
        self.selected_accessories_15.set('Accessory')
        self.var_accessories_15_qty.set(0)
        self.selected_accessories_16.set('Accessory')
        self.var_accessories_16_qty.set(0)
        self.selected_accessories_17.set('Accessory')
        self.var_accessories_17_qty.set(0)
        self.selected_accessories_18.set('Accessory')
        self.var_accessories_18_qty.set(0)
        self.selected_accessories_19.set('Accessory')
        self.var_accessories_19_qty.set(0)
        self.selected_accessories_20.set('Accessory')
        self.var_accessories_20_qty.set(0)
        self.selected_accessories_21.set('Accessory')
        self.var_accessories_21_qty.set(0)
        self.selected_accessories_22.set('Accessory')
        self.var_accessories_22_qty.set(0)
        self.selected_accessories_23.set('Accessory')
        self.var_accessories_23_qty.set(0)
        self.selected_accessories_24.set('Accessory')
        self.var_accessories_24_qty.set(0)
        self.selected_accessories_25.set('Accessory')
        self.var_accessories_25_qty.set(0)
        self.selected_accessories_26.set('Accessory')
        self.var_accessories_26_qty.set(0)
        self.selected_accessories_27.set('Accessory')
        self.var_accessories_27_qty.set(0)
        self.selected_accessories_28.set('Accessory')
        self.var_accessories_28_qty.set(0)
        self.selected_accessories_29.set('Accessory')
        self.var_accessories_29_qty.set(0)
        self.selected_accessories_30.set('Accessory')
        self.var_accessories_30_qty.set(0)
        self.selected_component_armor_1.set('Component armor')
        self.selected_component_armor_facing_1.set('Facing')
        self.var_component_armor_spaces_qty_1.set(0)
        self.var_component_armor_count_qty_1.set(0)
        self.selected_component_armor_2.set('Component armor')
        self.selected_component_armor_facing_2.set('Facing')
        self.var_component_armor_spaces_qty_2.set(0)
        self.var_component_armor_count_qty_2.set(0)
        self.selected_component_armor_3.set('Component armor')
        self.selected_component_armor_facing_3.set('Facing')
        self.var_component_armor_spaces_qty_3.set(0)
        self.var_component_armor_count_qty_3.set(0)
        self.selected_component_armor_4.set('Component armor')
        self.selected_component_armor_facing_4.set('Facing')
        self.var_component_armor_spaces_qty_4.set(0)
        self.var_component_armor_count_qty_4.set(0)
        self.selected_component_armor_5.set('Component armor')
        self.selected_component_armor_facing_5.set('Facing')
        self.var_component_armor_spaces_qty_5.set(0)
        self.var_component_armor_count_qty_5.set(0)
        self.var_rocket_booster_pounds_qty_1.set(0)
        self.selected_rocket_booster_facing_1.set('Facing')
        self.var_rocket_booster_pounds_qty_2.set(0)
        self.selected_rocket_booster_facing_2.set('Facing')
        self.var_rocket_booster_pounds_qty_3.set(0)
        self.selected_rocket_booster_facing_3.set('Facing')
        self.var_rocket_booster_pounds_qty_4.set(0)
        self.selected_rocket_booster_facing_4.set('Facing')
        self.var_rocket_booster_pounds_qty_5.set(0)
        self.selected_rocket_booster_facing_5.set('Facing')
        self.selected_personal_equipment_1.set('Personal Equipment')
        self.var_personal_equipment_1_qty.set(0)
        self.selected_personal_equipment_2.set('Personal Equipment')
        self.var_personal_equipment_2_qty.set(0)
        self.selected_personal_equipment_3.set('Personal Equipment')
        self.var_personal_equipment_3_qty.set(0)
        self.selected_personal_equipment_4.set('Personal Equipment')
        self.var_personal_equipment_4_qty.set(0)
        self.selected_personal_equipment_5.set('Personal Equipment')
        self.var_personal_equipment_5_qty.set(0)
        self.selected_personal_equipment_6.set('Personal Equipment')
        self.var_personal_equipment_6_qty.set(0)
        self.selected_personal_equipment_7.set('Personal Equipment')
        self.var_personal_equipment_7_qty.set(0)
        self.selected_personal_equipment_8.set('Personal Equipment')
        self.var_personal_equipment_8_qty.set(0)
        self.selected_personal_equipment_9.set('Personal Equipment')
        self.var_personal_equipment_9_qty.set(0)
        self.selected_personal_equipment_10.set('Personal Equipment')
        self.var_personal_equipment_10_qty.set(0)
        self.var_six_wheel_chassis.set('Personal Equipment')
        self.var_sloped_armor.set(0)
        self.label_total_cost.configure(text="0")
        self.label_total_weight.configure(text="0")
        self.label_total_space.configure(text="0")
        self.label_final_engine_mpg.configure(text="0")
        self.label_total_power_factors.configure(text="0")
        self.label_top_speed.configure(text="0")
        self.label_max_weight_top_speed.configure(text="0")
        self.label_accel.configure(text="0")
        self.label_max_accel.configure(text="0")
        self.var_outer_front_armor_allocation_qty.set(0)
        self.var_outer_back_armor_allocation_qty.set(0)
        self.var_outer_left_armor_allocation_qty.set(0)
        self.var_outer_top_armor_allocation_qty.set(0)
        self.var_outer_underbody_armor_allocation_qty.set(0)
        self.var_inner_front_armor_allocation_qty.set(0)
        self.var_inner_back_armor_allocation_qty.set(0)
        self.var_inner_left_armor_allocation_qty.set(0)
        self.var_inner_right_armor_allocation_qty.set(0)
        self.var_inner_top_armor_allocation_qty.set(0)
        self.var_inner_underbody_armor_allocation_qty.set(0)
        self.current_file_path = ""

    def menu_file_open(self, *args):
        self.current_file_path = filedialog.askopenfilename()  # Open file selection dialog
        self.load_record(self.current_file_path)

    def menu_file_save(self, *args):
        if self.current_file_path == "":
            self.current_file_path = filedialog.asksaveasfilename()  # Open file selection dialog
        self.save_record(self.current_file_path)
        messagebox.showinfo("File Save", f"{self.current_file_path} saved.")

    def menu_file_save_as(self, *args):
        self.current_file_path = filedialog.asksaveasfilename()  # Open file selection dialog
        self.save_record(self.current_file_path)
        messagebox.showinfo("File Save As", f"{self.current_file_path} saved.")

    def menu_file_print(self, *args):
        output_text: str = ""
        var_sloped_armor: int = int(self.var_sloped_armor.get())
        if var_sloped_armor == 1: #include the sloped reference
            output_text += "Sloped "
        local_mod: str = str(self.selected_modifications.get())
        if local_mod != "No Mods" and local_mod != "Modifications":
            output_text += local_mod + " "


        output_text += str(self.selected_body.get())
        if int(self.var_six_wheel_chassis.get()) == 1:
            output_text += " with six wheel chassis"

        output_text += ", " + str(self.selected_chassis.get())
        output_text += ", " + str(self.selected_suspension.get())
        output_text += ", " + str(self.selected_engine.get())
        if self.label_engine_type.cget("text") == "Gas":

            if self.var_engine_gas_super_charger.get() == 1:
                output_text += ", " + "SuperCharger"
            if self.var_engine_gas_vp_turbo.get() == 1:
                output_text += ", " + "Variable Pitch Turbo Charger"
            if self.var_engine_gas_tube_headers.get() == 1:
                output_text += ", " + "Tubular Headers"
            if self.var_engine_gas_blue_print.get() == 1:
                output_text += ", " + "Blueprinting"
            if self.var_engine_gas_turbo.get() == 1:
                output_text += ", " + "Turbo Charger"
            output_text += ", " + str(self.var_gas_gallon_qty.get()) + "gallon "
            output_text += str(self.selected_gas_tank.get())
        else:
            if self.var_engine_electric_super_conductors.get() == 1:
                output_text += ", " + "Super Conductors"
            if self.var_engine_electric_platnium_catalysts.get():
                output_text += ", " + "Platnium Catalysts"
            if self.var_engine_electric_extra_power_cells.get() == 1:
                output_text += ", " + "Extra Power Cells"
        output_text += ".\n"
  
        if self.var_front_tire_qty.get() > 0: #only list front tires if they exist
            output_text += str(self.var_front_tire_qty.get())
            if self.var_front_tire_steelbelting.get() == 1:
                output_text += " " + "Steelbelted"
            if self.var_front_tire_radial.get() == 1:
                output_text += " " + "Radial"
            if self.var_front_tire_fireproof.get() == 1:
                output_text += " " + "Fireproof"
            if self.var_front_tire_offroad.get() == 1:
                output_text += " " + "OffRoad"
            if self.var_front_tire_racing_slick.get() == 1:
                output_text += " " + "Racing Slicks"
            output_text += " " + str(self.selected_front_tire.get()) + " mounted front.\n"

        if self.var_rear_tire_qty.get() > 0: #only list rear tires if they exist
            output_text += str(self.var_rear_tire_qty.get())
            if self.var_rear_tire_steelbelting.get() == 1:
                output_text += " " + "Steelbelted"
            if self.var_rear_tire_radial.get() == 1:
                output_text += " " + "Radial"
            if self.var_rear_tire_fireproof.get() == 1:
                output_text += " " + "Fireproof"
            if self.var_rear_tire_offroad.get() == 1:
                output_text += " " + "OffRoad"
            if self.var_rear_tire_racing_slick.get() == 1:
                output_text += " " + "Racing Slicks"
            output_text += " " + str(self.selected_rear_tire.get()) + " mounted back.\n"

        if self.var_driver_gunner_qty.get() > 0:
            output_text += str(self.var_driver_gunner_qty.get()) + " Driver/Gunner"
            if self.var_driver_gunner_qty.get() > 1:
                output_text += "s"
        if self.var_passenger_qty.get() > 0:
            output_text += ", " + str(self.var_passenger_qty.get()) + "Passenger"
            if self.var_passenger_qty.get() > 1:
                output_text += "s"
        if self.var_driver_gunner_qty.get() > 0 or self.var_passenger_qty.get() > 0:
            output_text += ".\n"

        if self.var_outer_armor_qty.get() > 0:
            output_text += str(self.var_outer_armor_qty.get()) + " points of "
            output_text += str(self.selected_outer_armor.get()) + ".\n"

        if self.var_inner_armor_qty.get() > 0:
            output_text += str(self.var_inner_armor_qty.get()) + "points of "
            output_text += str(self.selected_inner_armor.get()) + ".\n"

        output_text += self.print_weapon(canvas = self.selected_sub_weapon_1_canvas
                                        , weapon_qty = self.var_sub_weapon_1_qty
                                        , ammo_qty = self.var_sub_weapon_ammo_1_qty
                                        , extra_mags_qty = self.var_sub_weapon_extra_mags_1_qty
                                        , armor_facing = self.weapon_armor_facing_1)
        #if self.selected_sub_weapon_1_canvas is not None:
        #    if self.var_sub_weapon_1_qty.get() > 0:
        #        output_text += str(self.var_sub_weapon_1_qty.get())
        #        output_text += " " + str(self.selected_sub_weapon_1_canvas.get())
        #        if self.var_sub_weapon_1_qty.get() > 1:
        #            output_text += "s"
        #        if self.var_sub_weapon_ammo_1_qty.get() > 0:
        #            output_text += f" with {str(self.var_sub_weapon_ammo_1_qty.get())} shot"
        #            if self.var_sub_weapon_ammo_1_qty.get() > 1:
        #                output_text += "s"
        #        if self.var_sub_weapon_extra_mags_1_qty.get() > 0:
        #            output_text += f" and {self.var_sub_weapon_extra_mags_1_qty.get()} extra magazines"
        #        if self.weapon_armor_facing_1.get() != "Facing":
        #            output_text += f" facing {self.weapon_armor_facing_1.get()}"
        #        output_text += ".\n"

        if self.selected_sub_weapon_2_canvas is not None:
            if self.var_sub_weapon_2_qty.get() > 0:
                output_text += str(self.var_sub_weapon_2_qty.get())
                output_text += " " + str(self.selected_sub_weapon_2_canvas.get())
                if self.var_sub_weapon_2_qty.get() > 1:
                    output_text += "s"
                if self.var_sub_weapon_ammo_2_qty.get() > 0:
                    output_text += f" with {self.var_sub_weapon_ammo_2_qty.get()} shot"
                    if self.var_sub_weapon_ammo_2_qty.get() > 1:
                        output_text += "s"
                if self.var_sub_weapon_extra_mags_2_qty.get() > 0:
                    output_text += f" and {self.var_sub_weapon_extra_mags_2_qty.get()} extra magazines"
                if self.weapon_armor_facing_2.get() != "Facing":
                    output_text += f" facing {self.weapon_armor_facing_2.get()}"
                output_text += ".\n"

        if self.selected_sub_weapon_3_canvas is not None:
            if self.var_sub_weapon_3_qty.get() > 0:
                output_text += str(self.var_sub_weapon_3_qty.get())
                output_text += " " + str(self.selected_sub_weapon_3_canvas.get())
                if self.var_sub_weapon_3_qty.get() > 1:
                    output_text += "s"
                if self.var_sub_weapon_ammo_3_qty.get() > 0:
                    output_text += f" with {self.var_sub_weapon_ammo_3_qty.get()} shot"
                    if self.var_sub_weapon_ammo_3_qty.get() > 1:
                        output_text += "s"
                if self.var_sub_weapon_extra_mags_3_qty.get() > 0:
                    output_text += f" and {self.var_sub_weapon_extra_mags_3_qty.get()} extra magazines"
                if self.weapon_armor_facing_3.get() != "Facing":
                    output_text += f" facing {self.weapon_armor_facing_3.get()}"
                output_text += ".\n"

        if self.selected_sub_weapon_4_canvas is not None:
            if self.var_sub_weapon_4_qty.get() > 0:
                output_text += str(self.var_sub_weapon_4_qty.get())
                output_text += " " + str(self.selected_sub_weapon_4_canvas.get())
                if self.var_sub_weapon_4_qty.get() > 1:
                    output_text += "s"
                if self.var_sub_weapon_ammo_4_qty.get() > 0:
                    output_text = output_text +f" with {self.var_sub_weapon_ammo_4_qty.get()} shot"
                    if self.var_sub_weapon_ammo_4_qty.get() > 1:
                        output_text += "s"
                if self.var_sub_weapon_extra_mags_4_qty.get() > 0:
                    output_text += f" and {self.var_sub_weapon_extra_mags_4_qty.get()} extra magazines"
                if self.weapon_armor_facing_4.get() != "Facing":
                    output_text += f" facing {self.weapon_armor_facing_4.get()}"
                output_text += ".\n"

        if self.selected_sub_weapon_5_canvas is not None:
            if self.var_sub_weapon_5_qty.get() > 0:
                output_text += str(self.var_sub_weapon_5_qty.get())
                output_text += " " + str(self.selected_sub_weapon_5_canvas.get())
                if self.var_sub_weapon_5_qty.get() > 1:
                    output_text += "s"
                if self.var_sub_weapon_ammo_5_qty.get() > 0:
                    output_text += f" with {self.var_sub_weapon_ammo_5_qty.get()} shot"
                    if self.var_sub_weapon_ammo_5_qty.get() > 1:
                        output_text += "s"
                if self.var_sub_weapon_extra_mags_5_qty.get() > 0:
                    output_text += f" and {self.var_sub_weapon_extra_mags_5_qty.get()} extra magazines"
                if self.weapon_armor_facing_5.get() != "Facing":
                    output_text += f" facing {self.weapon_armor_facing_5.get()}"
                output_text += ".\n"

        if self.selected_sub_weapon_6_canvas is not None:
            if self.var_sub_weapon_6_qty.get() > 0:
                output_text += str(self.var_sub_weapon_6_qty.get())
                output_text += " " + str(self.selected_sub_weapon_6_canvas.get())
                if self.var_sub_weapon_6_qty.get() > 1:
                    output_text += "s"
                if self.var_sub_weapon_ammo_6_qty.get() > 0:
                    output_text += f" with {self.var_sub_weapon_ammo_6_qty.get()} shot"
                    if self.var_sub_weapon_ammo_6_qty.get() > 1:
                        output_text += "s"
                if self.var_sub_weapon_extra_mags_6_qty.get() > 0:
                    output_text += f" and {self.var_sub_weapon_extra_mags_6_qty.get()} extra magazines"
                if self.weapon_armor_facing_6.get() != "Facing":
                    output_text += f" facing {self.weapon_armor_facing_6.get()}"
                output_text += ".\n"

        if self.selected_sub_weapon_7_canvas is not None:
            if self.var_sub_weapon_7_qty.get() > 0:
                output_text += str(self.var_sub_weapon_7_qty.get())
                output_text += " " + str(self.selected_sub_weapon_7_canvas.get())
                if self.var_sub_weapon_7_qty.get() > 1:
                    output_text += "s"
                if self.var_sub_weapon_ammo_7_qty.get() > 0:
                    output_text += " with " + str(self.var_sub_weapon_ammo_7_qty.get()) + " shot"
                    if self.var_sub_weapon_ammo_7_qty.get() > 1:
                        output_text += "s"
                if self.var_sub_weapon_extra_mags_7_qty.get() > 0:
                    output_text += f" and {self.var_sub_weapon_extra_mags_7_qty.get()} extra magazines"
                if self.weapon_armor_facing_7.get() != "Facing":
                    output_text += f" facing {self.weapon_armor_facing_7.get()}"
                output_text += ".\n"

        if self.selected_sub_weapon_8_canvas is not None:
            if self.var_sub_weapon_8_qty.get() > 0:
                output_text += str(self.var_sub_weapon_8_qty.get())
                output_text += " " + str(self.selected_sub_weapon_8_canvas.get())
                if self.var_sub_weapon_8_qty.get() > 1:
                    output_text += "s"
                if self.var_sub_weapon_ammo_8_qty.get() > 0:
                    output_text += " with " + str(self.var_sub_weapon_ammo_8_qty.get()) + " shot"
                    if self.var_sub_weapon_ammo_8_qty.get() > 1:
                        output_text += "s"
                if self.var_sub_weapon_extra_mags_8_qty.get() > 0:
                    output_text += f" and {self.var_sub_weapon_extra_mags_8_qty.get()} extra magazines"
                if self.weapon_armor_facing_8.get() != "Facing":
                    output_text += f" facing {self.weapon_armor_facing_8.get()}"
                output_text += ".\n"

        if self.selected_sub_weapon_9_canvas is not None:
            if self.var_sub_weapon_9_qty.get() > 0:
                output_text += str(self.var_sub_weapon_9_qty.get())
                output_text += " " + str(self.selected_sub_weapon_9_canvas.get())
                if self.var_sub_weapon_9_qty.get() > 1:
                    output_text += "s"
                if self.var_sub_weapon_ammo_9_qty.get() > 0:
                    output_text += " with " + str(self.var_sub_weapon_ammo_9_qty.get()) + " shot"
                    if self.var_sub_weapon_ammo_9_qty.get() > 1:
                        output_text += "s"
                if self.var_sub_weapon_extra_mags_9_qty.get() > 0:
                    output_text += f" and {self.var_sub_weapon_extra_mags_9_qty.get()} extra magazines"
                if self.weapon_armor_facing_9.get() != "Facing":
                    output_text += f" facing {self.weapon_armor_facing_9.get()}"
                output_text += ".\n"

        if self.selected_sub_weapon_10_canvas is not None:
            if self.var_sub_weapon_10_qty.get() > 0:
                output_text += str(self.var_sub_weapon_10_qty.get())
                output_text += " " + str(self.selected_sub_weapon_10_canvas.get())
                if self.var_sub_weapon_10_qty.get() > 1:
                    output_text += "s"
                if self.var_sub_weapon_ammo_10_qty.get() > 0:
                    output_text += " with " + str(self.var_sub_weapon_ammo_10_qty.get()) + " shot"
                    if self.var_sub_weapon_ammo_10_qty.get() > 1:
                        output_text += "s"
                if self.var_sub_weapon_extra_mags_10_qty.get() > 0:
                    output_text += f" and {self.var_sub_weapon_extra_mags_10_qty.get()} extra magazines"
                if self.weapon_armor_facing_10.get() != "Facing":
                    output_text += f" facing {self.weapon_armor_facing_10.get()}"
                output_text += ".\n"

        if self.var_accessories_1_qty.get() > 0:
            output_text += str(self.var_accessories_1_qty.get()) + " " + str(self.selected_accessories_1.get())
            if self.var_accessories_1_qty.get() > 1:
                output_text += "s"
            output_text += ".\n"

        if self.var_accessories_2_qty.get() > 0:
            output_text += str(self.var_accessories_2_qty.get()) + " " + str(self.selected_accessories_2.get())
            if self.var_accessories_2_qty.get() > 1:
                output_text += "s"
            output_text += ".\n"

        if self.var_accessories_3_qty.get() > 0:
            output_text += str(self.var_accessories_3_qty.get()) + " " + str(self.selected_accessories_3.get())
            if self.var_accessories_3_qty.get() > 1:
                output_text += "s"
            output_text += ".\n"

        if self.var_accessories_4_qty.get() > 0:
            output_text += str(self.var_accessories_4_qty.get()) + " " + str(self.selected_accessories_4.get())
            if self.var_accessories_4_qty.get() > 1:
                output_text += "s"
            output_text += ".\n"

        if self.var_accessories_5_qty.get() > 0:
            output_text += str(self.var_accessories_5_qty.get()) + " " + str(self.selected_accessories_5.get())
            if self.var_accessories_5_qty.get() > 1:
                output_text += "s"
            output_text += ".\n"

        if self.var_accessories_6_qty.get() > 0:
            output_text += str(self.var_accessories_6_qty.get()) + " " + str(self.selected_accessories_6.get())
            if self.var_accessories_6_qty.get() > 1:
                output_text += "s"
            output_text += ".\n"

        if self.var_accessories_7_qty.get() > 0:
            output_text += str(self.var_accessories_7_qty.get()) + " " + str(self.selected_accessories_7.get())
            if self.var_accessories_7_qty.get() > 1:
                output_text += "s"
            output_text += ".\n"

        if self.var_accessories_8_qty.get() > 0:
            output_text += str(self.var_accessories_8_qty.get()) + " " + str(self.selected_accessories_8.get())
            if self.var_accessories_8_qty.get() > 1:
                output_text += "s"
            output_text += ".\n"

        if self.var_accessories_9_qty.get() > 0:
            output_text += str(self.var_accessories_9_qty.get()) + " " + str(self.selected_accessories_9.get())
            if self.var_accessories_9_qty.get() > 1:
                output_text += "s"
            output_text += ".\n"

        if self.var_accessories_10_qty.get() > 0:
            output_text += str(self.var_accessories_10_qty.get()) + " " + str(self.selected_accessories_10.get())
            if self.var_accessories_10_qty.get() > 1:
                output_text += "s"
            output_text += ".\n"

        if self.var_accessories_11_qty.get() > 0:
            output_text += str(self.var_accessories_11_qty.get()) + " " + str(self.selected_accessories_11.get())
            if self.var_accessories_11_qty.get() > 1:
                output_text += "s"
            output_text += ".\n"

        if self.var_accessories_12_qty.get() > 0:
            output_text += str(self.var_accessories_12_qty.get()) + " " + str(self.selected_accessories_12.get())
            if self.var_accessories_12_qty.get() > 1:
                output_text += "s"
            output_text += ".\n"

        if self.var_accessories_13_qty.get() > 0:
            output_text += str(self.var_accessories_13_qty.get()) + " " + str(self.selected_accessories_13.get())
            if self.var_accessories_13_qty.get() > 1:
                output_text += "s"
            output_text += ".\n"

        if self.var_accessories_14_qty.get() > 0:
            output_text += str(self.var_accessories_14_qty.get()) + " " + str(self.selected_accessories_14.get())
            if self.var_accessories_14_qty.get() > 1:
                output_text += "s"
            output_text += ".\n"

        if self.var_accessories_15_qty.get() > 0:
            output_text += str(self.var_accessories_15_qty.get()) + " " + str(self.selected_accessories_15.get())
            if self.var_accessories_15_qty.get() > 1:
                output_text += "s"
            output_text += ".\n"

        if self.var_accessories_16_qty.get() > 0:
            output_text += str(self.var_accessories_16_qty.get()) + " " + str(self.selected_accessories_16.get())
            if self.var_accessories_16_qty.get() > 1:
                output_text += "s"
            output_text += ".\n"

        if self.var_accessories_17_qty.get() > 0:
            output_text += str(self.var_accessories_17_qty.get()) + " " + str(self.selected_accessories_17.get())
            if self.var_accessories_17_qty.get() > 1:
                output_text += "s"
            output_text += ".\n"

        if self.var_accessories_18_qty.get() > 0:
            output_text += str(self.var_accessories_18_qty.get()) + " " + str(self.selected_accessories_18.get())
            if self.var_accessories_18_qty.get() > 1:
                output_text += "s"
            output_text += ".\n"

        if self.var_accessories_19_qty.get() > 0:
            output_text += str(self.var_accessories_19_qty.get()) + " " + str(self.selected_accessories_19.get())
            if self.var_accessories_19_qty.get() > 1:
                output_text += "s"
            output_text += ".\n"

        if self.var_accessories_20_qty.get() > 0:
            output_text += str(self.var_accessories_20_qty.get()) + " " + str(self.selected_accessories_20.get())
            if self.var_accessories_20_qty.get() > 1:
                output_text += "s"
            output_text += ".\n"

        if self.var_accessories_21_qty.get() > 0:
            output_text += str(self.var_accessories_21_qty.get()) + " " + str(self.selected_accessories_21.get())
            if self.var_accessories_21_qty.get() > 1:
                output_text += "s"
            output_text += ".\n"

        if self.var_accessories_22_qty.get() > 0:
            output_text += str(self.var_accessories_22_qty.get()) + " " + str(self.selected_accessories_22.get())
            if self.var_accessories_22_qty.get() > 1:
                output_text += "s"
            output_text += ".\n"

        if self.var_accessories_23_qty.get() > 0:
            output_text += str(self.var_accessories_23_qty.get()) + " " + str(self.selected_accessories_23.get())
            if self.var_accessories_23_qty.get() > 1:
                output_text += "s"
            output_text += ".\n"

        if self.var_accessories_24_qty.get() > 0:
            output_text += str(self.var_accessories_24_qty.get()) + " " + str(self.selected_accessories_24.get())
            if self.var_accessories_24_qty.get() > 1:
                output_text += "s"
            output_text += ".\n"

        if self.var_accessories_25_qty.get() > 0:
            output_text += str(self.var_accessories_25_qty.get()) + " " + str(self.selected_accessories_25.get())
            if self.var_accessories_25_qty.get() > 1:
                output_text += "s"
            output_text += ".\n"

        if self.var_accessories_26_qty.get() > 0:
            output_text += str(self.var_accessories_26_qty.get()) + " " + str(self.selected_accessories_26.get())
            if self.var_accessories_26_qty.get() > 1:
                output_text += "s"
            output_text += ".\n"

        if self.var_accessories_27_qty.get() > 0:
            output_text += str(self.var_accessories_27_qty.get()) + " " + str(self.selected_accessories_27.get())
            if self.var_accessories_27_qty.get() > 1:
                output_text += "s"
            output_text += ".\n"

        if self.var_accessories_28_qty.get() > 0:
            output_text += str(self.var_accessories_28_qty.get()) + " " + str(self.selected_accessories_28.get())
            if self.var_accessories_28_qty.get() > 1:
                output_text += "s"
            output_text += ".\n"

        if self.var_accessories_29_qty.get() > 0:
            output_text += str(self.var_accessories_29_qty.get()) + " " + str(self.selected_accessories_29.get())
            if self.var_accessories_29_qty.get() > 1:
                output_text += "s"
            output_text += ".\n"

        if self.var_accessories_30_qty.get() > 0:
            output_text += str(self.var_accessories_30_qty.get()) + " " + str(self.selected_accessories_30.get())
            if self.var_accessories_30_qty.get() > 1:
                output_text += "s"
            output_text += ".\n"

        if str(self.selected_component_armor_1.get()) != "Component Armor":
            output_text += str(self.selected_component_armor_1.get()) + ": "
            output_text += str(self.var_component_armor_count_qty_1.get()) + " points "
            output_text += f"protecting {self.var_component_armor_spaces_qty_1.get()} spaces, "
            output_text += f"facing {self.selected_component_armor_facing_1.get()}.\n"

        if str(self.selected_component_armor_2.get()) != "Component Armor":
            output_text += str(self.selected_component_armor_2.get()) + ": "
            output_text += str(self.var_component_armor_count_qty_2.get()) + " points "
            output_text += f"protecting {self.var_component_armor_spaces_qty_2.get()} spaces, "
            output_text += f"facing {self.selected_component_armor_facing_2.get()}.\n"

        if str(self.selected_component_armor_3.get()) != "Component Armor":
            output_text += str(self.selected_component_armor_3.get()) + ": "
            output_text += str(self.var_component_armor_count_qty_3.get()) + " points "
            output_text += f"protecting {self.var_component_armor_spaces_qty_3.get()} spaces, "
            output_text += f"facing {self.selected_component_armor_facing_3.get()}.\n"

        if str(self.selected_component_armor_4.get()) != "Component Armor":
            output_text += str(self.selected_component_armor_4.get()) + ": "
            output_text += str(self.var_component_armor_count_qty_4.get()) + " points "
            output_text += f"protecting {self.var_component_armor_spaces_qty_4.get()} spaces, "
            output_text += f"facing {self.selected_component_armor_facing_4.get()}.\n"

        if str(self.selected_component_armor_5.get()) != "Component Armor":
            output_text += str(self.selected_component_armor_5.get()) + ": "
            output_text += str(self.var_component_armor_count_qty_5.get()) + " points "
            output_text += f"protecting {self.var_component_armor_spaces_qty_5.get()} spaces, "
            output_text += f"facing {self.selected_component_armor_facing_5.get()}.\n"

        if self.var_rocket_booster_pounds_qty_1.get() > 0:
            output_text += f"{self.var_rocket_booster_pounds_qty_1.get()} lbs rocket booster facing "
            output_text += f"{self.selected_rocket_booster_facing_1.get()} producing {self.label_rocket_booster_1_thrust.cget("text")}"
            output_text += " of acceleration.\n"

        if self.var_rocket_booster_pounds_qty_2.get() > 0:
            output_text += f"{self.var_rocket_booster_pounds_qty_2.get()} lbs rocket booster facing "
            output_text += f"{self.selected_rocket_booster_facing_2.get()} producing {self.label_rocket_booster_2_thrust.cget("text")}"
            output_text += " of acceleration.\n"

        if self.var_rocket_booster_pounds_qty_3.get() > 0:
            output_text += f"{self.var_rocket_booster_pounds_qty_3.get()} lbs rocket booster facing "
            output_text += f"{self.selected_rocket_booster_facing_3.get()} producing {self.label_rocket_booster_3_thrust.cget("text")}"
            output_text += " of acceleration.\n"

        if self.var_rocket_booster_pounds_qty_4.get() > 0:
            output_text += f"{self.var_rocket_booster_pounds_qty_4.get()} lbs rocket booster facing "
            output_text += f"{self.selected_rocket_booster_facing_4.get()} producing {self.label_rocket_booster_4_thrust.cget("text")}"
            output_text += " of acceleration.\n"

        if self.var_rocket_booster_pounds_qty_5.get() > 0:
            output_text += f"{self.var_rocket_booster_pounds_qty_5.get()} lbs rocket booster facing "
            output_text += f"{self.selected_rocket_booster_facing_5.get()} producing {self.label_rocket_booster_5_thrust.cget("text")}"
            output_text += " of acceleration.\n"

        if self.var_personal_equipment_1_qty.get() > 0:
            output_text += f"{self.var_personal_equipment_1_qty.get()} {self.selected_personal_equipment_1.get()}.\n"

        if self.var_personal_equipment_2_qty.get() > 0:
            output_text += f"{self.var_personal_equipment_2_qty.get()} {self.selected_personal_equipment_2.get()}.\n"

        if self.var_personal_equipment_3_qty.get() > 0:
            output_text += f"{self.var_personal_equipment_3_qty.get()} {self.selected_personal_equipment_3.get()}.\n"

        if self.var_personal_equipment_4_qty.get() > 0:
            output_text += f"{self.var_personal_equipment_4_qty.get()} {self.selected_personal_equipment_4.get()}.\n"

        if self.var_personal_equipment_5_qty.get() > 0:
            output_text += f"{self.var_personal_equipment_5_qty.get()} {self.selected_personal_equipment_5.get()}.\n"

        if self.var_personal_equipment_6_qty.get() > 0:
            output_text += f"{self.var_personal_equipment_6_qty.get()} {self.selected_personal_equipment_6.get()}.\n"

        if self.var_personal_equipment_7_qty.get() > 0:
            output_text += f"{self.var_personal_equipment_7_qty.get()} {self.selected_personal_equipment_7.get()}\n"

        if self.var_personal_equipment_8_qty.get() > 0:
            output_text += f"{self.var_personal_equipment_8_qty.get()} {self.selected_personal_equipment_8.get()}.\n"

        if self.var_personal_equipment_9_qty.get() > 0:
            output_text += f"{self.var_personal_equipment_9_qty.get()} {self.selected_personal_equipment_9.get()}.\n"

        if self.var_personal_equipment_10_qty.get() > 0:
            output_text += f"{self.var_personal_equipment_10_qty.get()} {self.selected_personal_equipment_10.get()}.\n"

        messagebox.showinfo("Debug", output_text)

    def menu_file_exit(self, *args):
        response = messagebox.askquestion('Exit Application', 'Do you really want to exit?')
        if response == 'yes':
            self.root.quit()

    def menu_help_how_does_this_work(self, *args):
        display_info: str = "How Does This Work?\n"
        display_info += "Welcome to the Python Car Wars Designer tool.\n"
        display_info += "\n"
        display_info += "Using dropdown list boxes, select vehicle body, modifications, chassis and suspension.\n"
        display_info += "\n"
        display_info += "Select engine and modifications, tires, crew, armor selections and allocations,\n"
        display_info += "\n"
        display_info += "Select weapons, count, ammo, extra magazines and facings.\n"
        display_info += "\n"
        display_info += "Select accessories.  Commonly used ones are towards the top of the list.\n"
        display_info += "\n"
        display_info += "Select component armor.  Select number of spaces protected, armor count, and facing.\n"
        display_info += "\n"
        display_info += "Select rocket boosters.  Confirm the accelration value is correct.\n"
        display_info += "\n"
        display_info += "Select personal equipent.\n"
        display_info += "\n"
        display_info += "Use 'File New' to start over.\n"
        display_info += "\n"
        display_info += "Use 'File Save' to save your progress to the current file.\n"
        display_info += "\n"
        display_info += "Use 'File Save As' to save your progress to a new file.\n"

        messagebox.showinfo("How Does This Work?", display_info)

    def menu_help_about(self, *args):
        messagebox.showinfo("About", f"Python Designer {self.datestamp}")

    def menu_help_whats_new(self, *args):
        display_info: str = "What's New with the Python Designer:\n"
        display_info += "\n"
        display_info += "1) Weapon listings have had their ToHit and Damage values displayed.\n"
        display_info += "\n"
        display_info += "2) The 'grenade equivalent' setting for personal equipment has been installed.\n"
        display_info += "\n"
        display_info += "3) A declaration that a design is overweight has been added to the Design Validity section.\n"
        display_info += "\n"
        display_info += "4) A bug appeared in the formatting of decimal values.  A new function was installed to formalize how numbers were presented.\n"
        display_info += "\n"
        messagebox.showinfo("What's New", display_info)
        
    def menu_help_whats_next(self, *args):
        display_info: str = "What's Next with the Python Designer:\n"
        display_info += "\n"
        display_info += "1) The Print option is currently just text.  Future work will include a dynamic graphic image of the design.\n"
        display_info += "\n"
        display_info += "2) Currently, blow-thru concealments are listed only as accessories.  Consider adding them to the weapon row.\n"
        display_info += "\n"
        display_info += "3) Currently, personal equipment that has an ammo count does not offer a means of calculating the cost of ammunition.  Install a method.\n"
        display_info += "\n"
        display_info += "4) Because the width of columns is dynamic, it is possible for the canvas to push off the edge of a screen.  Perfect the horizontal scroll bar to compensate.\n"
        messagebox.showinfo("What's Next", display_info)

    def load_record(self, path: str):
        file_input_list: list = []
        file_incoming_entry: str = ""
        with open(path, "r", encoding="UTF-8") as input_file:
            file_incoming_entry = input_file.readline()

        string_of_dicts_cleaned = re.sub(r"'(?=[^:]*:)", '"', file_incoming_entry)
        string_of_dicts_cleaned = re.sub(r"(?<=:)'", '"', string_of_dicts_cleaned)
        file_input_list = json.loads(string_of_dicts_cleaned)

        dict_list = file_input_list[0]

        self.selected_body.set(                           dict_list['self.selected_body'])
        self.selected_modifications.set(                  dict_list['self.selected_modifications'])
        self.selected_chassis.set(                        dict_list['self.selected_chassis'])
        self.selected_suspension.set(                     dict_list['self.selected_suspension'])
        self.selected_engine.set(                         dict_list['self.selected_engine'])
        self.var_engine_gas_super_charger.set(            dict_list['self.var_engine_gas_super_charger'])
        self.var_engine_gas_vp_turbo.set(                 dict_list['self.var_engine_gas_vp_turbo'])
        self.var_engine_gas_tube_headers.set(             dict_list['self.var_engine_gas_tube_headers'])
        self.var_engine_gas_blue_print.set(               dict_list['self.var_engine_gas_blue_print'])
        self.var_engine_gas_turbo.set(                    dict_list['self.var_engine_gas_turbo'])
        self.var_engine_electric_super_conductors.set(    dict_list['self.var_engine_electric_super_conductors'])
        self.var_engine_electric_platnium_catalysts.set(  dict_list['self.var_engine_electric_platnium_catalysts'])
        self.var_engine_electric_extra_power_cells.set(   dict_list['self.var_engine_electric_extra_power_cells'])
        self.selected_gas_tank.set(                       dict_list['self.selected_gas_tank'])
        self.var_gas_gallon_qty.set(                      dict_list['self.var_gas_gallon_qty'])
        self.var_front_tire_qty.set(                      dict_list['self.var_front_tire_qty'])
        self.var_rear_tire_qty.set(                       dict_list['self.var_rear_tire_qty'])
        self.var_driver_gunner_qty.set(                   dict_list['self.var_driver_gunner_qty'])
        self.var_passenger_qty.set(                       dict_list['self.var_passenger_qty'])
        self.var_outer_armor_qty.set(                     dict_list['self.var_outer_armor_qty'])
        self.var_inner_armor_qty.set(                     dict_list['self.var_inner_armor_qty'])
        self.var_front_tire_steelbelting.set(             dict_list['self.var_front_tire_steelbelting'])
        self.var_front_tire_radial.set(                   dict_list['self.var_front_tire_radial'])
        self.var_front_tire_fireproof.set(                dict_list['self.var_front_tire_fireproof'])
        self.var_front_tire_offroad.set(                  dict_list['self.var_front_tire_offroad'])
        self.var_front_tire_racing_slick.set(             dict_list['self.var_front_tire_racing_slick'])
        self.var_rear_tire_steelbelting.set(              dict_list['self.var_rear_tire_steelbelting'])
        self.var_rear_tire_radial.set(                    dict_list['self.var_rear_tire_radial'])
        self.var_rear_tire_fireproof.set(                 dict_list['self.var_rear_tire_fireproof'])
        self.var_rear_tire_offroad.set(                   dict_list['self.var_rear_tire_offroad'])
        self.var_rear_tire_racing_slick.set(              dict_list['self.var_rear_tire_racing_slick'])
        self.selected_front_tire.set(                     dict_list['self.selected_front_tire'])
        self.selected_rear_tire.set(                      dict_list['self.selected_rear_tire'])
        self.selected_outer_armor.set(                    dict_list['self.selected_outer_armor'])
        self.selected_inner_armor.set(                    dict_list['self.selected_inner_armor'])
        self.selected_weapon_alt_1.set(                   dict_list['self.selected_weapon_alt_1'])
        if dict_list['self.selected_sub_weapon_1_canvas'] == "None":
            if self.sub_weapon_dropdown_1_canvas is not None:
               self.sub_weapon_dropdown_1_canvas.grid_forget()
            self.selected_sub_weapon_1_canvas = None
        else:
            self.selected_sub_weapon_1_canvas.set(        dict_list['self.selected_sub_weapon_1_canvas'])
        self.var_sub_weapon_1_qty.set(                    dict_list['self.var_sub_weapon_1_qty'])
        self.var_sub_weapon_ammo_1_qty.set(               dict_list['self.var_sub_weapon_ammo_1_qty'])
        self.var_sub_weapon_extra_mags_1_qty.set(         dict_list['self.var_sub_weapon_extra_mags_1_qty'])
        self.weapon_armor_facing_1.set(                   dict_list['self.weapon_armor_facing_1'])
        self.selected_weapon_alt_2.set(                   dict_list['self.selected_weapon_alt_2'])
        if dict_list['self.selected_sub_weapon_2_canvas'] == "None":
            if self.sub_weapon_dropdown_2_canvas is not None:
                self.sub_weapon_dropdown_2_canvas.grid_forget()
            self.selected_sub_weapon_2_canvas = None
        else:
            self.selected_sub_weapon_2_canvas.set(        dict_list['self.selected_sub_weapon_2_canvas'])
        self.var_sub_weapon_2_qty.set(                    dict_list['self.var_sub_weapon_2_qty'])
        self.var_sub_weapon_ammo_2_qty.set(               dict_list['self.var_sub_weapon_ammo_2_qty'])
        self.var_sub_weapon_extra_mags_2_qty.set(         dict_list['self.var_sub_weapon_extra_mags_2_qty'])
        self.weapon_armor_facing_2.set(                   dict_list['self.weapon_armor_facing_2'])
        self.selected_weapon_alt_3.set(                   dict_list['self.selected_weapon_alt_3'])
        if dict_list['self.selected_sub_weapon_3_canvas'] == "None":
            if self.sub_weapon_dropdown_3_canvas is not None:
                self.sub_weapon_dropdown_3_canvas.grid_forget()
            self.selected_sub_weapon_3_canvas = None
        else:
            self.selected_sub_weapon_3_canvas.set(        dict_list['self.selected_sub_weapon_3_canvas'])
        self.var_sub_weapon_3_qty.set(                    dict_list['self.var_sub_weapon_3_qty'])
        self.var_sub_weapon_ammo_3_qty.set(               dict_list['self.var_sub_weapon_ammo_3_qty'])
        self.var_sub_weapon_extra_mags_3_qty.set(         dict_list['self.var_sub_weapon_extra_mags_3_qty'])
        self.weapon_armor_facing_3.set(                   dict_list['self.weapon_armor_facing_3'])
        self.selected_weapon_alt_4.set(                   dict_list['self.selected_weapon_alt_4'])
        if dict_list['self.selected_sub_weapon_4_canvas'] == "None":
            if self.sub_weapon_dropdown_4_canvas is not None:
                self.sub_weapon_dropdown_4_canvas.grid_forget()
            self.selected_sub_weapon_4_canvas = None
        else:
            self.selected_sub_weapon_4_canvas.set(        dict_list['self.selected_sub_weapon_4_canvas'])
        self.var_sub_weapon_4_qty.set(                    dict_list['self.var_sub_weapon_4_qty'])
        self.var_sub_weapon_ammo_4_qty.set(               dict_list['self.var_sub_weapon_ammo_4_qty'])
        self.var_sub_weapon_extra_mags_4_qty.set(         dict_list['self.var_sub_weapon_extra_mags_4_qty'])
        self.weapon_armor_facing_4.set(                   dict_list['self.weapon_armor_facing_4'])
        self.selected_weapon_alt_5.set(                   dict_list['self.selected_weapon_alt_5'])
        if dict_list['self.selected_sub_weapon_5_canvas'] == "None":
            if self.sub_weapon_dropdown_5_canvas is not None:
                self.sub_weapon_dropdown_5_canvas.grid_forget()
            self.selected_sub_weapon_5_canvas = None
        else:
            self.selected_sub_weapon_5_canvas.set(        dict_list['self.selected_sub_weapon_5_canvas'])
        self.var_sub_weapon_5_qty.set(                    dict_list['self.var_sub_weapon_5_qty'])
        self.var_sub_weapon_ammo_5_qty.set(               dict_list['self.var_sub_weapon_ammo_5_qty'])
        self.var_sub_weapon_extra_mags_5_qty.set(         dict_list['self.var_sub_weapon_extra_mags_5_qty'])
        self.weapon_armor_facing_5.set(                   dict_list['self.weapon_armor_facing_5'])
        self.selected_weapon_alt_6.set(                   dict_list['self.selected_weapon_alt_6'])
        if dict_list['self.selected_sub_weapon_6_canvas'] == "None":
            if self.sub_weapon_dropdown_6_canvas is not None:
                self.sub_weapon_dropdown_6_canvas.grid_forget()
            self.selected_sub_weapon_6_canvas = None
        else:
            self.selected_sub_weapon_6_canvas.set(        dict_list['self.selected_sub_weapon_6_canvas'])
        self.var_sub_weapon_6_qty.set(                    dict_list['self.var_sub_weapon_6_qty'])
        self.var_sub_weapon_ammo_6_qty.set(               dict_list['self.var_sub_weapon_ammo_6_qty'])
        self.var_sub_weapon_extra_mags_6_qty.set(         dict_list['self.var_sub_weapon_extra_mags_6_qty'])
        self.weapon_armor_facing_6.set(                   dict_list['self.weapon_armor_facing_6'])
        self.selected_weapon_alt_7.set(                   dict_list['self.selected_weapon_alt_7'])
        if dict_list['self.selected_sub_weapon_7_canvas'] == "None":
            if self.sub_weapon_dropdown_7_canvas is not None:
                self.sub_weapon_dropdown_7_canvas.grid_forget()
            self.selected_sub_weapon_7_canvas = None
        else:
            self.selected_sub_weapon_7_canvas.set(        dict_list['self.selected_sub_weapon_7_canvas'])
        self.var_sub_weapon_7_qty.set(                    dict_list['self.var_sub_weapon_7_qty'])
        self.var_sub_weapon_ammo_7_qty.set(               dict_list['self.var_sub_weapon_ammo_7_qty'])
        self.var_sub_weapon_extra_mags_7_qty.set(         dict_list['self.var_sub_weapon_extra_mags_7_qty'])
        self.weapon_armor_facing_7.set(                   dict_list['self.weapon_armor_facing_7'])
        self.selected_weapon_alt_8.set(                   dict_list['self.selected_weapon_alt_8'])
        if dict_list['self.selected_sub_weapon_8_canvas'] == "None":
            if self.sub_weapon_dropdown_8_canvas is not None:
                self.sub_weapon_dropdown_8_canvas.grid_forget()
            self.selected_sub_weapon_8_canvas = None
        else:
            self.selected_sub_weapon_8_canvas.set(        dict_list['self.selected_sub_weapon_8_canvas'])
        self.var_sub_weapon_8_qty.set(                    dict_list['self.var_sub_weapon_8_qty'])
        self.var_sub_weapon_ammo_8_qty.set(               dict_list['self.var_sub_weapon_ammo_8_qty'])
        self.var_sub_weapon_extra_mags_8_qty.set(         dict_list['self.var_sub_weapon_extra_mags_8_qty'])
        self.weapon_armor_facing_8.set(                   dict_list['self.weapon_armor_facing_8'])
        self.selected_weapon_alt_9.set(                   dict_list['self.selected_weapon_alt_9'])
        if dict_list['self.selected_sub_weapon_9_canvas'] == "None":
            if self.sub_weapon_dropdown_9_canvas is not None:
                self.sub_weapon_dropdown_9_canvas.grid_forget()
            self.selected_sub_weapon_9_canvas = None
        else:
            self.selected_sub_weapon_9_canvas.set(        dict_list['self.selected_sub_weapon_9_canvas'])
        self.var_sub_weapon_9_qty.set(                    dict_list['self.var_sub_weapon_9_qty'])
        self.var_sub_weapon_ammo_9_qty.set(               dict_list['self.var_sub_weapon_ammo_9_qty'])
        self.var_sub_weapon_extra_mags_9_qty.set(         dict_list['self.var_sub_weapon_extra_mags_9_qty'])
        self.weapon_armor_facing_9.set(                   dict_list['self.weapon_armor_facing_9'])
        self.selected_weapon_alt_10.set(                  dict_list['self.selected_weapon_alt_10'])
        if dict_list['self.selected_sub_weapon_10_canvas'] == "None":
            if self.sub_weapon_dropdown_10_canvas is not None:
                self.sub_weapon_dropdown_10_canvas.grid_forget()
            self.selected_sub_weapon_10_canvas = None
        else:
            self.selected_sub_weapon_10_canvas.set(       dict_list['self.selected_sub_weapon_10_canvas'])
        self.var_sub_weapon_10_qty.set(                   dict_list['self.var_sub_weapon_10_qty'])
        self.var_sub_weapon_ammo_10_qty.set(              dict_list['self.var_sub_weapon_ammo_10_qty'])
        self.var_sub_weapon_extra_mags_10_qty.set(        dict_list['self.var_sub_weapon_extra_mags_10_qty'])
        self.weapon_armor_facing_10.set(                  dict_list['self.weapon_armor_facing_10'])
        self.selected_accessories_1.set(                  dict_list['self.selected_accessories_1'])
        self.var_accessories_1_qty.set(                   dict_list['self.var_accessories_1_qty'])
        self.selected_accessories_2.set(                  dict_list['self.selected_accessories_2'])
        self.var_accessories_2_qty.set(                   dict_list['self.var_accessories_2_qty'])
        self.selected_accessories_3.set(                  dict_list['self.selected_accessories_3'])
        self.var_accessories_3_qty.set(                   dict_list['self.var_accessories_3_qty'])
        self.selected_accessories_4.set(                  dict_list['self.selected_accessories_4'])
        self.var_accessories_4_qty.set(                   dict_list['self.var_accessories_4_qty'])
        self.selected_accessories_5.set(                  dict_list['self.selected_accessories_5'])
        self.var_accessories_5_qty.set(                   dict_list['self.var_accessories_5_qty'])
        self.selected_accessories_6.set(                  dict_list['self.selected_accessories_6'])
        self.var_accessories_6_qty.set(                   dict_list['self.var_accessories_6_qty'])
        self.selected_accessories_7.set(                  dict_list['self.selected_accessories_7'])
        self.var_accessories_7_qty.set(                   dict_list['self.var_accessories_7_qty'])
        self.selected_accessories_8.set(                  dict_list['self.selected_accessories_8'])
        self.var_accessories_8_qty.set(                   dict_list['self.var_accessories_8_qty'])
        self.selected_accessories_9.set(                  dict_list['self.selected_accessories_9'])
        self.var_accessories_9_qty.set(                   dict_list['self.var_accessories_9_qty'])
        self.selected_accessories_10.set(                 dict_list['self.selected_accessories_10'])
        self.var_accessories_10_qty.set(                  dict_list['self.var_accessories_10_qty'])
        self.selected_accessories_11.set(                 dict_list['self.selected_accessories_11'])
        self.var_accessories_11_qty.set(                  dict_list['self.var_accessories_11_qty'])
        self.selected_accessories_12.set(                 dict_list['self.selected_accessories_12'])
        self.var_accessories_12_qty.set(                  dict_list['self.var_accessories_12_qty'])
        self.selected_accessories_13.set(                 dict_list['self.selected_accessories_13'])
        self.var_accessories_13_qty.set(                  dict_list['self.var_accessories_13_qty'])
        self.selected_accessories_14.set(                 dict_list['self.selected_accessories_14'])
        self.var_accessories_14_qty.set(                  dict_list['self.var_accessories_14_qty'])
        self.selected_accessories_15.set(                 dict_list['self.selected_accessories_15'])
        self.var_accessories_15_qty.set(                  dict_list['self.var_accessories_15_qty'])
        self.selected_accessories_16.set(                 dict_list['self.selected_accessories_16'])
        self.var_accessories_16_qty.set(                  dict_list['self.var_accessories_16_qty'])
        self.selected_accessories_17.set(                 dict_list['self.selected_accessories_17'])
        self.var_accessories_17_qty.set(                  dict_list['self.var_accessories_17_qty'])
        self.selected_accessories_18.set(                 dict_list['self.selected_accessories_18'])
        self.var_accessories_18_qty.set(                  dict_list['self.var_accessories_18_qty'])
        self.selected_accessories_19.set(                 dict_list['self.selected_accessories_19'])
        self.var_accessories_19_qty.set(                  dict_list['self.var_accessories_19_qty'])
        self.selected_accessories_20.set(                 dict_list['self.selected_accessories_20'])
        self.var_accessories_20_qty.set(                  dict_list['self.var_accessories_20_qty'])
        self.selected_accessories_21.set(                 dict_list['self.selected_accessories_21'])
        self.var_accessories_21_qty.set(                  dict_list['self.var_accessories_21_qty'])
        self.selected_accessories_22.set(                 dict_list['self.selected_accessories_22'])
        self.var_accessories_22_qty.set(                  dict_list['self.var_accessories_22_qty'])
        self.selected_accessories_23.set(                 dict_list['self.selected_accessories_23'])
        self.var_accessories_23_qty.set(                  dict_list['self.var_accessories_23_qty'])
        self.selected_accessories_24.set(                 dict_list['self.selected_accessories_24'])
        self.var_accessories_24_qty.set(                  dict_list['self.var_accessories_24_qty'])
        self.selected_accessories_25.set(                 dict_list['self.selected_accessories_25'])
        self.var_accessories_25_qty.set(                  dict_list['self.var_accessories_25_qty'])
        self.selected_accessories_26.set(                 dict_list['self.selected_accessories_26'])
        self.var_accessories_26_qty.set(                  dict_list['self.var_accessories_26_qty'])
        self.selected_accessories_27.set(                 dict_list['self.selected_accessories_27'])
        self.var_accessories_27_qty.set(                  dict_list['self.var_accessories_27_qty'])
        self.selected_accessories_28.set(                 dict_list['self.selected_accessories_28'])
        self.var_accessories_28_qty.set(                  dict_list['self.var_accessories_28_qty'])
        self.selected_accessories_29.set(                 dict_list['self.selected_accessories_29'])
        self.var_accessories_29_qty.set(                  dict_list['self.var_accessories_29_qty'])
        self.selected_accessories_30.set(                 dict_list['self.selected_accessories_30'])
        self.var_accessories_30_qty.set(                  dict_list['self.var_accessories_30_qty'])
        self.selected_component_armor_1.set(              dict_list['self.selected_component_armor_1'])
        self.selected_component_armor_facing_1.set(       dict_list['self.selected_component_armor_facing_1'])
        self.var_component_armor_spaces_qty_1.set(        dict_list['self.var_component_armor_spaces_qty_1'])
        self.var_component_armor_count_qty_1.set(         dict_list['self.var_component_armor_count_qty_1'])
        self.selected_component_armor_2.set(              dict_list['self.selected_component_armor_2'])
        self.selected_component_armor_facing_2.set(       dict_list['self.selected_component_armor_facing_2'])
        self.var_component_armor_spaces_qty_2.set(        dict_list['self.var_component_armor_spaces_qty_2'])
        self.var_component_armor_count_qty_2.set(         dict_list['self.var_component_armor_count_qty_2'])
        self.selected_component_armor_3.set(              dict_list['self.selected_component_armor_3'])
        self.selected_component_armor_facing_3.set(       dict_list['self.selected_component_armor_facing_3'])
        self.var_component_armor_spaces_qty_3.set(        dict_list['self.var_component_armor_spaces_qty_3'])
        self.var_component_armor_count_qty_3.set(         dict_list['self.var_component_armor_count_qty_3'])
        self.selected_component_armor_4.set(              dict_list['self.selected_component_armor_4'])
        self.selected_component_armor_facing_4.set(       dict_list['self.selected_component_armor_facing_4'])
        self.var_component_armor_spaces_qty_4.set(        dict_list['self.var_component_armor_spaces_qty_4'])
        self.var_component_armor_count_qty_4.set(         dict_list['self.var_component_armor_count_qty_4'])
        self.selected_component_armor_5.set(              dict_list['self.selected_component_armor_5'])
        self.selected_component_armor_facing_5.set(       dict_list['self.selected_component_armor_facing_5'])
        self.var_component_armor_spaces_qty_5.set(        dict_list['self.var_component_armor_spaces_qty_5'])
        self.var_component_armor_count_qty_5.set(         dict_list['self.var_component_armor_count_qty_5'])
        self.var_rocket_booster_pounds_qty_1.set(         dict_list['self.var_rocket_booster_pounds_qty_1'])
        self.selected_rocket_booster_facing_1.set(        dict_list['self.selected_rocket_booster_facing_1'])
        self.var_rocket_booster_pounds_qty_2.set(         dict_list['self.var_rocket_booster_pounds_qty_2'])
        self.selected_rocket_booster_facing_2.set(        dict_list['self.selected_rocket_booster_facing_2'])
        self.var_rocket_booster_pounds_qty_3.set(         dict_list['self.var_rocket_booster_pounds_qty_3'])
        self.selected_rocket_booster_facing_3.set(        dict_list['self.selected_rocket_booster_facing_3'])
        self.var_rocket_booster_pounds_qty_4.set(         dict_list['self.var_rocket_booster_pounds_qty_4'])
        self.selected_rocket_booster_facing_4.set(        dict_list['self.selected_rocket_booster_facing_4'])
        self.var_rocket_booster_pounds_qty_5.set(         dict_list['self.var_rocket_booster_pounds_qty_5'])
        self.selected_rocket_booster_facing_5.set(        dict_list['self.selected_rocket_booster_facing_5'])
        self.selected_personal_equipment_1.set(           dict_list['self.selected_personal_equipment_1'])
        self.var_personal_equipment_1_qty.set(            dict_list['self.var_personal_equipment_1_qty'])
        self.selected_personal_equipment_2.set(           dict_list['self.selected_personal_equipment_2'])
        self.var_personal_equipment_2_qty.set(            dict_list['self.var_personal_equipment_2_qty'])
        self.selected_personal_equipment_3.set(           dict_list['self.selected_personal_equipment_3'])
        self.var_personal_equipment_3_qty.set(            dict_list['self.var_personal_equipment_3_qty'])
        self.selected_personal_equipment_4.set(           dict_list['self.selected_personal_equipment_4'])
        self.var_personal_equipment_4_qty.set(            dict_list['self.var_personal_equipment_4_qty'])
        self.selected_personal_equipment_5.set(           dict_list['self.selected_personal_equipment_5'])
        self.var_personal_equipment_5_qty.set(            dict_list['self.var_personal_equipment_5_qty'])
        self.selected_personal_equipment_6.set(           dict_list['self.selected_personal_equipment_6'])
        self.var_personal_equipment_6_qty.set(            dict_list['self.var_personal_equipment_6_qty'])
        self.selected_personal_equipment_7.set(           dict_list['self.selected_personal_equipment_7'])
        self.var_personal_equipment_7_qty.set(            dict_list['self.var_personal_equipment_7_qty'])
        self.selected_personal_equipment_8.set(           dict_list['self.selected_personal_equipment_8'])
        self.var_personal_equipment_8_qty.set(            dict_list['self.var_personal_equipment_8_qty'])
        self.selected_personal_equipment_9.set(           dict_list['self.selected_personal_equipment_9'])
        self.var_personal_equipment_9_qty.set(            dict_list['self.var_personal_equipment_9_qty'])
        self.selected_personal_equipment_10.set(          dict_list['self.selected_personal_equipment_10'])
        self.var_personal_equipment_10_qty.set(           dict_list['self.var_personal_equipment_10_qty'])
        self.var_six_wheel_chassis.set(                   dict_list['self.var_six_wheel_chassis'])
        self.var_sloped_armor.set(                        dict_list['self.var_sloped_armor'])
        self.var_outer_front_armor_allocation_qty.set(    dict_list['self.var_outer_front_armor_allocation_qty'])
        self.var_outer_back_armor_allocation_qty.set(     dict_list['self.var_outer_back_armor_allocation_qty'])
        self.var_outer_left_armor_allocation_qty.set(     dict_list['self.var_outer_left_armor_allocation_qty'])
        self.var_outer_right_armor_allocation_qty.set(    dict_list['self.var_outer_right_armor_allocation_qty'])
        self.var_outer_top_armor_allocation_qty.set(      dict_list['self.var_outer_top_armor_allocation_qty'])
        self.var_outer_underbody_armor_allocation_qty.set(dict_list['self.var_outer_underbody_armor_allocation_qty'])
        self.var_inner_front_armor_allocation_qty.set(    dict_list['self.var_inner_front_armor_allocation_qty'])
        self.var_inner_back_armor_allocation_qty.set(     dict_list['self.var_inner_back_armor_allocation_qty'])
        self.var_inner_left_armor_allocation_qty.set(     dict_list['self.var_inner_left_armor_allocation_qty'])
        self.var_inner_right_armor_allocation_qty.set(    dict_list['self.var_inner_right_armor_allocation_qty'])
        self.var_inner_top_armor_allocation_qty.set(      dict_list['self.var_inner_top_armor_allocation_qty'])
        self.var_inner_underbody_armor_allocation_qty.set(dict_list['self.var_inner_underbody_armor_allocation_qty'])

    def save_record(self, path: str):
        file_output_list = []
        entry_dict: dict = {}
        entry_dict["self.selected_body"]                            = self.selected_body.get()
        entry_dict["self.selected_modifications"]                   = self.selected_modifications.get()
        entry_dict["self.selected_chassis"]                         = self.selected_chassis.get()
        entry_dict["self.selected_suspension"]                      = self.selected_suspension.get()
        entry_dict["self.selected_engine"]                          = self.selected_engine.get()
        entry_dict["self.var_engine_gas_super_charger"]             = self.var_engine_gas_super_charger.get()
        entry_dict["self.var_engine_gas_vp_turbo"]                  = self.var_engine_gas_vp_turbo.get()
        entry_dict["self.var_engine_gas_tube_headers"]              = self.var_engine_gas_tube_headers.get()
        entry_dict["self.var_engine_gas_blue_print"]                = self.var_engine_gas_blue_print.get()
        entry_dict["self.var_engine_gas_turbo"]                     = self.var_engine_gas_turbo.get()
        entry_dict["self.var_engine_electric_super_conductors"]     = self.var_engine_electric_super_conductors.get()
        entry_dict["self.var_engine_electric_platnium_catalysts"]   = self.var_engine_electric_platnium_catalysts.get()
        entry_dict["self.var_engine_electric_extra_power_cells"]    = self.var_engine_electric_extra_power_cells.get()
        entry_dict["self.selected_gas_tank"]                        = self.selected_gas_tank.get()
        entry_dict["self.var_gas_gallon_qty"]                       = self.var_gas_gallon_qty.get()
        entry_dict["self.var_front_tire_qty"]                       = self.var_front_tire_qty.get()
        entry_dict["self.var_rear_tire_qty"]                        = self.var_rear_tire_qty.get()
        entry_dict["self.var_driver_gunner_qty"]                    = self.var_driver_gunner_qty.get()
        entry_dict["self.var_passenger_qty"]                        = self.var_passenger_qty.get()
        entry_dict["self.var_outer_armor_qty"]                      = self.var_outer_armor_qty.get()
        entry_dict["self.var_inner_armor_qty"]                      = self.var_inner_armor_qty.get()
        entry_dict["self.var_front_tire_steelbelting"]              = self.var_front_tire_steelbelting.get()
        entry_dict["self.var_front_tire_radial"]                    = self.var_front_tire_radial.get()
        entry_dict["self.var_front_tire_fireproof"]                 = self.var_front_tire_fireproof.get()
        entry_dict["self.var_front_tire_offroad"]                   = self.var_front_tire_offroad.get()
        entry_dict["self.var_front_tire_racing_slick"]              = self.var_front_tire_racing_slick.get()
        entry_dict["self.var_rear_tire_steelbelting"]               = self.var_rear_tire_steelbelting.get()
        entry_dict["self.var_rear_tire_radial"]                     = self.var_rear_tire_radial.get()
        entry_dict["self.var_rear_tire_fireproof"]                  = self.var_rear_tire_fireproof.get()
        entry_dict["self.var_rear_tire_offroad"]                    = self.var_rear_tire_offroad.get()
        entry_dict["self.var_rear_tire_racing_slick"]               = self.var_rear_tire_racing_slick.get()
        entry_dict["self.selected_front_tire"]                      = self.selected_front_tire.get()
        entry_dict["self.selected_rear_tire"]                       = self.selected_rear_tire.get()
        entry_dict["self.selected_outer_armor"]                     = self.selected_outer_armor.get()
        entry_dict["self.selected_inner_armor"]                     = self.selected_inner_armor.get()
        entry_dict["self.selected_weapon_alt_1"]                    = self.selected_weapon_alt_1.get()
        if self.selected_sub_weapon_1_canvas is not None:
            entry_dict["self.selected_sub_weapon_1_canvas"]         = self.selected_sub_weapon_1_canvas.get()
        else:
            entry_dict["self.selected_sub_weapon_1_canvas"]         = "None"
        entry_dict["self.var_sub_weapon_1_qty"]                     = self.var_sub_weapon_1_qty.get()
        entry_dict["self.var_sub_weapon_ammo_1_qty"]                = self.var_sub_weapon_ammo_1_qty.get()
        entry_dict["self.var_sub_weapon_extra_mags_1_qty"]          = self.var_sub_weapon_extra_mags_1_qty.get()
        entry_dict["self.weapon_armor_facing_1"]                    = self.weapon_armor_facing_1.get()

        entry_dict["self.selected_weapon_alt_2"]                    = self.selected_weapon_alt_2.get()
        if self.selected_sub_weapon_2_canvas is not None:
            entry_dict["self.selected_sub_weapon_2_canvas"]         = self.selected_sub_weapon_2_canvas.get()
        else:
            entry_dict["self.selected_sub_weapon_2_canvas"]         = "None"
        entry_dict["self.var_sub_weapon_2_qty"]                     = self.var_sub_weapon_2_qty.get()
        entry_dict["self.var_sub_weapon_ammo_2_qty"]                = self.var_sub_weapon_ammo_2_qty.get()
        entry_dict["self.var_sub_weapon_extra_mags_2_qty"]          = self.var_sub_weapon_extra_mags_2_qty.get()
        entry_dict["self.weapon_armor_facing_2"]                    = self.weapon_armor_facing_2.get()
        entry_dict["self.selected_weapon_alt_3"]                    = self.selected_weapon_alt_3.get()
        if self.selected_sub_weapon_3_canvas is not None:
            entry_dict["self.selected_sub_weapon_3_canvas"]         = self.selected_sub_weapon_3_canvas.get()
        else:
            entry_dict["self.selected_sub_weapon_3_canvas"]         = "None"
        entry_dict["self.var_sub_weapon_3_qty"]                     = self.var_sub_weapon_3_qty.get()
        entry_dict["self.var_sub_weapon_ammo_3_qty"]                = self.var_sub_weapon_ammo_3_qty.get()
        entry_dict["self.var_sub_weapon_extra_mags_3_qty"]          = self.var_sub_weapon_extra_mags_3_qty.get()
        entry_dict["self.weapon_armor_facing_3"]                    = self.weapon_armor_facing_3.get()
        entry_dict["self.selected_weapon_alt_4"]                    = self.selected_weapon_alt_4.get()
        if self.selected_sub_weapon_4_canvas is not None:
            entry_dict["self.selected_sub_weapon_4_canvas"]         = self.selected_sub_weapon_4_canvas.get()
        else:
            entry_dict["self.selected_sub_weapon_4_canvas"]         = "None"
        entry_dict["self.var_sub_weapon_4_qty"]                     = self.var_sub_weapon_4_qty.get()
        entry_dict["self.var_sub_weapon_ammo_4_qty"]                = self.var_sub_weapon_ammo_4_qty.get()
        entry_dict["self.var_sub_weapon_extra_mags_4_qty"]          = self.var_sub_weapon_extra_mags_4_qty.get()
        entry_dict["self.weapon_armor_facing_4"]                    = self.weapon_armor_facing_4.get()
        entry_dict["self.selected_weapon_alt_5"]                    = self.selected_weapon_alt_5.get()
        if self.selected_sub_weapon_5_canvas is not None:
            entry_dict["self.selected_sub_weapon_5_canvas"]         = self.selected_sub_weapon_5_canvas.get()
        else:
            entry_dict["self.selected_sub_weapon_5_canvas"]         = "None"
        entry_dict["self.var_sub_weapon_5_qty"]                     = self.var_sub_weapon_5_qty.get()
        entry_dict["self.var_sub_weapon_ammo_5_qty"]                = self.var_sub_weapon_ammo_5_qty.get()
        entry_dict["self.var_sub_weapon_extra_mags_5_qty"]          = self.var_sub_weapon_extra_mags_5_qty.get()
        entry_dict["self.weapon_armor_facing_5"]                    = self.weapon_armor_facing_5.get()
        entry_dict["self.selected_weapon_alt_6"]                    = self.selected_weapon_alt_6.get()
        if self.selected_sub_weapon_6_canvas is not None:
            entry_dict["self.selected_sub_weapon_6_canvas"]         = self.selected_sub_weapon_6_canvas.get()
        else:
            entry_dict["self.selected_sub_weapon_6_canvas"]         = "None"
        entry_dict["self.var_sub_weapon_6_qty"]                     = self.var_sub_weapon_6_qty.get()
        entry_dict["self.var_sub_weapon_ammo_6_qty"]                = self.var_sub_weapon_ammo_6_qty.get()
        entry_dict["self.var_sub_weapon_extra_mags_6_qty"]          = self.var_sub_weapon_extra_mags_6_qty .get()
        entry_dict["self.weapon_armor_facing_6"]                    = self.weapon_armor_facing_6.get()
        entry_dict["self.selected_weapon_alt_7"]                    = self.selected_weapon_alt_7.get()
        if self.selected_sub_weapon_7_canvas is not None:
            entry_dict["self.selected_sub_weapon_7_canvas"]         = self.selected_sub_weapon_7_canvas.get()
        else:
            entry_dict["self.selected_sub_weapon_7_canvas"]         = "None"
        entry_dict["self.var_sub_weapon_7_qty"]                     = self.var_sub_weapon_7_qty.get()
        entry_dict["self.var_sub_weapon_ammo_7_qty"]                = self.var_sub_weapon_ammo_7_qty.get()
        entry_dict["self.var_sub_weapon_extra_mags_7_qty"]          = self.var_sub_weapon_extra_mags_7_qty.get()
        entry_dict["self.weapon_armor_facing_7"]                    = self.weapon_armor_facing_7.get()
        entry_dict["self.selected_weapon_alt_8"]                    = self.selected_weapon_alt_8.get()
        if self.selected_sub_weapon_8_canvas is not None:
            entry_dict["self.selected_sub_weapon_8_canvas"]         = self.selected_sub_weapon_8_canvas.get()
        else:
            entry_dict["self.selected_sub_weapon_8_canvas"]         ="None"
        entry_dict["self.var_sub_weapon_8_qty"]                     = self.var_sub_weapon_8_qty.get()
        entry_dict["self.var_sub_weapon_ammo_8_qty"]                = self.var_sub_weapon_ammo_8_qty.get()
        entry_dict["self.var_sub_weapon_extra_mags_8_qty"]          = self.var_sub_weapon_extra_mags_8_qty.get()
        entry_dict["self.weapon_armor_facing_8"]                    = self.weapon_armor_facing_8.get()
        entry_dict["self.selected_weapon_alt_9"]                    = self.selected_weapon_alt_9.get()
        if self.selected_sub_weapon_9_canvas is not None:
            entry_dict["self.selected_sub_weapon_9_canvas"]         = self.selected_sub_weapon_9_canvas.get()
        else:
            entry_dict["self.selected_sub_weapon_9_canvas"]         = "None"
        entry_dict["self.var_sub_weapon_9_qty"]                     = self.var_sub_weapon_9_qty.get()
        entry_dict["self.var_sub_weapon_ammo_9_qty"]                = self.var_sub_weapon_ammo_9_qty.get()
        entry_dict["self.var_sub_weapon_extra_mags_9_qty"]          = self.var_sub_weapon_extra_mags_9_qty.get()
        entry_dict["self.weapon_armor_facing_9"]                    = self.weapon_armor_facing_9.get()
        entry_dict["self.selected_weapon_alt_10"]                   = self.selected_weapon_alt_10.get()
        if self.selected_sub_weapon_10_canvas is not None:
            entry_dict["self.selected_sub_weapon_10_canvas"]        = self.selected_sub_weapon_10_canvas.get()
        else:
            entry_dict["self.selected_sub_weapon_10_canvas"]        = "None"
        entry_dict["self.var_sub_weapon_10_qty"]                    = self.var_sub_weapon_10_qty.get()
        entry_dict["self.var_sub_weapon_ammo_10_qty"]               = self.var_sub_weapon_ammo_10_qty.get()
        entry_dict["self.var_sub_weapon_extra_mags_10_qty"]         = self.var_sub_weapon_extra_mags_10_qty.get()
        entry_dict["self.weapon_armor_facing_10"]                   = self.weapon_armor_facing_10.get()
        entry_dict["self.selected_accessories_1"]                   = self.selected_accessories_1.get()
        entry_dict["self.var_accessories_1_qty"]                    = self.var_accessories_1_qty.get()
        entry_dict["self.selected_accessories_2"]                   = self.selected_accessories_2.get()
        entry_dict["self.var_accessories_2_qty"]                    = self.var_accessories_2_qty.get()
        entry_dict["self.selected_accessories_3"]                   = self.selected_accessories_3.get()
        entry_dict["self.var_accessories_3_qty"]                    = self.var_accessories_3_qty.get()
        entry_dict["self.selected_accessories_4"]                   = self.selected_accessories_4.get()
        entry_dict["self.var_accessories_4_qty"]                    = self.var_accessories_4_qty.get()
        entry_dict["self.selected_accessories_5"]                   = self.selected_accessories_5.get()
        entry_dict["self.var_accessories_5_qty"]                    = self.var_accessories_5_qty.get()
        entry_dict["self.selected_accessories_6"]                   = self.selected_accessories_6.get()
        entry_dict["self.var_accessories_6_qty"]                    = self.var_accessories_6_qty.get()
        entry_dict["self.selected_accessories_7"]                   = self.selected_accessories_7.get()
        entry_dict["self.var_accessories_7_qty"]                    = self.var_accessories_7_qty.get()
        entry_dict["self.selected_accessories_8"]                   = self.selected_accessories_8.get()
        entry_dict["self.var_accessories_8_qty"]                    = self.var_accessories_8_qty.get()
        entry_dict["self.selected_accessories_9"]                   = self.selected_accessories_9.get()
        entry_dict["self.var_accessories_9_qty"]                    = self.var_accessories_9_qty.get()
        entry_dict["self.selected_accessories_10"]                  = self.selected_accessories_10.get()
        entry_dict["self.var_accessories_10_qty"]                   = self.var_accessories_10_qty.get()
        entry_dict["self.selected_accessories_11"]                  = self.selected_accessories_11.get()
        entry_dict["self.var_accessories_11_qty"]                   = self.var_accessories_11_qty.get()
        entry_dict["self.selected_accessories_12"]                  = self.selected_accessories_12.get()
        entry_dict["self.var_accessories_12_qty"]                   = self.var_accessories_12_qty.get()
        entry_dict["self.selected_accessories_13"]                  = self.selected_accessories_13.get()
        entry_dict["self.var_accessories_13_qty"]                   = self.var_accessories_13_qty.get()
        entry_dict["self.selected_accessories_14"]                  = self.selected_accessories_14.get()
        entry_dict["self.var_accessories_14_qty"]                   = self.var_accessories_14_qty.get()
        entry_dict["self.selected_accessories_15"]                  = self.selected_accessories_15.get()
        entry_dict["self.var_accessories_15_qty"]                   = self.var_accessories_15_qty.get()
        entry_dict["self.selected_accessories_16"]                  = self.selected_accessories_16.get()
        entry_dict["self.var_accessories_16_qty"]                   = self.var_accessories_16_qty.get()
        entry_dict["self.selected_accessories_17"]                  = self.selected_accessories_17.get()
        entry_dict["self.var_accessories_17_qty"]                   = self.var_accessories_17_qty.get()
        entry_dict["self.selected_accessories_18"]                  = self.selected_accessories_18.get()
        entry_dict["self.var_accessories_18_qty"]                   = self.var_accessories_18_qty.get()
        entry_dict["self.selected_accessories_19"]                  = self.selected_accessories_19.get()
        entry_dict["self.var_accessories_19_qty"]                   = self.var_accessories_19_qty.get()
        entry_dict["self.selected_accessories_20"]                  = self.selected_accessories_20.get()
        entry_dict["self.var_accessories_20_qty"]                   = self.var_accessories_20_qty.get()
        entry_dict["self.selected_accessories_21"]                  = self.selected_accessories_21.get()
        entry_dict["self.var_accessories_21_qty"]                   = self.var_accessories_21_qty.get()
        entry_dict["self.selected_accessories_22"]                  = self.selected_accessories_22.get()
        entry_dict["self.var_accessories_22_qty"]                   = self.var_accessories_22_qty.get()
        entry_dict["self.selected_accessories_23"]                  = self.selected_accessories_23.get()
        entry_dict["self.var_accessories_23_qty"]                   = self.var_accessories_23_qty.get()
        entry_dict["self.selected_accessories_24"]                  = self.selected_accessories_24.get()
        entry_dict["self.var_accessories_24_qty"]                   = self.var_accessories_24_qty.get()
        entry_dict["self.selected_accessories_25"]                  = self.selected_accessories_25.get()
        entry_dict["self.var_accessories_25_qty"]                   = self.var_accessories_25_qty.get()
        entry_dict["self.selected_accessories_26"]                  = self.selected_accessories_26.get()
        entry_dict["self.var_accessories_26_qty"]                   = self.var_accessories_26_qty.get()
        entry_dict["self.selected_accessories_27"]                  = self.selected_accessories_27.get()
        entry_dict["self.var_accessories_27_qty"]                   = self.var_accessories_27_qty.get()
        entry_dict["self.selected_accessories_28"]                  = self.selected_accessories_28.get()
        entry_dict["self.var_accessories_28_qty"]                   = self.var_accessories_28_qty.get()
        entry_dict["self.selected_accessories_29"]                  = self.selected_accessories_29.get()
        entry_dict["self.var_accessories_29_qty"]                   = self.var_accessories_29_qty.get()
        entry_dict["self.selected_accessories_30"]                  = self.selected_accessories_30.get()
        entry_dict["self.var_accessories_30_qty"]                   = self.var_accessories_30_qty.get()
        entry_dict["self.selected_component_armor_1"]               = self.selected_component_armor_1.get()
        entry_dict["self.selected_component_armor_facing_1"]        = self.selected_component_armor_facing_1.get()
        entry_dict["self.var_component_armor_spaces_qty_1"]         = self.var_component_armor_spaces_qty_1.get()
        entry_dict["self.var_component_armor_count_qty_1"]          = self.var_component_armor_count_qty_1.get()
        entry_dict["self.selected_component_armor_2"]               = self.selected_component_armor_2.get()
        entry_dict["self.selected_component_armor_facing_2"]        = self.selected_component_armor_facing_2.get()
        entry_dict["self.var_component_armor_spaces_qty_2"]         = self.var_component_armor_spaces_qty_2.get()
        entry_dict["self.var_component_armor_count_qty_2"]          = self.var_component_armor_count_qty_2.get()
        entry_dict["self.selected_component_armor_3"]               = self.selected_component_armor_3.get()
        entry_dict["self.selected_component_armor_facing_3"]        = self.selected_component_armor_facing_3.get()
        entry_dict["self.var_component_armor_spaces_qty_3"]         = self.var_component_armor_spaces_qty_3.get()
        entry_dict["self.var_component_armor_count_qty_3"]          = self.var_component_armor_count_qty_3.get()
        entry_dict["self.selected_component_armor_4"]               = self.selected_component_armor_4.get()
        entry_dict["self.selected_component_armor_facing_4"]        = self.selected_component_armor_facing_4.get()
        entry_dict["self.var_component_armor_spaces_qty_4"]         = self.var_component_armor_spaces_qty_4.get()
        entry_dict["self.var_component_armor_count_qty_4"]          = self.var_component_armor_count_qty_4.get()
        entry_dict["self.selected_component_armor_5"]               = self.selected_component_armor_5.get()
        entry_dict["self.selected_component_armor_facing_5"]        = self.selected_component_armor_facing_5.get()
        entry_dict["self.var_component_armor_spaces_qty_5"]         = self.var_component_armor_spaces_qty_5.get()
        entry_dict["self.var_component_armor_count_qty_5"]          = self.var_component_armor_count_qty_5.get()
        entry_dict["self.var_rocket_booster_pounds_qty_1"]          = self.var_rocket_booster_pounds_qty_1.get()
        entry_dict["self.selected_rocket_booster_facing_1"]         = self.selected_rocket_booster_facing_1.get()
        entry_dict["self.var_rocket_booster_pounds_qty_2"]          = self.var_rocket_booster_pounds_qty_2.get()
        entry_dict["self.selected_rocket_booster_facing_2"]         = self.selected_rocket_booster_facing_2.get()
        entry_dict["self.var_rocket_booster_pounds_qty_3"]          = self.var_rocket_booster_pounds_qty_3.get()
        entry_dict["self.selected_rocket_booster_facing_3"]         = self.selected_rocket_booster_facing_3.get()
        entry_dict["self.var_rocket_booster_pounds_qty_4"]          = self.var_rocket_booster_pounds_qty_4.get()
        entry_dict["self.selected_rocket_booster_facing_4"]         = self.selected_rocket_booster_facing_4.get()
        entry_dict["self.var_rocket_booster_pounds_qty_5"]          = self.var_rocket_booster_pounds_qty_5.get()
        entry_dict["self.selected_rocket_booster_facing_5"]         = self.selected_rocket_booster_facing_5.get()
        entry_dict["self.selected_personal_equipment_1"]            = self.selected_personal_equipment_1.get()
        entry_dict["self.var_personal_equipment_1_qty"]             = self.var_personal_equipment_1_qty.get()
        entry_dict["self.selected_personal_equipment_2"]            = self.selected_personal_equipment_2.get()
        entry_dict["self.var_personal_equipment_2_qty"]             = self.var_personal_equipment_2_qty.get()
        entry_dict["self.selected_personal_equipment_3"]            = self.selected_personal_equipment_3.get()
        entry_dict["self.var_personal_equipment_3_qty"]             = self.var_personal_equipment_3_qty.get()
        entry_dict["self.selected_personal_equipment_4"]            = self.selected_personal_equipment_4.get()
        entry_dict["self.var_personal_equipment_4_qty"]             = self.var_personal_equipment_4_qty.get()
        entry_dict["self.selected_personal_equipment_5"]            = self.selected_personal_equipment_5.get()
        entry_dict["self.var_personal_equipment_5_qty"]             = self.var_personal_equipment_5_qty.get()
        entry_dict["self.selected_personal_equipment_6"]            = self.selected_personal_equipment_6.get()
        entry_dict["self.var_personal_equipment_6_qty"]             = self.var_personal_equipment_6_qty.get()
        entry_dict["self.selected_personal_equipment_7"]            = self.selected_personal_equipment_7 .get()
        entry_dict["self.var_personal_equipment_7_qty"]             = self.var_personal_equipment_7_qty.get()
        entry_dict["self.selected_personal_equipment_8"]            = self.selected_personal_equipment_8.get()
        entry_dict["self.var_personal_equipment_8_qty"]             = self.var_personal_equipment_8_qty.get()
        entry_dict["self.selected_personal_equipment_9"]            = self.selected_personal_equipment_9.get()
        entry_dict["self.var_personal_equipment_9_qty"]             = self.var_personal_equipment_9_qty.get()
        entry_dict["self.selected_personal_equipment_10"]           = self.selected_personal_equipment_10 .get()
        entry_dict["self.var_personal_equipment_10_qty"]            = self.var_personal_equipment_10_qty.get()
        entry_dict["self.var_six_wheel_chassis"]                    = self.var_six_wheel_chassis.get()
        entry_dict["self.var_sloped_armor"]                         = self.var_sloped_armor.get()
        entry_dict["self.var_outer_front_armor_allocation_qty"]     = self.var_outer_front_armor_allocation_qty.get()
        entry_dict["self.var_outer_back_armor_allocation_qty"]      = self.var_outer_back_armor_allocation_qty.get()
        entry_dict["self.var_outer_left_armor_allocation_qty"]      = self.var_outer_left_armor_allocation_qty.get()
        entry_dict["self.var_outer_right_armor_allocation_qty"]     = self.var_outer_right_armor_allocation_qty.get()
        entry_dict["self.var_outer_top_armor_allocation_qty"]       = self.var_outer_top_armor_allocation_qty.get()
        entry_dict["self.var_outer_underbody_armor_allocation_qty"] = self.var_outer_underbody_armor_allocation_qty.get()
        entry_dict["self.var_inner_front_armor_allocation_qty"]     = self.var_inner_front_armor_allocation_qty.get()
        entry_dict["self.var_inner_back_armor_allocation_qty"]      = self.var_inner_back_armor_allocation_qty.get()
        entry_dict["self.var_inner_left_armor_allocation_qty"]      = self.var_inner_left_armor_allocation_qty.get()
        entry_dict["self.var_inner_right_armor_allocation_qty"]     = self.var_inner_right_armor_allocation_qty.get()
        entry_dict["self.var_inner_top_armor_allocation_qty"]       = self.var_inner_top_armor_allocation_qty.get()
        entry_dict["self.var_inner_underbody_armor_allocation_qty"] = self.var_inner_underbody_armor_allocation_qty.get()
        file_output_list.append(entry_dict)
        with open(self.current_file_path, "w", encoding="UTF-8") as output_file:
            output_file.write(str(file_output_list))        

    def add_labels_canvas(self, canvas_type):
        tk.Label(canvas_type, text="Python Car Wars Designer", anchor="w").grid(row = self.grid_row_form_total, column = self.grid_col_item, sticky="w")
        tk.Label(canvas_type, text="Total:", anchor="w").grid(row = self.grid_row_form_total, column = self.grid_col_qty, sticky="w", columnspan=3)
        self.label_total_cost          = tk.Label(canvas_type, text="0", anchor="w")
        self.label_total_cost.grid(row=self.grid_row_form_header, column=self.grid_col_cost, sticky="w")
        self.label_total_weight        = tk.Label(canvas_type, text="0", anchor="w")
        self.label_total_weight.grid(row=self.grid_row_form_header, column=self.grid_col_weight, sticky="w")
        self.label_total_space         = tk.Label(canvas_type, text="0", anchor="w")
        self.label_total_space.grid(row=self.grid_row_form_header, column=self.grid_col_spaces, sticky="w")
        self.label_max_weight          = tk.Label(canvas_type, text="0", anchor="w")
        self.label_max_weight.grid(row=self.grid_row_form_header, column=self.grid_col_max_weight, sticky="w")
        self.label_total_power_factors = tk.Label(canvas_type, text="0", anchor="w")
        self.label_total_power_factors.grid(row=self.grid_row_form_header, column=self.grid_col_power_factors, sticky="w")
        self.label_final_engine_mpg    = tk.Label(canvas_type, text="0", anchor="w")
        self.label_final_engine_mpg.grid(row=self.grid_row_form_header, column=self.grid_col_base_mpg, sticky="w")

        tk.Label(canvas_type, text="Item",                                 anchor="w").grid(column=self.grid_col_item,                 row=self.grid_row_form_header,               sticky="w")
        tk.Label(canvas_type, text="Qty",                                  anchor="w").grid(column=self.grid_col_qty,                  row=self.grid_row_form_header,               sticky="w")
        tk.Label(canvas_type, text="Cost",                                 anchor="w").grid(column=self.grid_col_cost,                 row=self.grid_row_form_total,                sticky="w")
        tk.Label(canvas_type, text="Weight",                               anchor="w").grid(column=self.grid_col_weight,               row=self.grid_row_form_total,                sticky="w")
        tk.Label(canvas_type, text="Spaces",                               anchor="w").grid(column=self.grid_col_spaces,               row=self.grid_row_form_total,                sticky="w")
        tk.Label(canvas_type, text="DP",                                   anchor="w").grid(column=self.grid_col_dp,                   row=self.grid_row_form_total,                sticky="w")
        tk.Label(canvas_type, text="Max Weight: ",                         anchor="w").grid(column=self.grid_col_max_weight,           row=self.grid_row_form_total,                sticky="w")
        tk.Label(canvas_type, text="Power Factors",                        anchor="w").grid(column=self.grid_col_power_factors,        row=self.grid_row_form_total,                sticky="w")
        tk.Label(canvas_type, text="Base MPG",                             anchor="w").grid(column=self.grid_col_base_mpg,             row=self.grid_row_form_total,                sticky="w")
        tk.Label(canvas_type, text="Range",                                anchor="w").grid(column=self.grid_col_base_mpg,             row=self.grid_row_body_modification,         sticky="w")
        tk.Label(canvas_type, text="Test Track",                           anchor="w").grid(column=self.grid_col_test_track,           row=self.grid_row_form_total,                sticky="w")
        tk.Label(canvas_type, text="Top Speed",                            anchor="w").grid(column=self.grid_col_test_track,           row=self.grid_row_form_header,               sticky="w")
        tk.Label(canvas_type, text="Acceleration",                         anchor="w").grid(column=self.grid_col_test_track,           row=self.grid_row_body,                      sticky="w")
        tk.Label(canvas_type, text="HC",                                   anchor="w").grid(column=self.grid_col_test_track,           row=self.grid_row_body_modification,         sticky="w")
        tk.Label(canvas_type, text="Fully Loaded",                         anchor="w").grid(column=self.grid_col_test_track,           row=self.grid_row_chassis,                   sticky="w")
        tk.Label(canvas_type, text="Top Speed",                            anchor="w").grid(column=self.grid_col_test_track,           row=self.grid_row_suspension,                sticky="w")
        tk.Label(canvas_type, text="Acceleration",                         anchor="w").grid(column=self.grid_col_test_track,           row=self.grid_row_engine,                    sticky="w")
        tk.Label(canvas_type, text="HC",                                   anchor="w").grid(column=self.grid_col_test_track,           row=self.grid_row_engine_mods_header,        sticky="w")
        tk.Label(canvas_type, text="Crew",                                 anchor="w").grid(column=self.grid_col_item,                 row=self.grid_row_crew_header,               sticky="w")
        tk.Label(canvas_type, text="Crew: Driver/Gunners   :  Passengers", anchor="w").grid(column=self.grid_col_item,                 row=self.grid_row_crew_header,               sticky="w")
        tk.Label(canvas_type, text="Accessories",                          anchor="w").grid(column=self.grid_col_item,                 row=self.grid_row_accessories_header,        sticky="w")
        tk.Label(canvas_type, text="Notes",                                anchor="w").grid(column=self.grid_col_power_factors,        row=self.grid_row_accessories_header,        sticky="w")
        tk.Label(canvas_type, text="Component Armor",                      anchor="w").grid(column=self.grid_col_item,                 row=self.grid_row_component_header,          sticky="w")
        tk.Label(canvas_type, text="Spaces",                               anchor="w").grid(column=self.grid_col_qty,                  row=self.grid_row_component_header,          sticky="w", columnspan=3)
        tk.Label(canvas_type, text="Pts",                                  anchor="w").grid(column=self.grid_right_qty,                row=self.grid_row_component_header,          sticky="w")
        tk.Label(canvas_type, text="Armor Location",                       anchor="w").grid(column=self.grid_col_max_weight,           row=self.grid_row_component_header,          sticky="w")
        tk.Label(canvas_type, text="Rocker Boosters",                      anchor="w").grid(column=self.grid_col_item,                 row=self.grid_row_rocket_booster_header,     sticky="w")
        tk.Label(canvas_type, text="Lbs",                                  anchor="w").grid(column=self.grid_col_qty,                  row=self.grid_row_rocket_booster_header,     sticky="w")
        tk.Label(canvas_type, text="Facing",                               anchor="w").grid(column=self.grid_col_max_weight,           row=self.grid_row_rocket_booster_header,     sticky="w")
        tk.Label(canvas_type, text="Thrust MPH",                           anchor="w").grid(column=self.grid_col_power_factors,        row=self.grid_row_rocket_booster_header,     sticky="w")
        tk.Label(canvas_type, text="Unassigned:",                          anchor="w").grid(column=self.grid_col_dp,                   row=self.grid_row_crew_header,               sticky="w")
        tk.Label(canvas_type, text="Front:",                               anchor="w").grid(column=self.grid_col_max_weight,           row=self.grid_row_crew_header,               sticky="w")
        tk.Label(canvas_type, text="Back:",                                anchor="w").grid(column=self.grid_col_power_factors,        row=self.grid_row_crew_header,               sticky="w")
        tk.Label(canvas_type, text="Left:",                                anchor="w").grid(column=self.grid_col_base_mpg,             row=self.grid_row_crew_header,               sticky="w")
        tk.Label(canvas_type, text="Right:",                               anchor="w").grid(column=self.grid_col_test_track,           row=self.grid_row_crew_header,               sticky="w")
        tk.Label(canvas_type, text="Top:",                                 anchor="w").grid(column=self.grid_col_test_track_numbers,   row=self.grid_row_crew_header,               sticky="w")
        tk.Label(canvas_type, text="Underbody:",                           anchor="w").grid(column=self.grid_col_last_column,          row=self.grid_row_crew_header,               sticky="w")
        tk.Label(canvas_type, text="Personal Equipment",                   anchor="w").grid(column=self.grid_col_item,                 row=self.grid_row_personal_equipment_header, sticky="w")
        tk.Label(canvas_type, text="Qty",                                  anchor="w").grid(column=self.grid_col_qty,                  row=self.grid_row_personal_equipment_header, sticky="w")
        tk.Label(canvas_type, text="Cost",                                 anchor="w").grid(column=self.grid_col_cost,                 row=self.grid_row_personal_equipment_header, sticky="w")
        tk.Label(canvas_type, text="Weight",                               anchor="w").grid(column=self.grid_col_weight,               row=self.grid_row_personal_equipment_header, sticky="w")
        tk.Label(canvas_type, text="GE",                                   anchor="w").grid(column=self.grid_col_spaces,               row=self.grid_row_personal_equipment_header, sticky="w")
        tk.Label(canvas_type, text="To-Hit",                               anchor="w").grid(column=self.grid_col_dp,                   row=self.grid_row_personal_equipment_header, sticky="w")
        tk.Label(canvas_type, text="Damage",                               anchor="w").grid(column=self.grid_col_max_weight,           row=self.grid_row_personal_equipment_header, sticky="w")
        tk.Label(canvas_type, text="Shots",                                anchor="w").grid(column=self.grid_col_power_factors,        row=self.grid_row_personal_equipment_header, sticky="w")
        tk.Label(canvas_type, text="CPS",                                  anchor="w").grid(column=self.grid_col_base_mpg,             row=self.grid_row_personal_equipment_header, sticky="w")
        tk.Label(canvas_type, text="WPS",                                  anchor="w").grid(column=self.grid_col_test_track,           row=self.grid_row_personal_equipment_header, sticky="w")
        tk.Label(canvas_type, text="Notes",                                anchor="w").grid(column=self.grid_col_test_track_numbers,   row=self.grid_row_personal_equipment_header, sticky="w")
        tk.Label(canvas_type, text="Design Validity",                      anchor="w").grid(column=self.grid_col_last_column,          row=self.grid_row_form_total,                sticky="w")

        self.label_body_selected = tk.Label(canvas_type, text="0", anchor="w")
        self.label_body_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_body_cost.grid(column=self.grid_col_cost, row=self.grid_row_body, sticky="w")
        self.label_body_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_body_weight.grid(column=self.grid_col_weight , row=self.grid_row_body, sticky="w")
        self.label_body_spaces = tk.Label(canvas_type, text="0", anchor="w")
        self.label_body_spaces.grid(column=self.grid_col_spaces, row=self.grid_row_body, sticky="w")

        self.label_body_max_weight = tk.Label(canvas_type, text="0", anchor="w")
        #self.label_body_max_weight.grid(column=self.grid_col_dp, row=self.grid_row_form_total, sticky="w")
        self.hidden_body_cycle = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_body_armor_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_body_armor_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_body_hc = tk.Label(canvas_type, text="0", anchor="w")

        self.label_modificiation_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_modificiation_cost.grid(column=self.grid_col_cost,row=self.grid_row_body_modification, sticky="w")
        self.label_modificiation_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_modificiation_weight.grid(column=self.grid_col_weight ,row=self.grid_row_body_modification, sticky="w")
        self.label_modificiation_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_modificiation_space.grid(column=self.grid_col_spaces,row=self.grid_row_body_modification, sticky="w")

        self.var_six_wheel_chassis = tk.IntVar()
        self.check_six_wheel_chassis = tk.Checkbutton(canvas_type, text="Six Wheel Chassis", variable=self.var_six_wheel_chassis, command=self.var_six_wheel_chassis_changed, anchor="w")
        self.check_six_wheel_chassis.grid(column=self.grid_col_qty,row=self.grid_row_chassis, sticky="w", columnspan=6)

        self.var_sloped_armor = tk.IntVar()
        self.check_sloped_armor = tk.Checkbutton(canvas_type, text="Sloped Armor", variable=self.var_sloped_armor, command=self.var_sloped_armor_changed, anchor="w")
        self.check_sloped_armor.grid(column=self.grid_col_item,row=self.grid_row_sloped_armor, sticky="w")

        self.label_chassis_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_chassis_cost.grid(column=self.grid_col_cost, row=self.grid_row_chassis, sticky="w")

        self.label_suspension_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_suspension_cost.grid(column=self.grid_col_cost, row=self.grid_row_suspension, sticky="w")

        self.label_engine_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_engine_cost.grid(column=self.grid_col_cost,row=self.grid_row_engine, sticky="w")
        self.label_engine_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_engine_weight.grid(column=self.grid_col_weight ,row=self.grid_row_engine, sticky="w")
        self.label_engine_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_engine_space.grid(column=self.grid_col_spaces,row=self.grid_row_engine, sticky="w")
        self.label_engine_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_engine_dp.grid(column=self.grid_col_dp,row=self.grid_row_engine, sticky="w")
        self.label_engine_pf = tk.Label(canvas_type, text="0", anchor="w")
        self.label_engine_pf.grid(column=self.grid_col_power_factors,row=self.grid_row_engine, sticky="w")
        self.label_engine_mpg = tk.Label(canvas_type, text="0", anchor="w")
        self.label_engine_mpg.grid(column=self.grid_col_base_mpg,row=self.grid_row_engine, sticky="w")
        self.label_engine_type = tk.Label(canvas_type, text="0", anchor="w")
        self.label_range = tk.Label(canvas_type, text="0", anchor="w")
        self.label_range.grid(column=self.grid_col_base_mpg, row=self.grid_row_chassis, sticky="w")
        self.label_top_speed = tk.Label(canvas_type, text="0", anchor="w")
        self.label_top_speed.grid(column=self.grid_col_test_track_numbers, row=self.grid_row_form_header, sticky="w")
        self.label_accel = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accel.grid(column=self.grid_col_test_track_numbers, row=self.grid_row_body, sticky="w")
        self.label_hc = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hc.grid(column=self.grid_col_test_track_numbers, row=self.grid_row_body_modification, sticky="w")
        self.label_max_weight_top_speed = tk.Label(canvas_type, text="0", anchor="w")
        self.label_max_weight_top_speed.grid(column=self.grid_col_test_track_numbers, row=self.grid_row_suspension, sticky="w")
        self.label_max_accel = tk.Label(canvas_type, text="0", anchor="w")
        self.label_max_accel.grid(column=self.grid_col_test_track_numbers, row=self.grid_row_engine, sticky="w")
        self.label_max_hc = tk.Label(canvas_type, text="0", anchor="w")
        self.label_max_hc.grid(column=self.grid_col_test_track_numbers, row=self.grid_row_engine_mods_header, sticky="w")

        tk.Label(canvas_type, text="Engine Modifications", anchor="w").grid(column=self.grid_col_item, row=self.grid_row_engine_mods_header, sticky="w") # Place the label in the window

        self.label_gas_header = tk.Label(canvas_type, text="Gas", anchor="w")
        self.label_gas_header.grid(column=self.grid_col_item, row=self.grid_row_gas_engine_mods, sticky="w") # Place the label in the window

        self.var_engine_gas_super_charger = tk.IntVar()
        self.check_engine_gas_super_charger = tk.Checkbutton(canvas_type, text="Super Charger", variable=self.var_engine_gas_super_charger, command=self.var_engine_gas_super_charger_changed, anchor="w")
        self.check_engine_gas_super_charger.grid(column=self.grid_col_power_factors,row=self.grid_row_gas_engine_mods, sticky="w")
        self.check_engine_gas_super_charger.config(state="disabled")

        self.var_engine_gas_vp_turbo = tk.IntVar()
        self.check_engine_gas_vp_turbo = tk.Checkbutton(canvas_type, text="VP Turbo", variable=self.var_engine_gas_vp_turbo, command=self.var_engine_gas_vp_turbo_changed, anchor="w")
        self.check_engine_gas_vp_turbo.grid(column=self.grid_col_base_mpg,row=self.grid_row_gas_engine_mods, sticky="w")
        self.check_engine_gas_vp_turbo.config(state="disabled")

        self.var_engine_gas_tube_headers = tk.IntVar()
        self.check_engine_gas_tube_headers = tk.Checkbutton(canvas_type, text="Tube Headers", variable=self.var_engine_gas_tube_headers, command=self.var_engine_gas_tube_headers_changed, anchor="w")
        self.check_engine_gas_tube_headers.grid(column=self.grid_col_test_track,row=self.grid_row_gas_engine_mods, sticky="w")
        self.check_engine_gas_tube_headers.config(state="disabled")

        self.var_engine_gas_blue_print = tk.IntVar()
        self.check_engine_gas_blue_print = tk.Checkbutton(canvas_type, text="Blue Print", variable=self.var_engine_gas_blue_print, command=self.var_engine_gas_blue_print_changed, anchor="w")
        self.check_engine_gas_blue_print.grid(column=self.grid_col_test_track_numbers,row=self.grid_row_gas_engine_mods, sticky="w")
        self.check_engine_gas_blue_print.config(state="disabled")

        self.var_engine_gas_turbo = tk.IntVar()
        self.check_engine_gas_turbo = tk.Checkbutton(canvas_type, text="Turbo", variable=self.var_engine_gas_turbo, command=self.var_engine_gas_turbo_changed, anchor="w")
        self.check_engine_gas_turbo.grid(column=self.grid_col_last_column,row=self.grid_row_gas_engine_mods, sticky="w")
        self.check_engine_gas_turbo.config(state="disabled")

        self.label_electric_header = tk.Label(canvas_type, text="Electric")
        self.label_electric_header.grid(column=self.grid_col_item, row=self.grid_row_electric_mods, sticky="w")

        self.var_engine_electric_super_conductors = tk.IntVar()
        self.check_engine_electric_super_conductors = tk.Checkbutton(canvas_type, text="Super Conductors", variable=self.var_engine_electric_super_conductors, command=self.recalculate, anchor="w")
        self.check_engine_electric_super_conductors.grid(column=self.grid_col_power_factors,row=self.grid_row_electric_mods, sticky="w")
        self.check_engine_electric_super_conductors.config(state="disabled")

        self.var_engine_electric_platnium_catalysts = tk.IntVar()
        self.check_engine_electric_platnium_catalysts = tk.Checkbutton(canvas_type, text="Platnium Catalysts", variable=self.var_engine_electric_platnium_catalysts, command=self.recalculate, anchor="w")
        self.check_engine_electric_platnium_catalysts.grid(column=self.grid_col_base_mpg,row=self.grid_row_electric_mods, sticky="w")
        self.check_engine_electric_platnium_catalysts.config(state="disabled")

        self.var_engine_electric_extra_power_cells = tk.IntVar()
        self.check_engine_electric_extra_power_cells = tk.Checkbutton(canvas_type, text="Extra Power Cells", variable=self.var_engine_electric_extra_power_cells, command=self.recalculate, anchor="w")
        self.check_engine_electric_extra_power_cells.grid(column=self.grid_col_test_track,row=self.grid_row_electric_mods, sticky="w")
        self.check_engine_electric_extra_power_cells.config(state="disabled")

        self.label_engine_mod_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_engine_mod_cost.grid(column=self.grid_col_cost,row=self.grid_row_engine_mods_header, sticky="w")
        self.label_engine_mod_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_engine_mod_weight.grid(column=self.grid_col_weight ,row=self.grid_row_engine_mods_header, sticky="w")
        self.label_engine_mod_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_engine_mod_space.grid(column=self.grid_col_spaces,row=self.grid_row_engine_mods_header, sticky="w")
        self.label_engine_mod_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_engine_mod_dp.grid(column=self.grid_col_dp,row=self.grid_row_engine_mods_header, sticky="w")
        self.label_engine_mod_pf = tk.Label(canvas_type, text="0", anchor="w")
        self.label_engine_mod_pf.grid(column=self.grid_col_power_factors,row=self.grid_row_engine_mods_header, sticky="w")
        self.label_engine_mod_mpg = tk.Label(canvas_type, text="0", anchor="w")
        self.label_engine_mod_mpg.grid(column=self.grid_col_base_mpg,row=self.grid_row_engine_mods_header, sticky="w")

        self.label_hidden_gas_tank_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_gas_tank_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_gas_tank_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_gas_tank_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_gas_tank_cost.grid(column=self.grid_col_cost,row=self.grid_row_gas_tank, sticky="w")
        self.label_gas_tank_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_gas_tank_weight.grid(column=self.grid_col_weight ,row=self.grid_row_gas_tank, sticky="w")
        self.label_gas_tank_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_gas_tank_space.grid(column=self.grid_col_spaces,row=self.grid_row_gas_tank, sticky="w")
        self.label_gas_tank_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_gas_tank_dp.grid(column=self.grid_col_dp,row=self.grid_row_gas_tank, sticky="w")

        self.var_gas_gallon_qty = tk.IntVar()
        self.entry_gas_gallon_qty = ttk.Entry(canvas_type, textvariable=self.var_gas_gallon_qty, width=3)
        self.entry_gas_gallon_qty.grid(column=self.grid_col_qty,row=self.grid_row_gas_tank, sticky="w")
        self.var_gas_gallon_qty.trace_add("write", self.on_changed_entry_gas_gallon_qty)
        self.var_front_tire_qty = tk.IntVar()
        self.entry_front_tire_qty = ttk.Entry(canvas_type, textvariable=self.var_front_tire_qty, width=3)
        self.entry_front_tire_qty.grid(column=self.grid_col_qty,row=self.grid_row_front_tire, sticky="w")
        self.var_front_tire_qty.trace_add("write", self.on_changed_front_tire_qty)
        self.var_rear_tire_qty = tk.IntVar()
        self.entry_rear_tire_qty = ttk.Entry(canvas_type, textvariable=self.var_rear_tire_qty, width=3)
        self.entry_rear_tire_qty.grid(column=self.grid_col_qty,row=self.grid_row_rear_tire, sticky="w")
        self.var_rear_tire_qty.trace_add("write", self.on_changed_rear_tire_qty)
        self.var_driver_gunner_qty = tk.IntVar()
        self.entry_driver_gunner_qty = ttk.Entry(canvas_type, textvariable=self.var_driver_gunner_qty, width=3)
        self.entry_driver_gunner_qty.grid(column=self.grid_col_qty,row=self.grid_row_crew_header, sticky="w")
        self.var_driver_gunner_qty.trace_add("write", self.on_changed_driver_gunner_qty)
        self.var_passenger_qty = tk.IntVar()
        self.entry_passenger_qty = ttk.Entry(canvas_type, textvariable=self.var_passenger_qty, width=3)
        self.entry_passenger_qty.grid(column=self.grid_right_qty,row=self.grid_row_crew_header, sticky="w")
        self.var_passenger_qty.trace_add("write", self.on_changed_driver_gunner_qty)
        self.var_outer_armor_qty = tk.IntVar()
        self.entry_outer_armor_qty = ttk.Entry(canvas_type, textvariable=self.var_outer_armor_qty, width=3)
        self.entry_outer_armor_qty.grid(column=self.grid_col_qty,row=self.grid_row_outer_armor, sticky="w")
        self.var_outer_armor_qty.trace_add("write", self.on_changed_outer_armor_qty)
        self.var_inner_armor_qty = tk.IntVar()
        self.entry_inner_armor_qty = ttk.Entry(canvas_type, textvariable=self.var_inner_armor_qty, width=3)
        self.entry_inner_armor_qty.grid(column=self.grid_col_qty,row=self.grid_row_inner_armor, sticky="w")
        self.var_inner_armor_qty.trace_add("write", self.on_changed_inner_armor_qty)

        self.label_hidden_front_tire_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_front_tire_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_front_tire_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_front_tire_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_front_tire_cost.grid(column=self.grid_col_cost,row=self.grid_row_front_tire, sticky="w")
        self.label_front_tire_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_front_tire_weight.grid(column=self.grid_col_weight ,row=self.grid_row_front_tire, sticky="w")
        self.label_front_tire_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_front_tire_dp.grid(column=self.grid_col_dp,row=self.grid_row_front_tire, sticky="w")

        self.var_front_tire_steelbelting = tk.IntVar()
        self.check_front_tire_steelbelting = tk.Checkbutton(canvas_type, text="Steelbelting", variable=self.var_front_tire_steelbelting, command=self.var_front_tire_steelbelting_changed, anchor="w")
        self.check_front_tire_steelbelting.grid(column=self.grid_col_max_weight,row=self.grid_row_front_tire, sticky="w")

        self.var_front_tire_radial = tk.IntVar()
        self.check_front_tire_radial = tk.Checkbutton(canvas_type, text="Radial", variable=self.var_front_tire_radial, command=self.var_front_tire_radial_changed, anchor="w")
        self.check_front_tire_radial.grid(column=self.grid_col_power_factors,row=self.grid_row_front_tire, sticky="w")

        self.var_front_tire_fireproof = tk.IntVar()
        self.check_front_tire_fireproof = tk.Checkbutton(canvas_type, text="Fireproof", variable=self.var_front_tire_fireproof, command=self.var_front_tire_fireproof_changed, anchor="w")
        self.check_front_tire_fireproof.grid(column=self.grid_col_base_mpg,row=self.grid_row_front_tire, sticky="w")

        self.var_front_tire_offroad = tk.IntVar()
        self.check_front_tire_offroad = tk.Checkbutton(canvas_type, text="OffRoad", variable=self.var_front_tire_offroad, command=self.var_front_tire_offroad_changed, anchor="w")
        self.check_front_tire_offroad.grid(column=self.grid_col_test_track,row=self.grid_row_front_tire, sticky="w")

        self.var_front_tire_racing_slick = tk.IntVar()
        self.check_front_tire_racing_slick = tk.Checkbutton(canvas_type, text="Racing Slicks", variable=self.var_front_tire_racing_slick, command=self.var_front_tire_racing_slick_changed, anchor="w")
        self.check_front_tire_racing_slick.grid(column=self.grid_col_test_track_numbers,row=self.grid_row_front_tire, sticky="w")

        self.label_hidden_rear_tire_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_rear_tire_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_rear_tire_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_rear_tire_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_rear_tire_cost.grid(column=self.grid_col_cost,row=self.grid_row_rear_tire, sticky="w")
        self.label_rear_tire_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_rear_tire_weight.grid(column=self.grid_col_weight ,row=self.grid_row_rear_tire, sticky="w")
        self.label_rear_tire_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_rear_tire_dp.grid(column=self.grid_col_dp,row=self.grid_row_rear_tire, sticky="w")

        self.var_rear_tire_steelbelting = tk.IntVar()
        self.check_rear_tire_steelbelting = tk.Checkbutton(canvas_type, text="Steelbelting", variable=self.var_rear_tire_steelbelting, command=self.var_rear_tire_steelbelting_changed, anchor="w")
        self.check_rear_tire_steelbelting.grid(column=self.grid_col_max_weight,row=self.grid_row_rear_tire, sticky="w")

        self.var_rear_tire_radial = tk.IntVar()
        self.check_rear_tire_radial = tk.Checkbutton(canvas_type, text="Radial", variable=self.var_rear_tire_radial, command=self.var_rear_tire_radial_changed, anchor="w")
        self.check_rear_tire_radial.grid(column=self.grid_col_power_factors,row=self.grid_row_rear_tire, sticky="w")

        self.var_rear_tire_fireproof = tk.IntVar()
        self.check_rear_tire_fireproof = tk.Checkbutton(canvas_type, text="Fireproof", variable=self.var_rear_tire_fireproof, command=self.var_rear_tire_fireproof_changed, anchor="w")
        self.check_rear_tire_fireproof.grid(column=self.grid_col_base_mpg,row=self.grid_row_rear_tire, sticky="w")

        self.var_rear_tire_offroad = tk.IntVar()
        self.check_rear_tire_offroad = tk.Checkbutton(canvas_type, text="OffRoad", variable=self.var_rear_tire_offroad, command=self.var_rear_tire_offroad_changed, anchor="w")
        self.check_rear_tire_offroad.grid(column=self.grid_col_test_track,row=self.grid_row_rear_tire, sticky="w")

        self.var_rear_tire_racing_slick = tk.IntVar()
        self.check_rear_tire_racing_slick = tk.Checkbutton(canvas_type, text="Racing Slicks", variable=self.var_rear_tire_racing_slick, command=self.var_rear_tire_racing_slick_changed, anchor="w")
        self.check_rear_tire_racing_slick.grid(column=self.grid_col_test_track_numbers,row=self.grid_row_rear_tire, sticky="w")

        self.label_driver_gunner_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_driver_gunner_weight.grid(column=self.grid_col_weight ,row=self.grid_row_crew_header, sticky="w")
        self.label_driver_gunner_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_driver_gunner_space.grid(column=self.grid_col_spaces,row=self.grid_row_crew_header, sticky="w")

        self.label_outer_armor_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_outer_armor_cost.grid(column=self.grid_col_cost,row=self.grid_row_outer_armor, sticky="w")
        self.label_outer_armor_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_outer_armor_weight.grid(column=self.grid_col_weight ,row=self.grid_row_outer_armor, sticky="w")
        self.label_inner_armor_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_inner_armor_cost.grid(column=self.grid_col_cost,row=self.grid_row_inner_armor, sticky="w")
        self.label_inner_armor_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_inner_armor_weight.grid(column=self.grid_col_weight ,row=self.grid_row_inner_armor, sticky="w")

        self.label_hidden_outer_armor_selection = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_outer_armor_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_outer_armor_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_inner_armor_selection = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_inner_armor_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_inner_armor_weight = tk.Label(canvas_type, text="0", anchor="w")

        self.label_outer_unassigned_armor_qty = tk.Label(canvas_type, text="0", anchor="w")
        self.label_outer_unassigned_armor_qty.grid(column=self.grid_col_dp,row=self.grid_row_outer_armor, sticky="w")

        self.label_inner_unassigned_armor_qty = tk.Label(canvas_type, text="0", anchor="w")
        self.label_inner_unassigned_armor_qty.grid(column=self.grid_col_dp,row=self.grid_row_inner_armor, sticky="w")

        self.var_outer_front_armor_allocation_qty = tk.IntVar()
        self.entry_outer_front_armor_allocation_qty = ttk.Entry(canvas_type, textvariable=self.var_outer_front_armor_allocation_qty, width=3)
        self.entry_outer_front_armor_allocation_qty.grid(column=self.grid_col_max_weight,row=self.grid_row_outer_armor, sticky="w")
        self.var_outer_front_armor_allocation_qty.trace_add("write", self.on_changed_entry_outer_armor_allocation_qty)

        self.var_outer_back_armor_allocation_qty = tk.IntVar()
        self.entry_outer_back_armor_allocation_qty = ttk.Entry(canvas_type, textvariable=self.var_outer_back_armor_allocation_qty, width=3)
        self.entry_outer_back_armor_allocation_qty.grid(column=self.grid_col_power_factors,row=self.grid_row_outer_armor, sticky="w")
        self.var_outer_back_armor_allocation_qty.trace_add("write", self.on_changed_entry_outer_armor_allocation_qty)

        self.var_outer_left_armor_allocation_qty = tk.IntVar()
        self.entry_outer_left_armor_allocation_qty = ttk.Entry(canvas_type, textvariable=self.var_outer_left_armor_allocation_qty, width=3)
        self.entry_outer_left_armor_allocation_qty.grid(column=self.grid_col_base_mpg,row=self.grid_row_outer_armor, sticky="w")
        self.var_outer_left_armor_allocation_qty.trace_add("write", self.on_changed_entry_outer_armor_allocation_qty)

        self.var_outer_right_armor_allocation_qty = tk.IntVar()
        self.entry_outer_right_armor_allocation_qty = ttk.Entry(canvas_type, textvariable=self.var_outer_right_armor_allocation_qty, width=3)
        self.entry_outer_right_armor_allocation_qty.grid(column=self.grid_col_test_track,row=self.grid_row_outer_armor, sticky="w")
        self.var_outer_right_armor_allocation_qty.trace_add("write", self.on_changed_entry_outer_armor_allocation_qty)

        self.var_outer_top_armor_allocation_qty = tk.IntVar()
        self.entry_outer_top_armor_allocation_qty = ttk.Entry(canvas_type, textvariable=self.var_outer_top_armor_allocation_qty, width=3)
        self.entry_outer_top_armor_allocation_qty.grid(column=self.grid_col_test_track_numbers,row=self.grid_row_outer_armor, sticky="w")
        self.var_outer_top_armor_allocation_qty.trace_add("write", self.on_changed_entry_outer_armor_allocation_qty)

        self.var_outer_underbody_armor_allocation_qty = tk.IntVar()
        self.entry_outer_underbody_armor_allocation_qty = ttk.Entry(canvas_type, textvariable=self.var_outer_underbody_armor_allocation_qty, width=3)
        self.entry_outer_underbody_armor_allocation_qty.grid(column=self.grid_col_last_column,row=self.grid_row_outer_armor, sticky="w")
        self.var_outer_underbody_armor_allocation_qty.trace_add("write", self.on_changed_entry_outer_armor_allocation_qty)

        self.var_inner_front_armor_allocation_qty = tk.IntVar()
        self.entry_inner_front_armor_allocation_qty = ttk.Entry(canvas_type, textvariable=self.var_inner_front_armor_allocation_qty, width=3)
        self.entry_inner_front_armor_allocation_qty.grid(column=self.grid_col_max_weight,row=self.grid_row_inner_armor, sticky="w")
        self.var_inner_front_armor_allocation_qty.trace_add("write", self.on_changed_entry_inner_armor_allocation_qty)

        self.var_inner_back_armor_allocation_qty = tk.IntVar()
        self.entry_inner_back_armor_allocation_qty = ttk.Entry(canvas_type, textvariable=self.var_inner_back_armor_allocation_qty, width=3)
        self.entry_inner_back_armor_allocation_qty.grid(column=self.grid_col_power_factors,row=self.grid_row_inner_armor, sticky="w")
        self.var_inner_back_armor_allocation_qty.trace_add("write", self.on_changed_entry_inner_armor_allocation_qty)

        self.var_inner_left_armor_allocation_qty = tk.IntVar()
        self.entry_inner_left_armor_allocation_qty = ttk.Entry(canvas_type, textvariable=self.var_inner_left_armor_allocation_qty, width=3)
        self.entry_inner_left_armor_allocation_qty.grid(column=self.grid_col_base_mpg,row=self.grid_row_inner_armor, sticky="w")
        self.var_inner_left_armor_allocation_qty.trace_add("write", self.on_changed_entry_inner_armor_allocation_qty)

        self.var_inner_right_armor_allocation_qty = tk.IntVar()
        self.entry_inner_right_armor_allocation_qty = ttk.Entry(canvas_type, textvariable=self.var_inner_right_armor_allocation_qty, width=3)
        self.entry_inner_right_armor_allocation_qty.grid(column=self.grid_col_test_track,row=self.grid_row_inner_armor, sticky="w")
        self.var_inner_right_armor_allocation_qty.trace_add("write", self.on_changed_entry_inner_armor_allocation_qty)

        self.var_inner_top_armor_allocation_qty = tk.IntVar()
        self.entry_inner_top_armor_allocation_qty = ttk.Entry(canvas_type, textvariable=self.var_inner_top_armor_allocation_qty, width=3)
        self.entry_inner_top_armor_allocation_qty.grid(column=self.grid_col_test_track_numbers,row=self.grid_row_inner_armor, sticky="w")
        self.var_inner_top_armor_allocation_qty.trace_add("write", self.on_changed_entry_inner_armor_allocation_qty)

        self.var_inner_underbody_armor_allocation_qty = tk.IntVar()
        self.entry_inner_underbody_armor_allocation_qty = ttk.Entry(canvas_type, textvariable=self.var_inner_underbody_armor_allocation_qty, width=3)
        self.entry_inner_underbody_armor_allocation_qty.grid(column=self.grid_col_last_column,row=self.grid_row_inner_armor, sticky="w")
        self.var_inner_underbody_armor_allocation_qty.trace_add("write", self.on_changed_entry_inner_armor_allocation_qty)

        self.label_hidden_front_tire_hc     = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_rear_tire_hc      = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_hc_1  = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_hc_2  = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_hc_3  = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_hc_4  = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_hc_5  = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_hc_6  = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_hc_7  = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_hc_8  = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_hc_9  = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_hc_10 = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_hc_11 = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_hc_12 = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_hc_13 = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_hc_14 = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_hc_15 = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_hc_16 = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_hc_17 = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_hc_18 = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_hc_19 = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_hc_20 = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_hc_21 = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_hc_22 = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_hc_23 = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_hc_24 = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_hc_25 = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_hc_26 = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_hc_27 = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_hc_28 = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_hc_29 = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_hc_30 = tk.Label(canvas_type, text="0", anchor="w")

        self.label_valid_spaces = tk.Label(canvas_type, text="", anchor="w")
        self.label_valid_spaces.grid(column=self.grid_col_last_column, row=self.grid_row_form_header, sticky="w")
        self.label_valid_weight = tk.Label(canvas_type, text="", anchor="w")
        self.label_valid_weight.grid(column=self.grid_col_last_column, row=self.grid_row_body, sticky="w")

    def on_changed_entry_outer_armor_allocation_qty(self, *args):
        try:
            outer_armor_qty: int                      = int(self.var_outer_armor_qty.get())
        except ValueError:
            outer_armor_qty = 0
        try:
            outer_front_armor_allocation_qty: int     = int(self.var_outer_front_armor_allocation_qty.get())
        except ValueError:
            outer_front_armor_allocation_qty = 0
        try:
            outer_back_armor_allocation_qty: int      = int(self.var_outer_back_armor_allocation_qty.get())
        except ValueError:
            outer_back_armor_allocation_qty = 0
        try:
            outer_left_armor_allocation_qty: int      = int(self.var_outer_left_armor_allocation_qty.get())
        except ValueError:
            outer_left_armor_allocation_qty = 0
        try:
            outer_right_armor_allocation_qty: int     = int(self.var_outer_right_armor_allocation_qty.get())
        except ValueError:
            outer_right_armor_allocation_qty = 0
        try:
            outer_top_armor_allocation_qty: int       = int(self.var_outer_top_armor_allocation_qty.get())
        except ValueError:
            outer_top_armor_allocation_qty = 0
        try:
            outer_underbody_armor_allocation_qty: int = int(self.var_outer_underbody_armor_allocation_qty.get())
        except ValueError:
            outer_underbody_armor_allocation_qty = 0
        outer_unassigned_armor_qty: int = outer_armor_qty - outer_front_armor_allocation_qty - outer_back_armor_allocation_qty - outer_left_armor_allocation_qty - outer_right_armor_allocation_qty - outer_top_armor_allocation_qty - outer_underbody_armor_allocation_qty
        self.label_outer_unassigned_armor_qty.configure(text=str(outer_unassigned_armor_qty))

    def on_changed_entry_inner_armor_allocation_qty(self, *args):
        inner_armor_qty: int                      = int(self.var_inner_armor_qty.get())
        inner_front_armor_allocation_qty: int     = int(self.var_inner_front_armor_allocation_qty.get())
        inner_back_armor_allocation_qty: int      = int(self.var_inner_back_armor_allocation_qty.get())
        inner_left_armor_allocation_qty: int      = int(self.var_inner_left_armor_allocation_qty.get())
        inner_right_armor_allocation_qty: int     = int(self.var_inner_right_armor_allocation_qty.get())
        inner_top_armor_allocation_qty: int       = int(self.var_inner_top_armor_allocation_qty.get())
        inner_underbody_armor_allocation_qty: int = int(self.var_inner_underbody_armor_allocation_qty.get())
        inner_unassigned_armor_qty: int = inner_armor_qty - inner_front_armor_allocation_qty - inner_back_armor_allocation_qty - inner_left_armor_allocation_qty - inner_right_armor_allocation_qty - inner_top_armor_allocation_qty - inner_underbody_armor_allocation_qty
        self.label_inner_unassigned_armor_qty.configure(text=str(inner_unassigned_armor_qty))

    def add_buttons_canvas(self, canvas_type):
        """ Add buttons for the user to select up and down values"""
        up_arrow = "\u2191"
        down_arrow = "\u2193"
        self.button_gas_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_gas_qty_up)
        self.button_gas_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_gas_tank, sticky="w")
        self.button_gas_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_gas_qty_down)
        self.button_gas_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_gas_tank, sticky="w")
        self.button_front_tire_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_front_tire_qty_up)
        self.button_front_tire_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_front_tire, sticky="w")
        self.button_front_tire_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_front_tire_qty_down)
        self.button_front_tire_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_front_tire, sticky="w")
        self.button_rear_tire_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_rear_tire_qty_up)
        self.button_rear_tire_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_rear_tire, sticky="w")
        self.button_rear_tire_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_rear_tire_qty_down)
        self.button_rear_tire_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_rear_tire, sticky="w")
        self.button_driver_gunner_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_driver_gunner_qty_up)
        self.button_driver_gunner_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_crew_header, sticky="w")
        self.button_driver_gunner_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_driver_gunner_qty_down)
        self.button_driver_gunner_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_crew_header, sticky="w")
        self.button_passenger_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_passenger_qty_up)
        self.button_passenger_qty_up.grid(column=self.grid_right_up_button,row=self.grid_row_crew_header, sticky="w")
        self.button_passenger_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_passenger_qty_down)
        self.button_passenger_qty_down.grid(column=self.grid_right_down_button,row=self.grid_row_crew_header, sticky="w")

        self.button_outer_armor_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_outer_armor_qty_up)
        self.button_outer_armor_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_outer_armor, sticky="w")
        self.button_outer_armor_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_outer_armor_qty_dowm)
        self.button_outer_armor_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_outer_armor, sticky="w")
        self.button_inner_armor_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_inner_armor_qty_up)
        self.button_inner_armor_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_inner_armor, sticky="w")
        self.button_inner_armor_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_inner_armor_qty_dowm)
        self.button_inner_armor_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_inner_armor, sticky="w")

        self.button_accessories_1_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_accessories_1_qty_up)
        self.button_accessories_1_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_accessories_1, sticky="w")
        self.button_accessories_1_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_accessories_1_qty_down)
        self.button_accessories_1_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_accessories_1, sticky="w")

        self.button_accessories_2_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_accessories_2_qty_up)
        self.button_accessories_2_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_accessories_2, sticky="w")
        self.button_accessories_2_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_accessories_2_qty_down)
        self.button_accessories_2_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_accessories_2, sticky="w")

        self.button_accessories_3_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_accessories_3_qty_up)
        self.button_accessories_3_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_accessories_3, sticky="w")
        self.button_accessories_3_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_accessories_3_qty_down)
        self.button_accessories_3_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_accessories_3, sticky="w")

        self.button_accessories_4_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_accessories_4_qty_up)
        self.button_accessories_4_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_accessories_4, sticky="w")
        self.button_accessories_4_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_accessories_4_qty_down)
        self.button_accessories_4_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_accessories_4, sticky="w")

        self.button_accessories_5_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_accessories_5_qty_up)
        self.button_accessories_5_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_accessories_5, sticky="w")
        self.button_accessories_5_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_accessories_5_qty_down)
        self.button_accessories_5_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_accessories_5, sticky="w")

        self.button_accessories_6_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_accessories_6_qty_up)
        self.button_accessories_6_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_accessories_6, sticky="w")
        self.button_accessories_6_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_accessories_6_qty_down)
        self.button_accessories_6_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_accessories_6, sticky="w")

        self.button_accessories_7_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_accessories_7_qty_up)
        self.button_accessories_7_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_accessories_7, sticky="w")
        self.button_accessories_7_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_accessories_7_qty_down)
        self.button_accessories_7_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_accessories_7, sticky="w")

        self.button_accessories_8_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_accessories_8_qty_up)
        self.button_accessories_8_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_accessories_8, sticky="w")
        self.button_accessories_8_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_accessories_8_qty_down)
        self.button_accessories_8_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_accessories_8, sticky="w")

        self.button_accessories_9_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_accessories_9_qty_up)
        self.button_accessories_9_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_accessories_9, sticky="w")
        self.button_accessories_9_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_accessories_9_qty_down)
        self.button_accessories_9_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_accessories_9, sticky="w")

        self.button_accessories_10_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_accessories_10_qty_up)
        self.button_accessories_10_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_accessories_10, sticky="w")
        self.button_accessories_10_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_accessories_10_qty_down)
        self.button_accessories_10_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_accessories_10, sticky="w")

        self.button_accessories_11_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_accessories_11_qty_up)
        self.button_accessories_11_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_accessories_11, sticky="w")
        self.button_accessories_11_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_accessories_11_qty_down)
        self.button_accessories_11_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_accessories_11, sticky="w")

        self.button_accessories_12_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_accessories_12_qty_up)
        self.button_accessories_12_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_accessories_12, sticky="w")
        self.button_accessories_12_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_accessories_12_qty_down)
        self.button_accessories_12_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_accessories_12, sticky="w")

        self.button_accessories_13_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_accessories_13_qty_up)
        self.button_accessories_13_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_accessories_13, sticky="w")
        self.button_accessories_13_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_accessories_13_qty_down)
        self.button_accessories_13_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_accessories_13, sticky="w")

        self.button_accessories_14_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_accessories_14_qty_up)
        self.button_accessories_14_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_accessories_14, sticky="w")
        self.button_accessories_14_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_accessories_14_qty_down)
        self.button_accessories_14_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_accessories_14, sticky="w")

        self.button_accessories_15_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_accessories_15_qty_up)
        self.button_accessories_15_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_accessories_15, sticky="w")
        self.button_accessories_15_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_accessories_15_qty_down)
        self.button_accessories_15_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_accessories_15, sticky="w")

        self.button_accessories_16_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_accessories_16_qty_up)
        self.button_accessories_16_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_accessories_16, sticky="w")
        self.button_accessories_16_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_accessories_16_qty_down)
        self.button_accessories_16_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_accessories_16, sticky="w")

        self.button_accessories_17_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_accessories_17_qty_up)
        self.button_accessories_17_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_accessories_17, sticky="w")
        self.button_accessories_17_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_accessories_17_qty_down)
        self.button_accessories_17_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_accessories_17, sticky="w")

        self.button_accessories_18_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_accessories_18_qty_up)
        self.button_accessories_18_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_accessories_18, sticky="w")
        self.button_accessories_18_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_accessories_18_qty_down)
        self.button_accessories_18_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_accessories_18, sticky="w")

        self.button_accessories_19_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_accessories_19_qty_up)
        self.button_accessories_19_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_accessories_19, sticky="w")
        self.button_accessories_19_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_accessories_19_qty_down)
        self.button_accessories_19_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_accessories_19, sticky="w")

        self.button_accessories_20_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_accessories_20_qty_up)
        self.button_accessories_20_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_accessories_20, sticky="w")
        self.button_accessories_20_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_accessories_20_qty_down)
        self.button_accessories_20_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_accessories_20, sticky="w")

        self.button_accessories_21_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_accessories_21_qty_up)
        self.button_accessories_21_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_accessories_21, sticky="w")
        self.button_accessories_21_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_accessories_21_qty_down)
        self.button_accessories_21_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_accessories_21, sticky="w")

        self.button_accessories_22_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_accessories_22_qty_up)
        self.button_accessories_22_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_accessories_22, sticky="w")
        self.button_accessories_22_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_accessories_22_qty_down)
        self.button_accessories_22_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_accessories_22, sticky="w")

        self.button_accessories_23_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_accessories_23_qty_up)
        self.button_accessories_23_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_accessories_23, sticky="w")
        self.button_accessories_23_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_accessories_23_qty_down)
        self.button_accessories_23_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_accessories_23, sticky="w")

        self.button_accessories_24_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_accessories_24_qty_up)
        self.button_accessories_24_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_accessories_24, sticky="w")
        self.button_accessories_24_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_accessories_24_qty_down)
        self.button_accessories_24_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_accessories_24, sticky="w")

        self.button_accessories_25_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_accessories_25_qty_up)
        self.button_accessories_25_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_accessories_25, sticky="w")
        self.button_accessories_25_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_accessories_25_qty_down)
        self.button_accessories_25_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_accessories_25, sticky="w")

        self.button_accessories_26_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_accessories_26_qty_up)
        self.button_accessories_26_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_accessories_26, sticky="w")
        self.button_accessories_26_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_accessories_26_qty_down)
        self.button_accessories_26_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_accessories_26, sticky="w")

        self.button_accessories_27_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_accessories_27_qty_up)
        self.button_accessories_27_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_accessories_27, sticky="w")
        self.button_accessories_27_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_accessories_27_qty_down)
        self.button_accessories_27_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_accessories_27, sticky="w")

        self.button_accessories_28_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_accessories_28_qty_up)
        self.button_accessories_28_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_accessories_28, sticky="w")
        self.button_accessories_28_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_accessories_28_qty_down)
        self.button_accessories_28_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_accessories_28, sticky="w")

        self.button_accessories_29_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_accessories_29_qty_up)
        self.button_accessories_29_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_accessories_29, sticky="w")
        self.button_accessories_29_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_accessories_29_qty_down)
        self.button_accessories_29_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_accessories_29, sticky="w")

        self.button_accessories_30_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_accessories_30_qty_up)
        self.button_accessories_30_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_accessories_30, sticky="w")
        self.button_accessories_30_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_accessories_30_qty_down)
        self.button_accessories_30_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_accessories_30, sticky="w")

    def set_columns(self):
        self.grid_row_form_total         = 0
        self.grid_row_form_header        = self.grid_row_form_total + 1
        self.grid_row_body               = self.grid_row_form_header + 1
        self.grid_row_body_modification  = self.grid_row_body + 1
        self.grid_row_chassis            = self.grid_row_body_modification + 1
        self.grid_row_suspension         = self.grid_row_chassis + 1
        self.grid_row_engine             = self.grid_row_suspension  + 1
        self.grid_row_engine_mods_header = self.grid_row_engine + 1
        self.grid_row_gas_engine_mods    = self.grid_row_engine_mods_header + 1
        self.grid_row_electric_mods      = self.grid_row_gas_engine_mods + 1
        #self.grid_row_fuel_injection     = 9
        self.grid_row_gas_tank           = self.grid_row_electric_mods + 1
        self.grid_row_front_tire         = self.grid_row_gas_tank + 1
        self.grid_row_rear_tire          = self.grid_row_front_tire + 1
        self.grid_row_crew_header        = self.grid_row_rear_tire + 1
        self.grid_row_outer_armor        = self.grid_row_crew_header + 1
        self.grid_row_inner_armor        = self.grid_row_outer_armor + 1
        self.grid_row_sloped_armor       = self.grid_row_inner_armor + 1
        self.grid_row_weapon_alt_1       = self.grid_row_sloped_armor + 1
        self.grid_row_sub_weapon_alt_1   = self.grid_row_weapon_alt_1 + 1
        self.grid_row_weapon_alt_2       = self.grid_row_sub_weapon_alt_1 + 1
        self.grid_row_sub_weapon_alt_2   = self.grid_row_weapon_alt_2 + 1
        self.grid_row_weapon_alt_3       = self.grid_row_sub_weapon_alt_2 + 1
        self.grid_row_sub_weapon_alt_3   = self.grid_row_weapon_alt_3 + 1
        self.grid_row_weapon_alt_4       = self.grid_row_sub_weapon_alt_3 + 1
        self.grid_row_sub_weapon_alt_4   = self.grid_row_weapon_alt_4 + 1
        self.grid_row_weapon_alt_5       = self.grid_row_sub_weapon_alt_4 + 1
        self.grid_row_sub_weapon_alt_5   = self.grid_row_weapon_alt_5 + 1
        self.grid_row_weapon_alt_6       = self.grid_row_sub_weapon_alt_5 + 1
        self.grid_row_sub_weapon_alt_6   = self.grid_row_weapon_alt_6 + 1
        self.grid_row_weapon_alt_7       = self.grid_row_sub_weapon_alt_6 + 1
        self.grid_row_sub_weapon_alt_7   = self.grid_row_weapon_alt_7 + 1
        self.grid_row_weapon_alt_8       = self.grid_row_sub_weapon_alt_7 + 1
        self.grid_row_sub_weapon_alt_8   = self.grid_row_weapon_alt_8 + 1
        self.grid_row_weapon_alt_9       = self.grid_row_sub_weapon_alt_8 + 1
        self.grid_row_sub_weapon_alt_9   = self.grid_row_weapon_alt_9 + 1
        self.grid_row_weapon_alt_10      = self.grid_row_sub_weapon_alt_9 + 1
        self.grid_row_sub_weapon_alt_10  = self.grid_row_weapon_alt_10 + 1
        self.grid_row_accessories_header = self.grid_row_sub_weapon_alt_10 + 1
        self.grid_row_accessories_1      = self.grid_row_accessories_header + 1
        self.grid_row_accessories_2      = self.grid_row_accessories_1 + 1
        self.grid_row_accessories_3      = self.grid_row_accessories_2 + 1
        self.grid_row_accessories_4      = self.grid_row_accessories_3 + 1
        self.grid_row_accessories_5      = self.grid_row_accessories_4 + 1
        self.grid_row_accessories_6      = self.grid_row_accessories_5 + 1
        self.grid_row_accessories_7      = self.grid_row_accessories_6 + 1
        self.grid_row_accessories_8      = self.grid_row_accessories_7 + 1
        self.grid_row_accessories_9      = self.grid_row_accessories_8 + 1
        self.grid_row_accessories_10      = self.grid_row_accessories_9 + 1
        self.grid_row_accessories_11      = self.grid_row_accessories_10 + 1
        self.grid_row_accessories_12      = self.grid_row_accessories_11 + 1
        self.grid_row_accessories_13      = self.grid_row_accessories_12 + 1
        self.grid_row_accessories_14      = self.grid_row_accessories_13 + 1
        self.grid_row_accessories_15      = self.grid_row_accessories_14 + 1
        self.grid_row_accessories_16      = self.grid_row_accessories_15 + 1
        self.grid_row_accessories_17      = self.grid_row_accessories_16 + 1
        self.grid_row_accessories_18      = self.grid_row_accessories_17 + 1
        self.grid_row_accessories_19      = self.grid_row_accessories_18 + 1
        self.grid_row_accessories_20      = self.grid_row_accessories_19 + 1
        self.grid_row_accessories_21      = self.grid_row_accessories_20 + 1
        self.grid_row_accessories_22      = self.grid_row_accessories_21 + 1
        self.grid_row_accessories_23      = self.grid_row_accessories_22 + 1
        self.grid_row_accessories_24      = self.grid_row_accessories_23 + 1
        self.grid_row_accessories_25      = self.grid_row_accessories_24 + 1
        self.grid_row_accessories_26      = self.grid_row_accessories_25 + 1
        self.grid_row_accessories_27      = self.grid_row_accessories_26 + 1
        self.grid_row_accessories_28      = self.grid_row_accessories_27 + 1
        self.grid_row_accessories_29      = self.grid_row_accessories_28 + 1
        self.grid_row_accessories_30      = self.grid_row_accessories_29 + 1
        self.grid_row_component_header    = self.grid_row_accessories_30 + 1
        self.grid_row_component_armor_1   = self.grid_row_component_header + 1
        self.grid_row_component_armor_2   = self.grid_row_component_armor_1 + 1
        self.grid_row_component_armor_3   = self.grid_row_component_armor_2 + 1
        self.grid_row_component_armor_4   = self.grid_row_component_armor_3 + 1
        self.grid_row_component_armor_5   = self.grid_row_component_armor_4 + 1
        self.grid_row_rocket_booster_header = self.grid_row_component_armor_5 + 1
        self.grid_row_rocket_booster_1    = self.grid_row_rocket_booster_header + 1
        self.grid_row_rocket_booster_2    = self.grid_row_rocket_booster_1 + 1
        self.grid_row_rocket_booster_3    = self.grid_row_rocket_booster_2 + 1
        self.grid_row_rocket_booster_4    = self.grid_row_rocket_booster_3 + 1
        self.grid_row_rocket_booster_5    = self.grid_row_rocket_booster_4 + 1
        self.grid_row_personal_equipment_header = self.grid_row_rocket_booster_5 + 1
        self.grid_row_personal_equipment_1 = self.grid_row_personal_equipment_header + 1
        self.grid_row_personal_equipment_2 = self.grid_row_personal_equipment_1 + 1
        self.grid_row_personal_equipment_3 = self.grid_row_personal_equipment_2 + 1
        self.grid_row_personal_equipment_4 = self.grid_row_personal_equipment_3 + 1
        self.grid_row_personal_equipment_5 = self.grid_row_personal_equipment_4 + 1
        self.grid_row_personal_equipment_6 = self.grid_row_personal_equipment_5 + 1
        self.grid_row_personal_equipment_7 = self.grid_row_personal_equipment_6 + 1
        self.grid_row_personal_equipment_8 = self.grid_row_personal_equipment_7 + 1
        self.grid_row_personal_equipment_9 = self.grid_row_personal_equipment_8 + 1
        self.grid_row_personal_equipment_10 = self.grid_row_personal_equipment_9 + 1
        self.grid_col_item                 = 0
        self.grid_col_qty                  = self.grid_col_item + 1
        self.grid_left_up_button           = self.grid_col_qty + 1
        self.grid_left_down_button         = self.grid_left_up_button + 1
        self.grid_right_qty                = self.grid_left_down_button + 1
        self.grid_right_up_button          = self.grid_right_qty + 1
        self.grid_right_down_button        = self.grid_right_up_button + 1
        self.grid_col_weapon_ammo_entry    = self.grid_right_down_button + 1
        self.grid_col_weapon_ammo_qty_up   = self.grid_col_weapon_ammo_entry + 1
        self.grid_col_weapon_ammo_qty_down = self.grid_col_weapon_ammo_qty_up + 1
        self.grid_col_extra_mag_entry      = self.grid_col_weapon_ammo_qty_down + 1
        self.grid_col_extra_mag_qty_up     = self.grid_col_extra_mag_entry + 1
        self.grid_col_extra_mag_qty_down   = self.grid_col_extra_mag_qty_up + 1
        self.grid_col_cost                 = self.grid_col_extra_mag_qty_down + 1
        self.grid_col_weight               = self.grid_col_cost + 1
        self.grid_col_spaces               = self.grid_col_weight + 1
        self.grid_col_dp                   = self.grid_col_spaces + 1
        self.grid_col_max_weight           = self.grid_col_dp + 1
        self.grid_col_power_factors        = self.grid_col_max_weight + 1
        self.grid_col_base_mpg             = self.grid_col_power_factors + 1
        self.grid_col_test_track           = self.grid_col_base_mpg + 1
        self.grid_col_test_track_numbers   = self.grid_col_test_track + 1
        self.grid_col_last_column          = self.grid_col_test_track_numbers + 1

    def add_dropdowns_canvas(self, canvas_type):
        self.get_body_dictionaries()
        self.get_modifications_dictionaries()
        self.get_chassis_dictionaries()
        self.get_suspension_dictionaries()
        self.get_engines_dictionaries()
        self.get_gas_tank_dictionaries()
        self.get_tires_dictionaries()
        self.get_weapon_dictionaries_alt()
        self.get_accessories_dictionaries()
        self.get_outer_armor_dictionaries()
        self.get_inner_armor_dictionaries()
        self.get_personal_equipment_dictionaries()
        self.add_dropdown_body_canvas(canvas_type=canvas_type)
        self.add_dropdown_modifications_canvas(canvas_type=canvas_type)
        self.add_dropdown_chassis_canvas(canvas_type=canvas_type)
        self.add_dropdown_suspension_canvas(canvas_type=canvas_type)
        self.add_dropdown_engines_canvas(canvas_type=canvas_type)
        self.add_dropdown_gas_tank_canvas(canvas_type=canvas_type)
        self.add_dropdown_front_tires_canvas(canvas_type=canvas_type)
        self.add_dropdown_rear_tires_canvas(canvas_type=canvas_type)
        self.add_dropdown_outer_armor_canvas(canvas_type=canvas_type)
        self.add_dropdown_inner_armor_canvas(canvas_type=canvas_type)
        self.add_dropdown_accessories_canvas(canvas_type=canvas_type)
        self.add_dropdown_personal_equipment_canvas(canvas_type=canvas_type)

    def add_dropdown_accessories_canvas(self, canvas_type):
        self.add_dropdown_accessories_1_canvas(canvas_type=canvas_type)
        self.add_dropdown_accessories_2_canvas(canvas_type=canvas_type)
        self.add_dropdown_accessories_3_canvas(canvas_type=canvas_type)
        self.add_dropdown_accessories_4_canvas(canvas_type=canvas_type)
        self.add_dropdown_accessories_5_canvas(canvas_type=canvas_type)
        self.add_dropdown_accessories_6_canvas(canvas_type=canvas_type)
        self.add_dropdown_accessories_7_canvas(canvas_type=canvas_type)
        self.add_dropdown_accessories_8_canvas(canvas_type=canvas_type)
        self.add_dropdown_accessories_9_canvas(canvas_type=canvas_type)
        self.add_dropdown_accessories_10_canvas(canvas_type=canvas_type)
        self.add_dropdown_accessories_11_canvas(canvas_type=canvas_type)
        self.add_dropdown_accessories_12_canvas(canvas_type=canvas_type)
        self.add_dropdown_accessories_13_canvas(canvas_type=canvas_type)
        self.add_dropdown_accessories_14_canvas(canvas_type=canvas_type)
        self.add_dropdown_accessories_15_canvas(canvas_type=canvas_type)
        self.add_dropdown_accessories_16_canvas(canvas_type=canvas_type)
        self.add_dropdown_accessories_17_canvas(canvas_type=canvas_type)
        self.add_dropdown_accessories_18_canvas(canvas_type=canvas_type)
        self.add_dropdown_accessories_19_canvas(canvas_type=canvas_type)
        self.add_dropdown_accessories_20_canvas(canvas_type=canvas_type)
        self.add_dropdown_accessories_21_canvas(canvas_type=canvas_type)
        self.add_dropdown_accessories_22_canvas(canvas_type=canvas_type)
        self.add_dropdown_accessories_23_canvas(canvas_type=canvas_type)
        self.add_dropdown_accessories_24_canvas(canvas_type=canvas_type)
        self.add_dropdown_accessories_25_canvas(canvas_type=canvas_type)
        self.add_dropdown_accessories_26_canvas(canvas_type=canvas_type)
        self.add_dropdown_accessories_27_canvas(canvas_type=canvas_type)
        self.add_dropdown_accessories_28_canvas(canvas_type=canvas_type)
        self.add_dropdown_accessories_29_canvas(canvas_type=canvas_type)
        self.add_dropdown_accessories_30_canvas(canvas_type=canvas_type)

    def add_dropdown_body_canvas(self, canvas_type):
        self.selected_body = tk.StringVar()
        self.selected_body.set("Body") # Set default option

        # Options for the dropdown
        #options = ["Body", "Body", "Light Cycle", "Medium Cycle", "Heavy Cycle", "Light SideCar",
        options = ["Body", "Light Cycle", "Medium Cycle", "Heavy Cycle", "Light SideCar",
                   "Heavy SideCar", "Light Trike", "Medium Trike", "Heavy Trike",
                    "x-Hvy Trike", "Rev. Light Trike", "Rev. Medium Trike", "Rev. Heavy Trike",
                    "Rev. X-Hvy Trike", "Subcompact", "Compact", "Mid-Sized",
                    "Sedan", "Luxury", "Station Wagon", "Pickup",
                    "Pickup, 1 Spc Ext. Cab", "Pickup, 2 Spc Ext. Cab", "Camper", "Van",
                    "Formula One/Indy", "Can-Am", "Sprint", "Funny Car", "Dragster"]
        # Create the dropdown widget
        self.body_dropdown = ttk.OptionMenu(canvas_type, self.selected_body, "Body", *options)
        self.body_dropdown.grid(column=self.grid_col_item, row=self.grid_row_body, sticky="w")
        self.selected_body.trace_add("write", self.on_select_body)

    def add_dropdown_modifications_canvas(self, canvas_type):
        self.selected_modifications = tk.StringVar()
        self.selected_modifications.set("Modifications") # Set default option
        # Options for the dropdown
        options = ["No Mods"
                   , "No Mods"
                   , "CA Frame"
                   , "Streamlined"
                   , "CA/Streamlined"]
        # Create the dropdown widget
        self.modification_dropdown = ttk.OptionMenu(canvas_type, self.selected_modifications, "Modifications", *options)
        self.modification_dropdown.grid(column=self.grid_col_item, row=self.grid_row_body_modification, sticky="w")
        self.selected_modifications.trace_add("write", self.on_select_modification)

    def add_dropdown_chassis_canvas(self, canvas_type):
        self.selected_chassis = tk.StringVar()
        self.selected_chassis.set("Chassis")
        # Options for the dropdown
        options = ["Chassis"
                   , "Cycle Chassis"
                   , "Light Chassis"
                   , "Standard Chassis"
                   , "Heavy Chassis"
                   , "Ext Heavy Chassis"]
        # Create the dropdown widget
        self.chassis_dropdown = ttk.OptionMenu(canvas_type, self.selected_chassis, "Chassis", *options)
        self.chassis_dropdown.grid(column=self.grid_col_item, row=self.grid_row_chassis, sticky="w")
        self.selected_chassis.trace_add("write", self.on_select_chassis)

    def add_dropdown_suspension_canvas(self, canvas_type):
        self.selected_suspension = tk.StringVar()
        self.selected_suspension.set("Suspension")
        options = ["Suspension", "Cycle Light Suspension", "Cycle Improved Suspension", "Cycle - Heavy Suspension", "Cycle - OR Suspension", "Light Suspension", "Improved Suspension", "Heavy Suspension", "Off-Road Suspension", "Racing Suspension"]
          # Create the dropdown widget
        self.suspension_dropdown = ttk.OptionMenu(canvas_type, self.selected_suspension, "Suspension", *options)
        self.suspension_dropdown.grid(column=self.grid_col_item, row=self.grid_row_suspension, sticky="w")
        self.selected_suspension.trace_add("write", self.on_select_suspension)

    def add_dropdown_engines_canvas(self, canvas_type):
        self.selected_engine = tk.StringVar()
        self.selected_engine.set("Engine")
        options = ["Engine", "10 cid IC Engine", "30 cid IC Engine",  "50 cid IC Engine",  "100 cid IC Engine",
                   "150 cid IC Engine",  "200 cid IC Engine",  "250 cid IC Engine",  "300 cid IC Engine",
                   "350 cid IC Engine",  "400 cid IC Engine",  "450 cid IC Engine",  "500 cid IC Engine",
                   "700 cid IC Engine", "Small Cycle Power Plant", "Medium Cycle Power Plant", "Large Cycle Power Plant",
                   "Super Cycle Power Plant", "Super Trike Power Plant", "Small Electric Power Plant",
                   "Medium Electric Power Plant", "Large Electric Power Plant", "Super Power Plant",
                   "Sport Power Plant", "ThunderCat Power Plant"]
          # Create the dropdown widget
        self.engine_dropdown = ttk.OptionMenu(canvas_type, self.selected_engine, "Engine", *options)
        self.engine_dropdown.grid(column=self.grid_col_item, row=self.grid_row_engine, sticky="w")
        self.selected_engine.trace_add("write", self.on_select_engines)

    def add_dropdown_gas_tank_canvas(self, canvas_type):
        self.selected_gas_tank = tk.StringVar()
        self.selected_gas_tank.set("Gas Tank")
        options = ["Gas Tank"
                   , "Gas Tank"
                   , "Electric"
                   , "Economy Gas Tank"
                   , "Hvy-Duty Gas Tank"
                   , "Racing Gas Tank"
                   , "Duelling Gas Tank"]
        # Create the dropdown widget
        self.gas_tank_dropdown = ttk.OptionMenu(canvas_type, self.selected_gas_tank, "Gas Tank", *options)
        self.gas_tank_dropdown.grid(column=self.grid_col_item, row=self.grid_row_gas_tank, sticky="w")
        self.selected_gas_tank.trace_add("write", self.on_select_gas_tank)

    def add_dropdown_front_tires_canvas(self, canvas_type):
        self.selected_front_tire = tk.StringVar()
        self.selected_front_tire.set("Tires")
        options = ["Tires"
                   , "Standard Tires"
                   , "Heavy Duty Tires"
                   , "PR Tires"
                   , "Solid Tires"
                   , "Plasticore Tires"]
        # Create the dropdown widget
        self.front_tires_dropdown = ttk.OptionMenu(canvas_type, self.selected_front_tire, "Tires", *options)
        self.front_tires_dropdown.grid(column=self.grid_col_item, row=self.grid_row_front_tire, sticky="w")
        self.selected_front_tire.trace_add("write", self.on_select_front_tires)

    def add_dropdown_rear_tires_canvas(self, canvas_type):
        self.selected_rear_tire = tk.StringVar()
        self.selected_rear_tire.set("Tires")
        options = ["Tires"
                   , "Standard Tires"
                   , "Heavy Duty Tires"
                   , "PR Tires"
                   , "Solid Tires"
                   , "Plasticore Tires"]
        # Create the dropdown widget
        self.rear_tires_dropdown = ttk.OptionMenu(canvas_type, self.selected_rear_tire, "Tires", *options)
        self.rear_tires_dropdown.grid(column=self.grid_col_item, row=self.grid_row_rear_tire, sticky="w")
        self.selected_rear_tire.trace_add("write", self.on_select_rear_tires)

    def add_dropdown_outer_armor_canvas(self, canvas_type):
        self.selected_outer_armor = tk.StringVar()
        self.selected_outer_armor.set("Outer Armor")
        options = self.get_outer_armor_options()
        # Create the dropdown widget
        self.outer_armor_dropdown = ttk.OptionMenu(canvas_type, self.selected_outer_armor, "Outer Armor", *options) #filled elsewhere
        self.outer_armor_dropdown.grid(column=self.grid_col_item, row=self.grid_row_outer_armor, sticky="w")
        self.selected_outer_armor.trace_add("write", self.on_select_outer_armor)

    def add_dropdown_inner_armor_canvas(self, canvas_type):
        self.selected_inner_armor = tk.StringVar()
        self.selected_inner_armor.set("Inner Armor")
        options = self.get_inner_armor_options()
        # Create the dropdown widget
        self.inner_armor_dropdown = ttk.OptionMenu(canvas_type, self.selected_inner_armor, "Inner Armor", *options) #filled elsewhere
        self.inner_armor_dropdown.grid(column=self.grid_col_item, row=self.grid_row_inner_armor, sticky="w")
        self.selected_inner_armor.trace_add("write", self.on_select_inner_armor)

    def add_dropdown_personal_equipment_canvas(self, canvas_type):
        self.add_dropdown_personal_equipment_1_canvas(canvas_type)
        self.add_dropdown_personal_equipment_2_canvas(canvas_type)
        self.add_dropdown_personal_equipment_3_canvas(canvas_type)
        self.add_dropdown_personal_equipment_4_canvas(canvas_type)
        self.add_dropdown_personal_equipment_5_canvas(canvas_type)
        self.add_dropdown_personal_equipment_6_canvas(canvas_type)
        self.add_dropdown_personal_equipment_7_canvas(canvas_type)
        self.add_dropdown_personal_equipment_8_canvas(canvas_type)
        self.add_dropdown_personal_equipment_9_canvas(canvas_type)
        self.add_dropdown_personal_equipment_10_canvas(canvas_type)

    def on_select_body(self, *args):
        selected_value = self.selected_body.get()
        for entry in self.body_list: #list of dictionaries
            body_type: str = entry.get("Body")
            if selected_value == body_type: #found what we're looking for
                self.is_cycle = (entry.get("Cycle") == 1)
                if selected_value in ("Subcompact", "Formula One/Indy"):
                    self.label_hidden_body_hc.configure(text="1")
                else:
                    self.label_hidden_body_hc.configure(text="0")
                self.hc_addition()
                self.label_body_selected.configure(text=body_type)
                self.label_body_cost.configure(text=entry.get("Cost"))
                self.label_body_weight.configure(text=entry.get("Weight"))
                self.label_body_max_weight.configure(text=entry.get("Total Weight"))
                self.label_max_weight.configure(text=str(entry.get("Total Weight")))
                self.label_body_spaces.configure(text=entry.get("Total Spaces"))
                self.label_hidden_body_armor_cost.configure(text=entry.get("Armor Cost/Point"))
                self.label_hidden_body_armor_weight.configure(text=entry.get("Armor Weight/Point"))
                self.hidden_body_cycle.configure(text=entry.get("Cycle")) #Use this when calculating tire weight, cycles get half weight
                #self.on_select_carb() #recalculate fuel injection options, this calls self.recalculate()
                self.on_select_chassis()
                self.recalculate()
                return #exit now

    def on_select_modification(self, *args):
        selected_value = self.selected_modifications.get()
        for entry in self.modifications_list:
            modification_type: str = entry.get("Modification")
            if selected_value == modification_type: # get the values in the body lines for final adjustment
                body_cost: int = self.label_body_cost.cget("text")
                body_weight: int = self.label_body_weight.cget("text")
                body_spaces: int = self.label_body_spaces.cget("text")
                modification_cost: int = int(float(entry.get("Cost")) * body_cost)
                modification_weight: int = int(float(entry.get("Weight")) * body_weight)
                local_sloped_armor = self.var_sloped_armor.get() * 0.1
                streamline_spaces: float = float(entry.get("Spaces"))
                total_spaces: float = local_sloped_armor + streamline_spaces
                if total_spaces == 0.2: #both have been selected, adjust
                    total_spaces = 0.15
                modification_spaces: int = math.ceil(total_spaces * body_spaces)
                self.label_modificiation_cost.configure(text=str(modification_cost))
                self.label_modificiation_weight.configure(text=str(modification_weight))
                self.label_modificiation_space.configure(text=str(modification_spaces))
                self.recalculate()
                return #exit now

    def on_select_chassis(self, *args):
        selected_value = self.selected_chassis.get()
        for entry in self.chassis_list:
            chassis_type: str = entry.get("Chassis")
            if selected_value == chassis_type: # get the values in the body lines for final adjustment
                body_cost: int = self.label_body_cost.cget("text")
                body_max_weight: int = self.label_body_max_weight.cget("text")
                chassis_cost: int = math.ceil(entry.get("Cost") * body_cost)
                chassis_max_weight = int(body_max_weight * float(entry.get("Max Weight")))
                self.label_chassis_cost.configure(text=str(chassis_cost))
                self.label_max_weight.configure(text=str(chassis_max_weight))
                body_selected: str = self.label_body_selected.cget("text")
                if body_selected in ["Pickup", "Pickup, 1 Spc Ext. Cab", "Pickup, 2 Spc Ext. Cab", "Camper", "Van"]:
                    if chassis_type == "Ext Heavy Chassis":
                        self.var_six_wheel_chassis.set(1)
                self.recalculate()
                return #exit now

    def var_six_wheel_chassis_changed(self, *args):
        self.recalculate()

    def var_sloped_armor_changed(self, *args):
        self.on_select_outer_armor()
        self.on_select_inner_armor()
        self.on_select_modification()
        self.recalculate()

    def on_select_suspension(self, *args):
        selected_value = self.selected_suspension.get()
        for entry in self.suspension_list:
            suspension_type: str = entry.get("Suspension")
            if selected_value == suspension_type: # get the values in the body lines for final adjustment
                body_cost: int = self.label_body_cost.cget("text")
                suspension_cost: int = math.ceil(float(entry.get("Cost")) * body_cost)
                hc_value: int = int(entry.get("HC"))
                self.label_hc.configure(text=str(hc_value))
                self.hc_addition()
                self.label_suspension_cost.configure(text=str(suspension_cost)) # we will want to show the proper HC
                self.recalculate()
                return #exit now

    def on_select_engines(self, *args):
        selected_value = self.selected_engine.get()
        for entry in self.engine_list:
            engine_type: str = entry.get("Engine")
            if selected_value == engine_type: # get the values in the body lines for final adjustment
                self.label_engine_cost.configure(text=entry.get("Cost"))
                self.label_engine_weight.configure(text=entry.get("Weight"))
                self.label_engine_space.configure(text=entry.get("Spaces"))
                self.label_engine_dp.configure(text=entry.get("DP"))
                self.label_engine_pf.configure(text=entry.get("Power Factors"))
                self.label_engine_mpg.configure(text=entry.get("Base MPG"))
                self.label_engine_type.configure(text=entry.get("Type"))
                if self.label_engine_type.cget("text") == "Gas":
                    self.hide_electric_engine_options()
                    self.show_gas_engine_options()
                else:
                    self.show_electric_engine_options()
                    self.hide_gas_engine_options()                    
                self.recalculate()
                return #exit now

    def var_engine_gas_super_charger_changed(self, *args):
        self.recalculate()

    def var_engine_gas_vp_turbo_changed(self, *args):
        self.var_engine_gas_turbo.set(0) # turn off the Turbo if VP Turbo is selected
        self.recalculate()

    def var_engine_gas_turbo_changed(self, *args):
        self.var_engine_gas_vp_turbo.set(0) # turn off the VP turbo if Turbo is selected
        self.recalculate()

    def var_engine_gas_tube_headers_changed(self, *args):
        self.recalculate()

    def var_engine_gas_blue_print_changed(self, *args):
        self.recalculate()

    def on_select_gas_tank(self, *args):
        selected_value = self.selected_gas_tank.get()
        for entry in self.gas_tank_list:
            gas_tank_type: str = entry.get("Gas Tank")
            if selected_value == gas_tank_type: # get the values in the body lines for final adjustment
                gas_gallon_qty: int = int(self.entry_gas_gallon_qty.get())
                gas_tank_cost = entry.get("Cost")
                gas_tank_weight = entry.get("Weight")
                gas_tank_dp = entry.get("DP")
                self.label_hidden_gas_tank_cost.configure(text=str(gas_tank_cost))
                self.label_hidden_gas_tank_weight.configure(text=str(gas_tank_weight))
                self.label_hidden_gas_tank_dp.configure(text=str(gas_tank_dp))

                if gas_gallon_qty > 0 and gas_tank_cost > 0:
                    new_gas_tank_cost = (gas_tank_cost + 40) * gas_gallon_qty
                    new_gas_tank_weight = (gas_tank_weight + 5) * gas_gallon_qty

                    self.label_gas_tank_cost.configure(text=str(new_gas_tank_cost))
                    self.label_gas_tank_weight.configure(text=str(new_gas_tank_weight))
                    self.label_gas_tank_dp.configure(text=str(gas_tank_dp))
                    self.recalculate()
                else: #zero out the numbers
                    self.label_gas_tank_cost.configure(text=str(0))
                    self.label_gas_tank_weight.configure(text=str(0))
                    self.label_gas_tank_dp.configure(text=str(0))

                return #exit now

    def on_changed_entry_gas_gallon_qty(self, *args):
        gas_gallon_qty = self.var_gas_gallon_qty.get()
        if gas_gallon_qty > 0:
            gas_tank_cost = int(self.label_hidden_gas_tank_cost.cget("text"))
            gas_tank_weight = int(self.label_hidden_gas_tank_weight.cget("text"))
            gas_tank_dp = int(self.label_hidden_gas_tank_dp.cget("text"))
            gas_tank_cost = (gas_tank_cost + 40) * gas_gallon_qty
            gas_tank_weight = (gas_tank_weight + 5) * gas_gallon_qty
            self.label_gas_tank_cost.configure(text=str(gas_tank_cost))
            self.label_gas_tank_weight.configure(text=str(gas_tank_weight))
            self.label_gas_tank_dp.configure(text=str(gas_tank_dp))
        else:
            self.label_gas_tank_cost.configure(text=str(0))
            self.label_gas_tank_weight.configure(text=str(0))
            self.label_gas_tank_dp.configure(text=str(0))
        self.recalculate()

    def on_changed_front_tire_qty(self, *args):
        front_tire_qty = self.var_front_tire_qty.get()
        self.var_front_tire_qty.set(value=front_tire_qty)
        self.front_tire_adjustment()
        self.recalculate()

    def on_changed_rear_tire_qty(self, *args):
        rear_tire_qty = self.var_rear_tire_qty.get()
        self.var_rear_tire_qty.set(value=rear_tire_qty)
        self.rear_tire_adjustment()
        self.recalculate()

    def on_changed_driver_gunner_qty(self, *args):
        driver_gunner_qty = self.var_driver_gunner_qty.get()
        passenger_qty = self.var_passenger_qty.get()
        self.var_driver_gunner_qty.set(value=driver_gunner_qty)
        self.label_driver_gunner_weight.configure(text=str(150*(driver_gunner_qty + passenger_qty)))
        self.label_driver_gunner_space.configure(text=str(driver_gunner_qty * 2 + passenger_qty))
        self.recalculate()

    def on_changed_outer_armor_qty(self, *args):
        body_armor_cost:    float = float(self.label_hidden_body_armor_cost.cget("text")) #this could be a decimal
        body_armor_weight:  float = float(self.label_hidden_body_armor_weight.cget("text")) #this could be a decimal
        outer_armor_cost:   float = float(self.label_hidden_outer_armor_cost.cget("text"))
        outer_armor_weight: float = float(self.label_hidden_outer_armor_weight.cget("text"))
        outer_armor_qty = self.var_outer_armor_qty.get()
        self.var_outer_armor_qty.set(value=outer_armor_qty)
        total_armor_cost = outer_armor_cost * outer_armor_qty * body_armor_cost
        self.label_outer_armor_cost.configure(text=self.float_to_str(total_armor_cost))
        self.label_outer_armor_weight.configure(text=self.float_to_str(outer_armor_weight * outer_armor_qty * body_armor_weight))
        self.on_changed_entry_outer_armor_allocation_qty(None)
        self.recalculate()

    def on_changed_inner_armor_qty(self, *args):
        body_armor_cost:    float = float(self.label_hidden_body_armor_cost.cget("text")) #this could be a decimal
        body_armor_weight:  float = float(self.label_hidden_body_armor_weight.cget("text")) #this could be a decimal
        inner_armor_cost:   float = float(self.label_hidden_inner_armor_cost.cget("text"))
        inner_armor_weight: float = float(self.label_hidden_inner_armor_weight.cget("text"))
        inner_armor_qty = self.var_inner_armor_qty.get()
        self.var_inner_armor_qty.set(value=inner_armor_qty)
        total_armor_cost = inner_armor_cost * inner_armor_qty * body_armor_cost
        printed_armor_cost: str = f"{total_armor_cost:.2f}"
        self.label_inner_armor_cost.configure(text=printed_armor_cost)
        self.label_inner_armor_weight.configure(text=str(inner_armor_weight * inner_armor_qty * body_armor_weight))
        self.on_changed_entry_inner_armor_allocation_qty(None)
        self.recalculate()

    def var_front_tire_steelbelting_changed(self, *args):
        self.on_select_front_tires()

    def var_front_tire_radial_changed(self, *args):
        self.var_front_tire_racing_slick.set(0) #turn off slicks if radials are selected
        self.var_front_tire_offroad.set(0)      #turn off off-road if radials are selected
        self.on_select_front_tires()

    def var_front_tire_fireproof_changed(self, *args):
        self.on_select_front_tires()

    def var_front_tire_offroad_changed(self, *args):
        self.var_front_tire_racing_slick.set(0) #turn off slicks if offroad are selected
        self.var_front_tire_radial.set(0)      #turn off radials if offroad are selected
        self.on_select_front_tires()

    def var_front_tire_racing_slick_changed(self, *args):
        self.var_front_tire_offroad.set(0)      #turn off offroad if racing slicks are selected
        self.var_front_tire_radial.set(0)      #turn off radials if racing slicks are selected
        self.on_select_front_tires()

    def on_select_front_tires(self, *args):
        selected_value = self.selected_front_tire.get()
        for entry in self.tires_list:
            tire_type: str = entry.get("Tires")
            if selected_value == tire_type: # get the values in the body lines for final adjustment
                tire_cost = int(entry.get("Cost"))
                tire_weight = int(entry.get("Weight"))
                tire_dp = int(entry.get("DP"))
                self.label_hidden_front_tire_cost.configure(text=str(tire_cost))
                self.label_hidden_front_tire_weight.configure(text=str(tire_weight))
                self.label_hidden_front_tire_dp.configure(text=str(tire_dp))
                self.front_tire_adjustment()
                self.recalculate()
                return #exit now

    def var_rear_tire_steelbelting_changed(self, *args):
        self.on_select_rear_tires()

    def var_rear_tire_radial_changed(self, *args):
        self.var_rear_tire_racing_slick.set(0) #turn off slicks if radials are selected
        self.var_rear_tire_offroad.set(0)      #turn off off-road if radials are selected
        self.on_select_rear_tires()

    def var_rear_tire_fireproof_changed(self, *args):
        self.on_select_rear_tires()

    def var_rear_tire_offroad_changed(self, *args):
        self.var_rear_tire_racing_slick.set(0) #turn off slicks if offroad are selected
        self.var_rear_tire_radial.set(0)      #turn off radials if offroad are selected
        self.on_select_rear_tires()

    def var_rear_tire_racing_slick_changed(self, *args):
        self.var_rear_tire_offroad.set(0)      #turn off offroad if racing slicks are selected
        self.var_rear_tire_radial.set(0)      #turn off radials if racing slicks are selected
        self.on_select_rear_tires()

    def on_select_rear_tires(self, *args):
        selected_value = self.selected_rear_tire.get()
        for entry in self.tires_list:
            tire_type: str = entry.get("Tires")
            if selected_value == tire_type: # get the values in the body lines for final adjustment
                tire_cost = int(entry.get("Cost"))
                tire_weight = int(entry.get("Weight"))
                tire_dp = int(entry.get("DP"))
                self.label_hidden_rear_tire_cost.configure(text=str(tire_cost))
                self.label_hidden_rear_tire_weight.configure(text=str(tire_weight))
                self.label_hidden_rear_tire_dp.configure(text=str(tire_dp))
                self.rear_tire_adjustment()

                self.recalculate()
                return #exit now

    def on_select_outer_armor(self, *args):
        selected_value = self.selected_outer_armor.get()
        for entry in self.outer_armor_list:
        #  "Weight": "0",   "Abbr": "None"}
            armor_type: str = entry.get("Outer Armor")
            if selected_value == armor_type:
                self.label_hidden_outer_armor_selection.configure(text=armor_type)
                outer_armor_cost = float(entry.get("Cost"))
                sloped_armor_adjustment = self.var_sloped_armor.get()
                outer_armor_cost = outer_armor_cost + outer_armor_cost * sloped_armor_adjustment * 0.1
                outer_armor_weight = float(entry.get("Weight"))
                self.label_hidden_outer_armor_cost.configure(text=str(outer_armor_cost))
                self.label_hidden_outer_armor_weight.configure(text=str(outer_armor_weight))
                body_armor_cost:    float = float(self.label_hidden_body_armor_cost.cget("text")) #this could be a decimal
                body_armor_weight:  float = float(self.label_hidden_body_armor_weight.cget("text")) #this could be a decimal
                outer_armor_qty = self.var_outer_armor_qty.get()
                total_armor_cost = outer_armor_cost * outer_armor_qty * body_armor_cost
                self.label_outer_armor_cost.configure(text=self.float_to_str(total_armor_cost))
                self.label_outer_armor_weight.configure(text=self.float_to_str(outer_armor_weight * outer_armor_qty * body_armor_weight))
                self.recalculate()

    def on_select_inner_armor(self, *args):
        selected_value = self.selected_inner_armor.get()
        for entry in self.inner_armor_list:
        #  "Weight": "0",   "Abbr": "None"}
            armor_type: str = entry.get("Inner Armor")
            if selected_value == armor_type:
                self.label_hidden_inner_armor_selection.configure(text=armor_type)
                inner_armor_cost = float(entry.get("Cost"))
                sloped_armor_adjustment = self.var_sloped_armor.get()
                inner_armor_cost = inner_armor_cost + inner_armor_cost * sloped_armor_adjustment * 0.1
                inner_armor_weight = float(entry.get("Weight"))
                self.label_hidden_inner_armor_cost.configure(text=str(inner_armor_cost))
                self.label_hidden_inner_armor_weight.configure(text=str(inner_armor_weight))
                body_armor_cost:    float = float(self.label_hidden_body_armor_cost.cget("text")) #this could be a decimal
                body_armor_weight:  float = float(self.label_hidden_body_armor_weight.cget("text")) #this could be a decimal
                inner_armor_qty = self.var_inner_armor_qty.get()
                total_armor_cost = inner_armor_cost * inner_armor_qty * body_armor_cost
                printed_armor_cost: str = f"{total_armor_cost:.2f}"
                self.label_inner_armor_cost.configure(text=printed_armor_cost)
                self.label_inner_armor_weight.configure(text=str(inner_armor_weight * inner_armor_qty * body_armor_weight))
                self.recalculate()

    def recalculate(self):
        """Recalculate all the labels for cost, weight and space.  Expect this to be done each time something changes"""
        engine_type: str = self.label_engine_type.cget("text")
        if engine_type == "Gas":
            self.check_engine_gas_super_charger.config(state="normal")
            self.check_engine_gas_vp_turbo.config(state="normal")
            self.check_engine_gas_tube_headers.config(state="normal")
            self.check_engine_gas_blue_print.config(state="normal")
            self.check_engine_gas_turbo.config(state="normal")
            self.var_engine_electric_super_conductors.set(0)
            self.var_engine_electric_platnium_catalysts.set(0)
            self.var_engine_electric_extra_power_cells.set(0)
            self.check_engine_electric_super_conductors.config(state="disabled")
            self.check_engine_electric_platnium_catalysts.config(state="disabled")
            self.check_engine_electric_extra_power_cells.config(state="disabled")
        elif engine_type == "Electric": #electric options
            self.var_engine_gas_super_charger.set(0)
            self.check_engine_gas_super_charger.config(state="disabled")

            self.var_engine_gas_vp_turbo.set(0)
            self.check_engine_gas_vp_turbo.config(state="disabled")

            self.var_engine_gas_tube_headers.set(0)
            self.check_engine_gas_tube_headers.config(state="disabled")

            self.var_engine_gas_blue_print.set(0)
            self.check_engine_gas_blue_print.config(state="disabled")

            self.var_engine_gas_turbo.set(0)
            self.check_engine_gas_turbo.config(state="disabled")

            self.check_engine_electric_super_conductors.config(state="normal")
            self.check_engine_electric_platnium_catalysts.config(state="normal")
            self.check_engine_electric_extra_power_cells.config(state="normal")
        else: #turn off everything
            self.var_engine_gas_super_charger.set(0)
            self.check_engine_gas_super_charger.config(state="disabled")

            self.var_engine_gas_vp_turbo.set(0)
            self.check_engine_gas_vp_turbo.config(state="disabled")

            self.var_engine_gas_tube_headers.set(0)
            self.check_engine_gas_tube_headers.config(state="disabled")

            self.var_engine_gas_blue_print.set(0)
            self.check_engine_gas_blue_print.config(state="disabled")

            self.var_engine_gas_turbo.set(0)
            self.check_engine_gas_turbo.config(state="disabled")

            self.var_engine_electric_super_conductors.set(0)
            self.var_engine_electric_platnium_catalysts.set(0)
            self.var_engine_electric_extra_power_cells.set(0)
            self.check_engine_electric_super_conductors.config(state="disabled")
            self.check_engine_electric_platnium_catalysts.config(state="disabled")
            self.check_engine_electric_extra_power_cells.config(state="disabled")
            #########################

        body_cost:              int = int(self.label_body_cost.cget("text"))
        body_weight:            int = int(self.label_body_weight.cget("text"))
        body_spaces:            int = int(self.label_body_spaces.cget("text"))
        modificiation_cost:     int = int(self.label_modificiation_cost.cget("text"))
        modificiation_weight:   int = int(self.label_modificiation_weight.cget("text"))
        modificiation_space:    int = int(self.label_modificiation_space.cget("text"))
        chassis_cost:           int = int(self.label_chassis_cost.cget("text"))
        six_wheel_chassis_cost: int = int(self.var_six_wheel_chassis.get()) * 100
        suspension_cost:        int = int(self.label_suspension_cost.cget("text"))
        engine_cost:            int = int(self.label_engine_cost.cget("text"))
        engine_weight:          int = int(self.label_engine_weight.cget("text"))
        engine_space:           int = int(self.label_engine_space.cget("text"))
        engine_power_factors:   int = int(self.label_engine_pf.cget("text"))
        engine_mpg:             int = int(self.label_engine_mpg.cget("text"))

        engine_mod_cost, engine_mod_weight, engine_mod_space, engine_mod_power_factors, engine_mod_mpg, engine_mod_dp, engine_mod_accel = self.engine_mods_recalc()

        self.label_engine_mod_cost.configure(text=str(engine_mod_cost))
        self.label_engine_mod_weight.configure(text=str(engine_mod_weight))
        self.label_engine_mod_space.configure(text=str(engine_mod_space))
        self.label_engine_mod_dp.configure(text=str(engine_mod_dp))
        self.label_engine_mod_pf.configure(text=str(engine_mod_power_factors))
        self.label_engine_mod_mpg.configure(text=str(engine_mod_mpg))

        gas_tank_cost   = int(self.label_gas_tank_cost.cget("text"))
        gas_tank_weight = int(self.label_gas_tank_weight.cget("text"))
        gas_tank_space  = int(self.label_gas_tank_space.cget("text"))

        front_tire_cost   = int(self.label_front_tire_cost.cget("text"))
        front_tire_weight = int(self.label_front_tire_weight.cget("text"))
        rear_tire_cost    = int(self.label_rear_tire_cost.cget("text"))
        rear_tire_weight  = int(self.label_rear_tire_weight.cget("text"))

        driver_gunner_weight: int = int(self.label_driver_gunner_weight.cget("text"))
        driver_gunner_space:  int = int(self.label_driver_gunner_space.cget("text"))

        outer_armor_cost:   float = float(self.label_outer_armor_cost.cget("text"))
        outer_armor_weight: float = float(self.label_outer_armor_weight.cget("text"))
        inner_armor_cost:   float = float(self.label_inner_armor_cost.cget("text"))
        inner_armor_weight: float = float(self.label_inner_armor_weight.cget("text"))

        ####################################################################################
        # Weapon 1 calculations here                                                       #
        ####################################################################################
        sub_weapon_1_cost:          int = int(self.label_sub_weapon_1_cost.cget("text"))
        sub_weapon_1_weight:        int = int(self.label_sub_weapon_1_weight.cget("text"))
        sub_weapon_1_space_str:     str = self.label_sub_weapon_1_space.cget("text")
        sub_weapon_1_ammo_cost_str: str = self.label_sub_weapon_1_ammo_cost.cget("text")
        try:
            sub_weapon_1_ammo_cost:   float = float(sub_weapon_1_ammo_cost_str)
        except ValueError:
            sub_weapon_1_ammo_cost = 0.0
        try:
            sub_weapon_1_ammo_weight: float = float(self.label_sub_weapon_1_ammo_weight.cget("text"))
        except ValueError:
            sub_weapon_1_ammo_weight = 0.0
        sub_weapon_1_space: float = 0.0
        if sub_weapon_1_space_str == "":
            sub_weapon_1_space = 0
        else:
            sub_weapon_1_space = float(sub_weapon_1_space_str)

        ####################################################################################
        # Weapon 2 calculations here                                                       #
        ####################################################################################
        sub_weapon_2_cost:        int = int(self.label_sub_weapon_2_cost.cget("text"))
        sub_weapon_2_weight:      int = int(self.label_sub_weapon_2_weight.cget("text"))
        sub_weapon_2_space_str: str = self.label_sub_weapon_2_space.cget("text")
        sub_weapon_2_ammo_cost_str: str = self.label_sub_weapon_2_ammo_cost.cget("text")
        try:
            sub_weapon_2_ammo_cost:   float = float(sub_weapon_2_ammo_cost_str)
        except ValueError:
            sub_weapon_2_ammo_cost = 0.0
        try:
            sub_weapon_2_ammo_weight: float = float(self.label_sub_weapon_2_ammo_weight.cget("text"))
        except ValueError:
            sub_weapon_2_ammo_weight = 0.0
        sub_weapon_2_space: float = 0.0
        if sub_weapon_2_space_str == "":
            sub_weapon_2_space = 0
        else:
            sub_weapon_2_space = float(sub_weapon_2_space_str)

        ####################################################################################
        # Weapon 3 calculations here                                                       #
        ####################################################################################
        sub_weapon_3_cost:        int = int(self.label_sub_weapon_3_cost.cget("text"))
        sub_weapon_3_weight:      int = int(self.label_sub_weapon_3_weight.cget("text"))
        sub_weapon_3_space_str: str = self.label_sub_weapon_3_space.cget("text")
        sub_weapon_3_ammo_cost_str: str = self.label_sub_weapon_3_ammo_cost.cget("text")
        try:
            sub_weapon_3_ammo_cost:   float = float(sub_weapon_3_ammo_cost_str)
        except ValueError:
            sub_weapon_3_ammo_cost = 0.0
        try:
            sub_weapon_3_ammo_weight: float = float(self.label_sub_weapon_3_ammo_weight.cget("text"))
        except ValueError:
            sub_weapon_3_ammo_weight = 0.0
        sub_weapon_3_space: float = 0.0
        if sub_weapon_3_space_str == "":
            sub_weapon_3_space = 0
        else:
            sub_weapon_3_space = float(sub_weapon_3_space_str)

        ####################################################################################
        # Weapon 4 calculations here                                                       #
        ####################################################################################
        sub_weapon_4_cost:        int = int(self.label_sub_weapon_4_cost.cget("text"))
        sub_weapon_4_weight:      int = int(self.label_sub_weapon_4_weight.cget("text"))
        sub_weapon_4_space_str: str = self.label_sub_weapon_4_space.cget("text")
        sub_weapon_4_ammo_cost_str: str = self.label_sub_weapon_4_ammo_cost.cget("text")
        try:
            sub_weapon_4_ammo_cost:   float = float(sub_weapon_4_ammo_cost_str)
        except ValueError:
            sub_weapon_4_ammo_cost = 0.0
        try:
            sub_weapon_4_ammo_weight: float = float(self.label_sub_weapon_4_ammo_weight.cget("text"))
        except ValueError:
            sub_weapon_4_ammo_weight = 0.0
        sub_weapon_4_space: float = 0.0
        if sub_weapon_4_space_str == "":
            sub_weapon_4_space = 0
        else:
            sub_weapon_4_space = float(sub_weapon_4_space_str)

        ####################################################################################
        # Weapon 5 calculations here                                                       #
        ####################################################################################
        sub_weapon_5_cost:        int = int(self.label_sub_weapon_5_cost.cget("text"))
        sub_weapon_5_weight:      int = int(self.label_sub_weapon_5_weight.cget("text"))
        sub_weapon_5_space_str: str = self.label_sub_weapon_5_space.cget("text")
        sub_weapon_5_ammo_cost_str: str = self.label_sub_weapon_5_ammo_cost.cget("text")
        try:
            sub_weapon_5_ammo_cost:   float = float(sub_weapon_5_ammo_cost_str)
        except ValueError:
            sub_weapon_5_ammo_cost = 0.0
        try:
            sub_weapon_5_ammo_weight: float = float(self.label_sub_weapon_5_ammo_weight.cget("text"))
        except ValueError:
            sub_weapon_5_ammo_weight = 0.0
        sub_weapon_5_space: float = 0.0
        if sub_weapon_5_space_str == "":
            sub_weapon_5_space = 0
        else:
            sub_weapon_5_space = float(sub_weapon_5_space_str)

        ####################################################################################
        # Weapon 6 calculations here                                                       #
        ####################################################################################
        sub_weapon_6_cost:        int = int(self.label_sub_weapon_6_cost.cget("text"))
        sub_weapon_6_weight:      int = int(self.label_sub_weapon_6_weight.cget("text"))
        sub_weapon_6_space_str: str = self.label_sub_weapon_6_space.cget("text")
        sub_weapon_6_ammo_cost_str: str = self.label_sub_weapon_6_ammo_cost.cget("text")
        try:
            sub_weapon_6_ammo_cost:   float = float(sub_weapon_6_ammo_cost_str)
        except ValueError:
            sub_weapon_6_ammo_cost = 0.0
        try:
            sub_weapon_6_ammo_weight: float = float(self.label_sub_weapon_6_ammo_weight.cget("text"))
        except ValueError:
            sub_weapon_6_ammo_weight = 0.0
        sub_weapon_6_space: float = 0.0
        if sub_weapon_6_space_str == "":
            sub_weapon_6_space = 0
        else:
            sub_weapon_6_space = float(sub_weapon_6_space_str)

        ####################################################################################
        # Weapon 7 calculations here                                                       #
        ####################################################################################
        sub_weapon_7_cost:        int = int(self.label_sub_weapon_7_cost.cget("text"))
        sub_weapon_7_weight:      int = int(self.label_sub_weapon_7_weight.cget("text"))
        sub_weapon_7_space_str: str = self.label_sub_weapon_7_space.cget("text")
        sub_weapon_7_ammo_cost_str: str = self.label_sub_weapon_7_ammo_cost.cget("text")
        try:
            sub_weapon_7_ammo_cost:   float = float(sub_weapon_7_ammo_cost_str)
        except ValueError:
            sub_weapon_7_ammo_cost = 0.0
        try:
            sub_weapon_7_ammo_weight: float = float(self.label_sub_weapon_7_ammo_weight.cget("text"))
        except ValueError:
            sub_weapon_7_ammo_weight = 0.0
        sub_weapon_7_space: float = 0.0
        if sub_weapon_7_space_str == "":
            sub_weapon_7_space = 0
        else:
            sub_weapon_7_space = float(sub_weapon_7_space_str)

        ####################################################################################
        # Weapon 8 calculations here                                                       #
        ####################################################################################
        sub_weapon_8_cost:        int = int(self.label_sub_weapon_8_cost.cget("text"))
        sub_weapon_8_weight:      int = int(self.label_sub_weapon_8_weight.cget("text"))
        sub_weapon_8_space_str: str = self.label_sub_weapon_8_space.cget("text")
        sub_weapon_8_ammo_cost_str: str = self.label_sub_weapon_8_ammo_cost.cget("text")
        try:
            sub_weapon_8_ammo_cost:   float = float(sub_weapon_8_ammo_cost_str)
        except ValueError:
            sub_weapon_8_ammo_cost = 0.0
        try:
            sub_weapon_8_ammo_weight: float = float(self.label_sub_weapon_8_ammo_weight.cget("text"))
        except ValueError:
            sub_weapon_8_ammo_weight = 0.0
        sub_weapon_8_space: float = 0.0
        if sub_weapon_8_space_str == "":
            sub_weapon_8_space = 0
        else:
            sub_weapon_8_space = float(sub_weapon_8_space_str)

        ####################################################################################
        # Weapon 9 calculations here                                                       #
        ####################################################################################
        sub_weapon_9_cost:        int = int(self.label_sub_weapon_9_cost.cget("text"))
        sub_weapon_9_weight:      int = int(self.label_sub_weapon_9_weight.cget("text"))
        sub_weapon_9_space_str: str = self.label_sub_weapon_9_space.cget("text")
        sub_weapon_9_ammo_cost_str: str = self.label_sub_weapon_9_ammo_cost.cget("text")
        try:
            sub_weapon_9_ammo_cost:   float = float(sub_weapon_9_ammo_cost_str)
        except ValueError:
            sub_weapon_9_ammo_cost = 0.0
        try:
            sub_weapon_9_ammo_weight: float = float(self.label_sub_weapon_9_ammo_weight.cget("text"))
        except ValueError:
            sub_weapon_9_ammo_weight = 0.0
        sub_weapon_9_space: float = 0.0
        if sub_weapon_9_space_str == "":
            sub_weapon_9_space = 0
        else:
            sub_weapon_9_space = float(sub_weapon_9_space_str)

        ####################################################################################
        # Weapon 10 calculations here                                                      #
        ####################################################################################
        sub_weapon_10_cost:        int = int(self.label_sub_weapon_10_cost.cget("text"))
        sub_weapon_10_weight:      int = int(self.label_sub_weapon_10_weight.cget("text"))
        sub_weapon_10_space_str: str = self.label_sub_weapon_10_space.cget("text")
        sub_weapon_10_ammo_cost_str: str = self.label_sub_weapon_10_ammo_cost.cget("text")
        try:
            sub_weapon_10_ammo_cost:   float = float(sub_weapon_10_ammo_cost_str)
        except ValueError:
            sub_weapon_10_ammo_cost = 0.0
        try:
            sub_weapon_10_ammo_weight: float = float(self.label_sub_weapon_10_ammo_weight.cget("text"))
        except ValueError:
            sub_weapon_10_ammo_weight = 0.0
        sub_weapon_10_space: float = 0.0
        if sub_weapon_10_space_str == "":
            sub_weapon_10_space = 0
        else:
            sub_weapon_10_space = float(sub_weapon_10_space_str)

        ####################################################################################
        # Accessories 1 calculations here                                                  #
        ####################################################################################
        accessories_1_cost:        float = float(self.label_accessories_1_cost.cget("text"))
        accessories_1_weight:      float = float(self.label_accessories_1_weight.cget("text"))
        accessories_1_space_str:   str = self.label_accessories_1_space.cget("text")
        if accessories_1_space_str == "":
            accessories_1_space = 0.0
        else:
            accessories_1_space = float(accessories_1_space_str)

        ####################################################################################
        # Accessories 2 calculations here                                                  #
        ####################################################################################
        accessories_2_cost:        float = float(self.label_accessories_2_cost.cget("text"))
        accessories_2_weight:      float = float(self.label_accessories_2_weight.cget("text"))
        accessories_2_space_str:   str = self.label_accessories_2_space.cget("text")
        if accessories_2_space_str == "":
            accessories_2_space = 0.0
        else:
            accessories_2_space = float(accessories_2_space_str)

        ####################################################################################
        # Accessories 2 calculations here                                                  #
        ####################################################################################
        accessories_2_cost:        float = float(self.label_accessories_2_cost.cget("text"))
        accessories_2_weight:      float = float(self.label_accessories_2_weight.cget("text"))
        accessories_2_space_str:   str = self.label_accessories_2_space.cget("text")
        if accessories_2_space_str == "":
            accessories_2_space = 0.0
        else:
            accessories_2_space = float(accessories_2_space_str)

        ####################################################################################
        # Accessories 3 calculations here                                                  #
        ####################################################################################
        accessories_3_cost:        float = float(self.label_accessories_3_cost.cget("text"))
        accessories_3_weight:      float = float(self.label_accessories_3_weight.cget("text"))
        accessories_3_space_str:   str = self.label_accessories_3_space.cget("text")
        if accessories_3_space_str == "":
            accessories_3_space = 0.0
        else:
            accessories_3_space = float(accessories_3_space_str)

        ####################################################################################
        # Accessories 4 calculations here                                                  #
        ####################################################################################
        accessories_4_cost:        float = float(self.label_accessories_4_cost.cget("text"))
        accessories_4_weight:      float = float(self.label_accessories_4_weight.cget("text"))
        accessories_4_space_str:   str = self.label_accessories_4_space.cget("text")
        if accessories_4_space_str == "":
            accessories_4_space = 0.0
        else:
            accessories_4_space = float(accessories_4_space_str)

        ####################################################################################
        # Accessories 5 calculations here                                                  #
        ####################################################################################
        accessories_5_cost:        float = float(self.label_accessories_5_cost.cget("text"))
        accessories_5_weight:      float = float(self.label_accessories_5_weight.cget("text"))
        accessories_5_space_str:   str = self.label_accessories_5_space.cget("text")
        if accessories_5_space_str == "":
            accessories_5_space = 0.0
        else:
            accessories_5_space = float(accessories_5_space_str)

        ####################################################################################
        # Accessories 6 calculations here                                                  #
        ####################################################################################
        accessories_6_cost:        float = float(self.label_accessories_6_cost.cget("text"))
        accessories_6_weight:      float = float(self.label_accessories_6_weight.cget("text"))
        accessories_6_space_str:   str = self.label_accessories_6_space.cget("text")
        if accessories_6_space_str == "":
            accessories_6_space = 0.0
        else:
            accessories_6_space = float(accessories_6_space_str)

        ####################################################################################
        # Accessories 7 calculations here                                                  #
        ####################################################################################
        accessories_7_cost:        float = float(self.label_accessories_7_cost.cget("text"))
        accessories_7_weight:      float = float(self.label_accessories_7_weight.cget("text"))
        accessories_7_space_str:   str = self.label_accessories_7_space.cget("text")
        if accessories_7_space_str == "":
            accessories_7_space = 0.0
        else:
            accessories_7_space = float(accessories_7_space_str)

        ####################################################################################
        # Accessories 8 calculations here                                                  #
        ####################################################################################
        accessories_8_cost:        float = float(self.label_accessories_8_cost.cget("text"))
        accessories_8_weight:      float = float(self.label_accessories_8_weight.cget("text"))
        accessories_8_space_str:   str = self.label_accessories_8_space.cget("text")
        if accessories_8_space_str == "":
            accessories_8_space = 0.0
        else:
            accessories_8_space = float(accessories_8_space_str)

        ####################################################################################
        # Accessories 9 calculations here                                                  #
        ####################################################################################
        accessories_9_cost:        float = float(self.label_accessories_9_cost.cget("text"))
        accessories_9_weight:      float = float(self.label_accessories_9_weight.cget("text"))
        accessories_9_space_str:   str = self.label_accessories_9_space.cget("text")
        if accessories_9_space_str == "":
            accessories_9_space = 0.0
        else:
            accessories_9_space = float(accessories_9_space_str)

        ####################################################################################
        # Accessories 10 calculations here                                                 #
        ####################################################################################
        accessories_10_cost:        float = float(self.label_accessories_10_cost.cget("text"))
        accessories_10_weight:      float = float(self.label_accessories_10_weight.cget("text"))
        accessories_10_space_str:   str = self.label_accessories_10_space.cget("text")
        if accessories_10_space_str == "":
            accessories_10_space = 0.0
        else:
            accessories_10_space = float(accessories_10_space_str)

        ####################################################################################
        # Accessories 11 calculations here                                                 #
        ####################################################################################
        accessories_11_cost:        float = float(self.label_accessories_11_cost.cget("text"))
        accessories_11_weight:      float = float(self.label_accessories_11_weight.cget("text"))
        accessories_11_space_str:   str = self.label_accessories_11_space.cget("text")
        if accessories_11_space_str == "":
            accessories_11_space = 0.0
        else:
            accessories_11_space = float(accessories_11_space_str)

        ####################################################################################
        # Accessories 12 calculations here                                                 #
        ####################################################################################
        accessories_12_cost:        float = float(self.label_accessories_12_cost.cget("text"))
        accessories_12_weight:      float = float(self.label_accessories_12_weight.cget("text"))
        accessories_12_space_str:   str = self.label_accessories_12_space.cget("text")
        if accessories_12_space_str == "":
            accessories_12_space = 0.0
        else:
            accessories_12_space = float(accessories_12_space_str)

        ####################################################################################
        # Accessories 13 calculations here                                                 #
        ####################################################################################
        accessories_13_cost:        float = float(self.label_accessories_13_cost.cget("text"))
        accessories_13_weight:      float = float(self.label_accessories_13_weight.cget("text"))
        accessories_13_space_str:   str = self.label_accessories_13_space.cget("text")
        if accessories_13_space_str == "":
            accessories_13_space = 0.0
        else:
            accessories_13_space = float(accessories_13_space_str)

        ####################################################################################
        # Accessories 14 calculations here                                                 #
        ####################################################################################
        accessories_14_cost:        float = float(self.label_accessories_14_cost.cget("text"))
        accessories_14_weight:      float = float(self.label_accessories_14_weight.cget("text"))
        accessories_14_space_str:   str = self.label_accessories_14_space.cget("text")
        if accessories_14_space_str == "":
            accessories_14_space = 0.0
        else:
            accessories_14_space = float(accessories_14_space_str)

        ####################################################################################
        # Accessories 15 calculations here                                                 #
        ####################################################################################
        accessories_15_cost:        float = float(self.label_accessories_15_cost.cget("text"))
        accessories_15_weight:      float = float(self.label_accessories_15_weight.cget("text"))
        accessories_15_space_str:   str = self.label_accessories_15_space.cget("text")
        if accessories_15_space_str == "":
            accessories_15_space = 0.0
        else:
            accessories_15_space = float(accessories_15_space_str)

        ####################################################################################
        # Accessories 16 calculations here                                                 #
        ####################################################################################
        accessories_16_cost:        float = float(self.label_accessories_16_cost.cget("text"))
        accessories_16_weight:      float = float(self.label_accessories_16_weight.cget("text"))
        accessories_16_space_str:   str = self.label_accessories_16_space.cget("text")
        if accessories_16_space_str == "":
            accessories_16_space = 0.0
        else:
            accessories_16_space = float(accessories_16_space_str)

        ####################################################################################
        # Accessories 17 calculations here                                                 #
        ####################################################################################
        accessories_17_cost:        float = float(self.label_accessories_17_cost.cget("text"))
        accessories_17_weight:      float = float(self.label_accessories_17_weight.cget("text"))
        accessories_17_space_str:   str = self.label_accessories_17_space.cget("text")
        if accessories_17_space_str == "":
            accessories_17_space = 0.0
        else:
            accessories_17_space = float(accessories_17_space_str)

        ####################################################################################
        # Accessories 18 calculations here                                                 #
        ####################################################################################
        accessories_18_cost:        float = float(self.label_accessories_18_cost.cget("text"))
        accessories_18_weight:      float = float(self.label_accessories_18_weight.cget("text"))
        accessories_18_space_str:   str = self.label_accessories_18_space.cget("text")
        if accessories_18_space_str == "":
            accessories_18_space = 0.0
        else:
            accessories_18_space = float(accessories_18_space_str)

        ####################################################################################
        # Accessories 19 calculations here                                                 #
        ####################################################################################
        accessories_19_cost:        float = float(self.label_accessories_19_cost.cget("text"))
        accessories_19_weight:      float = float(self.label_accessories_19_weight.cget("text"))
        accessories_19_space_str:   str = self.label_accessories_19_space.cget("text")
        if accessories_19_space_str == "":
            accessories_19_space = 0.0
        else:
            accessories_19_space = float(accessories_19_space_str)

        ####################################################################################
        # Accessories 20 calculations here                                                 #
        ####################################################################################
        accessories_20_cost:        float = float(self.label_accessories_20_cost.cget("text"))
        accessories_20_weight:      float = float(self.label_accessories_20_weight.cget("text"))
        accessories_20_space_str:   str = self.label_accessories_20_space.cget("text")
        if accessories_20_space_str == "":
            accessories_20_space = 0.0
        else:
            accessories_20_space = float(accessories_20_space_str)

        ####################################################################################
        # Accessories 21 calculations here                                                 #
        ####################################################################################
        accessories_21_cost:        float = float(self.label_accessories_21_cost.cget("text"))
        accessories_21_weight:      float = float(self.label_accessories_21_weight.cget("text"))
        accessories_21_space_str:   str = self.label_accessories_21_space.cget("text")
        if accessories_21_space_str == "":
            accessories_21_space = 0.0
        else:
            accessories_21_space = float(accessories_21_space_str)

        ####################################################################################
        # Accessories 22 calculations here                                                 #
        ####################################################################################
        accessories_22_cost:        float = float(self.label_accessories_22_cost.cget("text"))
        accessories_22_weight:      float = float(self.label_accessories_22_weight.cget("text"))
        accessories_22_space_str:   str = self.label_accessories_22_space.cget("text")
        if accessories_22_space_str == "":
            accessories_22_space = 0.0
        else:
            accessories_22_space = float(accessories_22_space_str)

        ####################################################################################
        # Accessories 23 calculations here                                                 #
        ####################################################################################
        accessories_23_cost:        float = float(self.label_accessories_23_cost.cget("text"))
        accessories_23_weight:      float = float(self.label_accessories_23_weight.cget("text"))
        accessories_23_space_str:   str = self.label_accessories_23_space.cget("text")
        if accessories_23_space_str == "":
            accessories_23_space = 0.0
        else:
            accessories_23_space = float(accessories_23_space_str)

        ####################################################################################
        # Accessories 24 calculations here                                                 #
        ####################################################################################
        accessories_24_cost:        float = float(self.label_accessories_24_cost.cget("text"))
        accessories_24_weight:      float = float(self.label_accessories_24_weight.cget("text"))
        accessories_24_space_str:   str = self.label_accessories_24_space.cget("text")
        if accessories_24_space_str == "":
            accessories_24_space = 0.0
        else:
            accessories_24_space = float(accessories_24_space_str)

        ####################################################################################
        # Accessories 25 calculations here                                                 #
        ####################################################################################
        accessories_25_cost:        float = float(self.label_accessories_25_cost.cget("text"))
        accessories_25_weight:      float = float(self.label_accessories_25_weight.cget("text"))
        accessories_25_space_str:   str = self.label_accessories_25_space.cget("text")
        if accessories_25_space_str == "":
            accessories_25_space = 0.0
        else:
            accessories_25_space = float(accessories_25_space_str)

        ####################################################################################
        # Accessories 26 calculations here                                                 #
        ####################################################################################
        accessories_26_cost:        float = float(self.label_accessories_26_cost.cget("text"))
        accessories_26_weight:      float = float(self.label_accessories_26_weight.cget("text"))
        accessories_26_space_str:   str = self.label_accessories_26_space.cget("text")
        if accessories_26_space_str == "":
            accessories_26_space = 0.0
        else:
            accessories_26_space = float(accessories_26_space_str)

        ####################################################################################
        # Accessories 27 calculations here                                                 #
        ####################################################################################
        accessories_27_cost:        float = float(self.label_accessories_27_cost.cget("text"))
        accessories_27_weight:      float = float(self.label_accessories_27_weight.cget("text"))
        accessories_27_space_str:   str = self.label_accessories_27_space.cget("text")
        if accessories_27_space_str == "":
            accessories_27_space = 0.0
        else:
            accessories_27_space = float(accessories_27_space_str)

        ####################################################################################
        # Accessories 28 calculations here                                                 #
        ####################################################################################
        accessories_28_cost:        float = float(self.label_accessories_28_cost.cget("text"))
        accessories_28_weight:      float = float(self.label_accessories_28_weight.cget("text"))
        accessories_28_space_str:   str = self.label_accessories_28_space.cget("text")
        if accessories_28_space_str == "":
            accessories_28_space = 0.0
        else:
            accessories_28_space = float(accessories_28_space_str)

        ####################################################################################
        # Accessories 29 calculations here                                                 #
        ####################################################################################
        accessories_29_cost:        float = float(self.label_accessories_29_cost.cget("text"))
        accessories_29_weight:      float = float(self.label_accessories_29_weight.cget("text"))
        accessories_29_space_str:   str = self.label_accessories_29_space.cget("text")
        if accessories_29_space_str == "":
            accessories_29_space = 0.0
        else:
            accessories_29_space = float(accessories_29_space_str)

        ####################################################################################
        # Accessories 30 calculations here                                                 #
        ####################################################################################
        accessories_30_cost:        float = float(self.label_accessories_30_cost.cget("text"))
        accessories_30_weight:      float = float(self.label_accessories_30_weight.cget("text"))
        accessories_30_space_str:   str = self.label_accessories_30_space.cget("text")
        if accessories_30_space_str == "":
            accessories_30_space = 0.0
        else:
            accessories_30_space = float(accessories_30_space_str)

        component_armor_1_cost:   float = float(self.label_component_armor_1_cost.cget("text"))
        component_armor_1_weight: float = float(self.label_component_armor_1_weight.cget("text"))
        component_armor_1_spaces: float = float(self.label_component_armor_1_space.cget("text"))

        component_armor_2_cost:   float = float(self.label_component_armor_2_cost.cget("text"))
        component_armor_2_weight: float = float(self.label_component_armor_2_weight.cget("text"))
        component_armor_2_spaces: float = float(self.label_component_armor_2_space.cget("text"))

        component_armor_3_cost:   float = float(self.label_component_armor_3_cost.cget("text"))
        component_armor_3_weight: float = float(self.label_component_armor_3_weight.cget("text"))
        component_armor_3_spaces: float = float(self.label_component_armor_3_space.cget("text"))

        component_armor_4_cost:   float = float(self.label_component_armor_4_cost.cget("text"))
        component_armor_4_weight: float = float(self.label_component_armor_4_weight.cget("text"))
        component_armor_4_spaces: float = float(self.label_component_armor_4_space.cget("text"))

        component_armor_5_cost:   float = float(self.label_component_armor_5_cost.cget("text"))
        component_armor_5_weight: float = float(self.label_component_armor_5_weight.cget("text"))
        component_armor_5_spaces: float = float(self.label_component_armor_5_space.cget("text"))

        rocket_booster_1_cost:   int = int(self.label_rocket_booster_1_cost.cget("text"))
        rocket_booster_1_weight: int = int(self.label_rocket_booster_1_weight.cget("text"))
        rocket_booster_1_space:  int = int(self.label_rocket_booster_1_space.cget("text"))

        rocket_booster_2_cost:   int = int(self.label_rocket_booster_2_cost.cget("text"))
        rocket_booster_2_weight: int = int(self.label_rocket_booster_2_weight.cget("text"))
        rocket_booster_2_space:  int = int(self.label_rocket_booster_2_space.cget("text"))

        rocket_booster_3_cost:   int = int(self.label_rocket_booster_3_cost.cget("text"))
        rocket_booster_3_weight: int = int(self.label_rocket_booster_3_weight.cget("text"))
        rocket_booster_3_space:  int = int(self.label_rocket_booster_3_space.cget("text"))

        rocket_booster_4_cost:   int = int(self.label_rocket_booster_4_cost.cget("text"))
        rocket_booster_4_weight: int = int(self.label_rocket_booster_4_weight.cget("text"))
        rocket_booster_4_space:  int = int(self.label_rocket_booster_4_space.cget("text"))

        rocket_booster_5_cost:   int = int(self.label_rocket_booster_5_cost.cget("text"))
        rocket_booster_5_weight: int = int(self.label_rocket_booster_5_weight.cget("text"))
        rocket_booster_5_space:  int = int(self.label_rocket_booster_5_space.cget("text"))

        personal_equipment_1_cost: int = int(self.label_personal_equipment_1_cost.cget("text"))
        personal_equipment_1_weight: int = int(self.label_personal_equipment_1_weight.cget("text"))

        personal_equipment_2_cost: int = int(self.label_personal_equipment_2_cost.cget("text"))
        personal_equipment_2_weight: int = int(self.label_personal_equipment_2_weight.cget("text"))

        personal_equipment_3_cost: int = int(self.label_personal_equipment_3_cost.cget("text"))
        personal_equipment_3_weight: int = int(self.label_personal_equipment_3_weight.cget("text"))

        personal_equipment_4_cost: int = int(self.label_personal_equipment_4_cost.cget("text"))
        personal_equipment_4_weight: int = int(self.label_personal_equipment_4_weight.cget("text"))

        personal_equipment_5_cost: int = int(self.label_personal_equipment_5_cost.cget("text"))
        personal_equipment_5_weight: int = int(self.label_personal_equipment_5_weight.cget("text"))

        personal_equipment_6_cost: int = int(self.label_personal_equipment_6_cost.cget("text"))
        personal_equipment_6_weight: int = int(self.label_personal_equipment_6_weight.cget("text"))

        personal_equipment_7_cost: int = int(self.label_personal_equipment_7_cost.cget("text"))
        personal_equipment_7_weight: int = int(self.label_personal_equipment_7_weight.cget("text"))

        personal_equipment_8_cost: int = int(self.label_personal_equipment_8_cost.cget("text"))
        personal_equipment_8_weight: int = int(self.label_personal_equipment_8_weight.cget("text"))

        personal_equipment_9_cost: int = int(self.label_personal_equipment_9_cost.cget("text"))
        personal_equipment_9_weight: int = int(self.label_personal_equipment_9_weight.cget("text"))

        personal_equipment_10_cost: int = int(self.label_personal_equipment_10_cost.cget("text"))
        personal_equipment_10_weight: int = int(self.label_personal_equipment_10_weight.cget("text"))

        cost_list: list = []
        cost_list.append(body_cost)
        cost_list.append(modificiation_cost)
        cost_list.append(chassis_cost)
        cost_list.append(six_wheel_chassis_cost)
        cost_list.append(suspension_cost)
        cost_list.append(engine_cost)
        cost_list.append(engine_mod_cost)
        #cost_list.append(engine_carb_cost)
        cost_list.append(gas_tank_cost)
        cost_list.append(front_tire_cost)
        cost_list.append(rear_tire_cost)
        cost_list.append(outer_armor_cost)
        cost_list.append(inner_armor_cost)
        cost_list.append(sub_weapon_1_cost)
        cost_list.append(sub_weapon_1_ammo_cost)
        cost_list.append(sub_weapon_2_cost)
        cost_list.append(sub_weapon_2_ammo_cost)
        cost_list.append(sub_weapon_3_cost)
        cost_list.append(sub_weapon_3_ammo_cost)
        cost_list.append(sub_weapon_4_cost)
        cost_list.append(sub_weapon_4_ammo_cost)
        cost_list.append(sub_weapon_5_cost)
        cost_list.append(sub_weapon_5_ammo_cost)
        cost_list.append(sub_weapon_6_cost)
        cost_list.append(sub_weapon_6_ammo_cost)
        cost_list.append(sub_weapon_7_cost)
        cost_list.append(sub_weapon_7_ammo_cost)
        cost_list.append(sub_weapon_8_cost)
        cost_list.append(sub_weapon_8_ammo_cost)
        cost_list.append(sub_weapon_9_cost)
        cost_list.append(sub_weapon_9_ammo_cost)
        cost_list.append(sub_weapon_10_cost)
        cost_list.append(sub_weapon_10_ammo_cost)
        cost_list.append(accessories_1_cost)
        cost_list.append(accessories_2_cost)
        cost_list.append(accessories_3_cost)
        cost_list.append(accessories_4_cost)
        cost_list.append(accessories_5_cost)
        cost_list.append(accessories_6_cost)
        cost_list.append(accessories_7_cost)
        cost_list.append(accessories_8_cost)
        cost_list.append(accessories_9_cost)
        cost_list.append(accessories_10_cost)
        cost_list.append(accessories_11_cost)
        cost_list.append(accessories_12_cost)
        cost_list.append(accessories_13_cost)
        cost_list.append(accessories_14_cost)
        cost_list.append(accessories_15_cost)
        cost_list.append(accessories_16_cost)
        cost_list.append(accessories_17_cost)
        cost_list.append(accessories_18_cost)
        cost_list.append(accessories_19_cost)
        cost_list.append(accessories_20_cost)
        cost_list.append(accessories_21_cost)
        cost_list.append(accessories_22_cost)
        cost_list.append(accessories_23_cost)
        cost_list.append(accessories_24_cost)
        cost_list.append(accessories_25_cost)
        cost_list.append(accessories_26_cost)
        cost_list.append(accessories_27_cost)
        cost_list.append(accessories_28_cost)
        cost_list.append(accessories_29_cost)
        cost_list.append(accessories_30_cost)
        cost_list.append(component_armor_1_cost)
        cost_list.append(component_armor_2_cost)
        cost_list.append(component_armor_3_cost)
        cost_list.append(component_armor_4_cost)
        cost_list.append(component_armor_5_cost)
        cost_list.append(rocket_booster_1_cost)
        cost_list.append(rocket_booster_2_cost)
        cost_list.append(rocket_booster_3_cost)
        cost_list.append(rocket_booster_4_cost)
        cost_list.append(rocket_booster_5_cost)
        cost_list.append(personal_equipment_1_cost)
        cost_list.append(personal_equipment_2_cost)
        cost_list.append(personal_equipment_3_cost)
        cost_list.append(personal_equipment_4_cost)
        cost_list.append(personal_equipment_5_cost)
        cost_list.append(personal_equipment_6_cost)
        cost_list.append(personal_equipment_7_cost)
        cost_list.append(personal_equipment_8_cost)
        cost_list.append(personal_equipment_9_cost)
        cost_list.append(personal_equipment_10_cost)

        weight_list: list = []
        weight_list.append(body_weight)
        weight_list.append(modificiation_weight)
        weight_list.append(engine_weight)
        weight_list.append(engine_mod_weight)
        weight_list.append(gas_tank_weight)
        weight_list.append(front_tire_weight)
        weight_list.append(rear_tire_weight)
        weight_list.append(outer_armor_weight)
        weight_list.append(inner_armor_weight)
        weight_list.append(driver_gunner_weight)
        #weight_list.append(passenger_weight)
        weight_list.append(sub_weapon_1_weight)
        weight_list.append(sub_weapon_1_ammo_weight)
        weight_list.append(sub_weapon_2_weight)
        weight_list.append(sub_weapon_2_ammo_weight)
        weight_list.append(sub_weapon_3_weight)
        weight_list.append(sub_weapon_3_ammo_weight)
        weight_list.append(sub_weapon_4_weight)
        weight_list.append(sub_weapon_4_ammo_weight)
        weight_list.append(sub_weapon_5_weight)
        weight_list.append(sub_weapon_5_ammo_weight)
        weight_list.append(sub_weapon_6_weight)
        weight_list.append(sub_weapon_6_ammo_weight)
        weight_list.append(sub_weapon_7_weight)
        weight_list.append(sub_weapon_7_ammo_weight)
        weight_list.append(sub_weapon_8_weight)
        weight_list.append(sub_weapon_8_ammo_weight)
        weight_list.append(sub_weapon_9_weight)
        weight_list.append(sub_weapon_9_ammo_weight)
        weight_list.append(sub_weapon_10_weight)
        weight_list.append(sub_weapon_10_ammo_weight)
        weight_list.append(accessories_1_weight)
        weight_list.append(accessories_2_weight)
        weight_list.append(accessories_3_weight)
        weight_list.append(accessories_4_weight)
        weight_list.append(accessories_5_weight)
        weight_list.append(accessories_6_weight)
        weight_list.append(accessories_7_weight)
        weight_list.append(accessories_8_weight)
        weight_list.append(accessories_9_weight)
        weight_list.append(accessories_10_weight)
        weight_list.append(accessories_11_weight)
        weight_list.append(accessories_12_weight)
        weight_list.append(accessories_13_weight)
        weight_list.append(accessories_14_weight)
        weight_list.append(accessories_15_weight)
        weight_list.append(accessories_16_weight)
        weight_list.append(accessories_17_weight)
        weight_list.append(accessories_18_weight)
        weight_list.append(accessories_19_weight)
        weight_list.append(accessories_20_weight)
        weight_list.append(accessories_21_weight)
        weight_list.append(accessories_22_weight)
        weight_list.append(accessories_23_weight)
        weight_list.append(accessories_24_weight)
        weight_list.append(accessories_25_weight)
        weight_list.append(accessories_26_weight)
        weight_list.append(accessories_27_weight)
        weight_list.append(accessories_28_weight)
        weight_list.append(accessories_29_weight)
        weight_list.append(accessories_30_weight)
        weight_list.append(component_armor_1_weight)
        weight_list.append(component_armor_2_weight)
        weight_list.append(component_armor_3_weight)
        weight_list.append(component_armor_4_weight)
        weight_list.append(component_armor_5_weight)
        weight_list.append(rocket_booster_1_weight)
        weight_list.append(rocket_booster_2_weight)
        weight_list.append(rocket_booster_3_weight)
        weight_list.append(rocket_booster_4_weight)
        weight_list.append(rocket_booster_5_weight)
        weight_list.append(personal_equipment_1_weight)
        weight_list.append(personal_equipment_2_weight)
        weight_list.append(personal_equipment_3_weight)
        weight_list.append(personal_equipment_4_weight)
        weight_list.append(personal_equipment_5_weight)
        weight_list.append(personal_equipment_6_weight)
        weight_list.append(personal_equipment_7_weight)
        weight_list.append(personal_equipment_8_weight)
        weight_list.append(personal_equipment_9_weight)
        weight_list.append(personal_equipment_10_weight)

        space_list: list = []
        space_list.append(modificiation_space)
        space_list.append(engine_space)
        space_list.append(engine_mod_space)
        space_list.append(gas_tank_space)
        space_list.append(driver_gunner_space)
        #space_list.append(passenger_space)
        space_list.append(sub_weapon_1_space)
        space_list.append(sub_weapon_2_space)
        space_list.append(sub_weapon_3_space)
        space_list.append(sub_weapon_4_space)
        space_list.append(sub_weapon_5_space)
        space_list.append(sub_weapon_6_space)
        space_list.append(sub_weapon_7_space)
        space_list.append(sub_weapon_8_space)
        space_list.append(sub_weapon_9_space)
        space_list.append(sub_weapon_10_space)
        space_list.append(accessories_1_space)
        space_list.append(accessories_2_space)
        space_list.append(accessories_3_space)
        space_list.append(accessories_4_space)
        space_list.append(accessories_5_space)
        space_list.append(accessories_6_space)
        space_list.append(accessories_7_space)
        space_list.append(accessories_8_space)
        space_list.append(accessories_9_space)
        space_list.append(accessories_10_space)
        space_list.append(accessories_11_space)
        space_list.append(accessories_12_space)
        space_list.append(accessories_13_space)
        space_list.append(accessories_14_space)
        space_list.append(accessories_15_space)
        space_list.append(accessories_16_space)
        space_list.append(accessories_17_space)
        space_list.append(accessories_18_space)
        space_list.append(accessories_19_space)
        space_list.append(accessories_20_space)
        space_list.append(accessories_21_space)
        space_list.append(accessories_22_space)
        space_list.append(accessories_23_space)
        space_list.append(accessories_24_space)
        space_list.append(accessories_25_space)
        space_list.append(accessories_26_space)
        space_list.append(accessories_27_space)
        space_list.append(accessories_28_space)
        space_list.append(accessories_29_space)
        space_list.append(accessories_30_space)
        space_list.append(component_armor_1_spaces)
        space_list.append(component_armor_2_spaces)
        space_list.append(component_armor_3_spaces)
        space_list.append(component_armor_4_spaces)
        space_list.append(component_armor_5_spaces)
        space_list.append(rocket_booster_1_space)
        space_list.append(rocket_booster_2_space)
        space_list.append(rocket_booster_3_space)
        space_list.append(rocket_booster_4_space)
        space_list.append(rocket_booster_5_space)

        total_cost:   int = sum(cost_list)
        total_weight: int = sum(weight_list)
        total_spaces: int = body_spaces - sum(space_list)
        total_power_factors: int = engine_power_factors + engine_mod_power_factors# + engine_carb_power_factors
        total_mpg: int = engine_mpg + engine_mod_mpg

        top_speed: int = 0
        accel: int = 0
        max_accel: int = 0
        if engine_type == "Gas":
            top_speed = (240 * total_power_factors) / (total_power_factors + total_weight)
        elif engine_type == "Electric":
            top_speed = (360 * total_power_factors) / (total_power_factors + total_weight)
        else:
            top_speed = 0
        if "Streamlined" in self.selected_modifications.get():
            top_speed = top_speed * 1.1 #10% increase
        top_speed = math.floor(top_speed / 2.5) * 2.5 # round to the nearest 2.5 value

        max_weight_top_speed: int = 0
        max_weight = int(self.label_max_weight.cget("text"))
        if engine_type == "Gas":
            max_weight_top_speed = (240 * total_power_factors) / (total_power_factors + max_weight)
        elif engine_type == "Electric":
            max_weight_top_speed = (360 * total_power_factors) / (total_power_factors + max_weight)
        else:
            max_weight_top_speed = 0
        if "Streamlined" in self.selected_modifications.get():
            max_weight_top_speed = max_weight_top_speed * 1.1 #10% increase
        max_weight_top_speed = math.floor(max_weight_top_speed / 2.5) * 2.5 # round to the nearest 2.5 value

        if total_power_factors >= max_weight:
            max_accel = 15 + engine_mod_accel
        elif total_power_factors * 2 >= max_weight:
            max_accel = 10 + engine_mod_accel
        elif total_power_factors * 3 >= max_weight:
            max_accel = 5 + engine_mod_accel
        else:
            max_accel = 0

        if total_power_factors >= total_weight:
            accel = 15 + engine_mod_accel
        elif total_power_factors * 2 >= total_weight:
            accel = 10 + engine_mod_accel
        elif total_power_factors * 3 >= total_weight:
            accel = 5 + engine_mod_accel
        else:
            accel = 0

        gas_gallon_qty = self.var_gas_gallon_qty.get()
        mile_range: int = total_mpg * gas_gallon_qty
        self.label_range.configure(text=str(mile_range))

        #run decimal conversions here
        self.label_total_cost.configure(text=self.float_to_str(total_cost))
        self.label_total_weight.configure(text=self.float_to_str(total_weight))
        self.label_total_space.configure(text=self.float_to_str(total_spaces))
        self.label_final_engine_mpg.configure(text=self.float_to_str(total_mpg))
        self.label_total_power_factors.configure(text=self.float_to_str(total_power_factors))
        self.label_top_speed.configure(text=self.float_to_str(top_speed))
        self.label_max_weight_top_speed.configure(text=self.float_to_str(max_weight_top_speed))
        self.label_accel.configure(text=self.float_to_str(accel))
        self.label_max_accel.configure(text=self.float_to_str(max_accel))

        facings_text: str = self.facing_compilations()
        self.label_valid_spaces.configure(text=facings_text)
        weight_text: str = ""
        if total_weight > max_weight:
            weight_text = "DESIGN OVER WEIGHT"
        self.label_valid_weight.configure(text=weight_text)

    def float_to_str(self, input: float) -> str:
        """Given a float input, determine the best format for display the value as a string"""
        return_string: str = ""
        if type(input) is str: #this should be a float, but whatever
            return_string = input
        else:
            if input.is_integer():
                return_string = str(int(input))
            else:
                return_string = f"{input:.2f}"
                return_number = float(return_string)
                if return_number == 0.01:
                    return_number = 0
                if return_number.is_integer():
                    return_string = str(int(return_number))
        return return_string
    
    def engine_mods_recalc(self):
        engine_cost = int(self.label_engine_cost.cget("text"))
        engine_power_factors = int(self.label_engine_pf.cget("text"))
        engine_weight = int(self.label_engine_weight.cget("text"))
        engine_dp = int(self.label_engine_dp.cget("text"))
        engine_mod_cost:          float = 0.0
        engine_mod_weight:        float = 0.0
        engine_mod_space:         float = 0.0
        engine_mod_power_factors: float = 0.0
        engine_mod_mpg:           float = 0.0
        engine_mod_accel:         float = 0.0
        engine_mod_dp:            float = 0.0
        total_engine_mod_pf:      float = 0.0
        total_engine_mod_cost:    float = 0.0

        if self.var_engine_gas_super_charger.get() == 1:
            engine_mod_space = engine_mod_space + 1
            engine_mod_weight = engine_weight * 0.2
            engine_mod_power_factors = engine_power_factors * 0.4
            engine_mod_cost = 3000 + engine_mod_power_factors
            total_engine_mod_cost = total_engine_mod_cost + engine_mod_cost
            total_engine_mod_pf = total_engine_mod_pf + engine_mod_power_factors
            engine_mod_accel = engine_mod_accel + 5
            engine_mod_mpg = engine_mod_mpg - 1
        if self.var_engine_gas_vp_turbo.get() == 1:
            engine_mod_power_factors = engine_power_factors * 0.25
            engine_mod_cost = 2000 + engine_mod_power_factors
            total_engine_mod_pf = total_engine_mod_pf + engine_mod_power_factors
            engine_mod_accel = engine_mod_accel + 5
            total_engine_mod_cost = total_engine_mod_cost + engine_mod_cost
        if self.var_engine_gas_tube_headers.get() == 1:
            engine_mod_cost = engine_cost * 0.2
            engine_mod_power_factors = engine_power_factors * 0.05
            total_engine_mod_pf = total_engine_mod_pf + engine_mod_power_factors
            total_engine_mod_cost = total_engine_mod_cost + engine_mod_cost
        if self.var_engine_gas_blue_print.get() == 1:
            engine_mod_cost = engine_cost * 0.5
            engine_mod_power_factors = engine_power_factors * 0.1
            total_engine_mod_pf = total_engine_mod_pf + engine_mod_power_factors
            total_engine_mod_cost = total_engine_mod_cost + engine_mod_cost
        if self.var_engine_gas_turbo.get() == 1:
            engine_mod_power_factors = engine_power_factors * 0.25
            engine_mod_cost = 1000 + engine_mod_power_factors
            total_engine_mod_pf = total_engine_mod_pf + engine_mod_power_factors
            engine_mod_accel = engine_mod_accel + 5
            total_engine_mod_cost = total_engine_mod_cost + engine_mod_cost
        if self.var_engine_electric_super_conductors.get() == 1:
            engine_mod_cost = engine_cost * 0.5
            total_engine_mod_pf = total_engine_mod_pf + engine_power_factors * 0.1
            total_engine_mod_cost = total_engine_mod_cost + engine_mod_cost
        if self.var_engine_electric_platnium_catalysts.get() == 1:
            engine_mod_cost = engine_cost * 0.2
            total_engine_mod_pf = total_engine_mod_pf + engine_power_factors * 0.05
            total_engine_mod_cost = total_engine_mod_cost + engine_mod_cost
        if self.var_engine_electric_extra_power_cells.get() == 1:
            engine_mod_cost = engine_cost * 0.25
            engine_mod_weight = engine_weight * 0.25
            engine_mod_dp = engine_mod_dp + 0.1
            engine_mod_space = engine_mod_space + 0.1
            total_engine_mod_cost = total_engine_mod_cost + engine_mod_cost

        engine_mod_dp = engine_mod_dp * engine_dp

        return int(total_engine_mod_cost), int(engine_mod_weight), int(engine_mod_space), int(total_engine_mod_pf), int(engine_mod_mpg), int(engine_mod_dp), int(engine_mod_accel)

    def on_button_gas_qty_up(self, *args):
        gas_gallon_qty = self.var_gas_gallon_qty.get()
        gas_gallon_qty = gas_gallon_qty + 1
        self.var_gas_gallon_qty.set(value=gas_gallon_qty)

        if gas_gallon_qty > 0:
            gas_tank_cost = int(self.label_hidden_gas_tank_cost.cget("text"))
            gas_tank_weight = int(self.label_hidden_gas_tank_weight.cget("text"))
            gas_tank_dp = int(self.label_hidden_gas_tank_dp.cget("text"))
            gas_tank_cost = (gas_tank_cost + 40) * gas_gallon_qty
            gas_tank_weight = (gas_tank_weight + 5) * gas_gallon_qty
            self.label_gas_tank_cost.configure(text=str(gas_tank_cost))
            self.label_gas_tank_weight.configure(text=str(gas_tank_weight))
            self.label_gas_tank_dp.configure(text=str(gas_tank_dp))
        self.recalculate()

    def on_button_gas_qty_down(self, *args):
        gas_gallon_qty = self.var_gas_gallon_qty.get()
        gas_gallon_qty = max(gas_gallon_qty - 1, 0)
        self.var_gas_gallon_qty.set(value=gas_gallon_qty)

        if gas_gallon_qty > 0:
            gas_tank_cost = int(self.label_hidden_gas_tank_cost.cget("text"))
            gas_tank_weight = int(self.label_hidden_gas_tank_weight.cget("text"))
            gas_tank_dp = int(self.label_hidden_gas_tank_dp.cget("text"))
            gas_tank_cost = (gas_tank_cost + 40) * gas_gallon_qty
            gas_tank_weight = (gas_tank_weight + 5) * gas_gallon_qty
            self.label_gas_tank_cost.configure(text=str(gas_tank_cost))
            self.label_gas_tank_weight.configure(text=str(gas_tank_weight))
            self.label_gas_tank_dp.configure(text=str(gas_tank_dp))
        else:
            self.label_gas_tank_cost.configure(text=str(0))
            self.label_gas_tank_weight.configure(text=str(0))
            self.label_gas_tank_dp.configure(text=str(0))
        self.recalculate()

    def on_button_front_tire_qty_up(self, *args):
        front_tire_qty = self.var_front_tire_qty.get()
        front_tire_qty = front_tire_qty + 1
        self.var_front_tire_qty.set(value=front_tire_qty)
        #self.front_tire_adjustment()
        self.recalculate()

    def on_button_front_tire_qty_down(self, *args):
        front_tire_qty = self.var_front_tire_qty.get()
        front_tire_qty = max(front_tire_qty - 1, 0)
        self.var_front_tire_qty.set(value=front_tire_qty)
        #self.front_tire_adjustment()
        self.recalculate()

    def on_button_rear_tire_qty_up(self, *args):
        rear_tire_qty = self.var_rear_tire_qty.get()
        rear_tire_qty = rear_tire_qty + 1
        self.var_rear_tire_qty.set(value=rear_tire_qty)
        #self.rear_tire_adjustment()
        self.recalculate()

    def on_button_rear_tire_qty_down(self, *args):
        rear_tire_qty = self.var_rear_tire_qty.get()
        rear_tire_qty = max(rear_tire_qty - 1, 0)
        self.var_rear_tire_qty.set(value=rear_tire_qty)
        #self.rear_tire_adjustment()
        self.recalculate()

    def on_button_driver_gunner_qty_up(self, *args):
        driver_gunner_qty = self.var_driver_gunner_qty.get()
        driver_gunner_qty = driver_gunner_qty + 1
        self.var_driver_gunner_qty.set(value=driver_gunner_qty)

    def on_button_driver_gunner_qty_down(self, *args):
        driver_gunner_qty = self.var_driver_gunner_qty.get()
        driver_gunner_qty = max(driver_gunner_qty - 1, 0)
        self.var_driver_gunner_qty.set(value=driver_gunner_qty)

    def on_button_passenger_qty_up(self, *args):
        passenger_qty = self.var_passenger_qty.get()
        passenger_qty = passenger_qty + 1
        self.var_passenger_qty.set(value=passenger_qty)

    def on_button_passenger_qty_down(self, *args):
        passenger_qty = self.var_passenger_qty.get()
        passenger_qty = max(passenger_qty - 1, 0)
        self.var_passenger_qty.set(value=passenger_qty)

    def on_button_outer_armor_qty_up(self, *args):
        body_armor_cost:    float = float(self.label_hidden_body_armor_cost.cget("text")) #this could be a decimal
        body_armor_weight:  float = float(self.label_hidden_body_armor_weight.cget("text")) #this could be a decimal
        outer_armor_cost:   float = float(self.label_hidden_outer_armor_cost.cget("text"))
        sloped_armor_adjustment = self.var_sloped_armor.get()
        outer_armor_cost = outer_armor_cost + outer_armor_cost * sloped_armor_adjustment * 0.1
        outer_armor_weight: float = float(self.label_hidden_outer_armor_weight.cget("text"))
        outer_armor_qty: int = int(self.var_outer_armor_qty.get())
        outer_armor_qty = outer_armor_qty + 1
        self.var_outer_armor_qty.set(value=outer_armor_qty)
        total_armor_cost = outer_armor_cost * outer_armor_qty * body_armor_cost
        self.label_outer_armor_cost.configure(text=self.float_to_str(total_armor_cost))
        self.label_outer_armor_weight.configure(text=self.float_to_str(outer_armor_weight * outer_armor_qty * body_armor_weight))
        self.recalculate()

    def on_button_outer_armor_qty_dowm(self, *args):
        body_armor_cost:   float = float(self.label_hidden_body_armor_cost.cget("text")) #this could be a decimal
        body_armor_weight: float = float(self.label_hidden_body_armor_weight.cget("text")) #this could be a decimal
        outer_armor_cost:   float = float(self.label_hidden_outer_armor_cost.cget("text"))
        sloped_armor_adjustment = self.var_sloped_armor.get()
        outer_armor_cost = outer_armor_cost + outer_armor_cost * sloped_armor_adjustment * 0.1
        outer_armor_weight: float = float(self.label_hidden_outer_armor_weight.cget("text"))
        outer_armor_qty: int = int(self.var_outer_armor_qty.get())
        outer_armor_qty = max(outer_armor_qty - 1, 0)
        self.var_outer_armor_qty.set(value=outer_armor_qty)
        total_armor_cost = outer_armor_cost * outer_armor_qty * body_armor_cost
        self.label_outer_armor_cost.configure(text=self.float_to_str(total_armor_cost))
        self.label_outer_armor_weight.configure(text=self.float_to_str(outer_armor_weight * outer_armor_qty * body_armor_weight))
        self.recalculate()

    def on_button_inner_armor_qty_up(self, *args):
        body_armor_cost:   float = float(self.label_hidden_body_armor_cost.cget("text")) #this could be a decimal
        body_armor_weight: float = float(self.label_hidden_body_armor_weight.cget("text")) #this could be a decimal
        inner_armor_cost:   float = float(self.label_hidden_inner_armor_cost.cget("text"))
        sloped_armor_adjustment = self.var_sloped_armor.get()
        inner_armor_cost = inner_armor_cost + inner_armor_cost * sloped_armor_adjustment * 0.1
        inner_armor_weight: float = float(self.label_hidden_inner_armor_weight.cget("text"))
        inner_armor_qty = self.var_inner_armor_qty.get()
        inner_armor_qty = inner_armor_qty + 1
        self.var_inner_armor_qty.set(value=inner_armor_qty)
        total_armor_cost = inner_armor_cost * inner_armor_qty * body_armor_cost
        self.label_inner_armor_cost.configure(text=self.float_to_str(total_armor_cost))
        self.label_inner_armor_weight.configure(text=self.float_to_str(inner_armor_weight * inner_armor_qty * body_armor_weight))
        self.recalculate()

    def on_button_inner_armor_qty_dowm(self, *args):
        body_armor_cost:   float = float(self.label_hidden_body_armor_cost.cget("text")) #this could be a decimal
        body_armor_weight: float = float(self.label_hidden_body_armor_weight.cget("text")) #this could be a decimal
        inner_armor_cost:   float = float(self.label_hidden_inner_armor_cost.cget("text"))
        sloped_armor_adjustment = self.var_sloped_armor.get()
        inner_armor_cost = inner_armor_cost + inner_armor_cost * sloped_armor_adjustment * 0.1
        inner_armor_weight: float = float(self.label_hidden_inner_armor_weight.cget("text"))
        inner_armor_qty = self.var_inner_armor_qty.get()
        inner_armor_qty = max(inner_armor_qty - 1, 0)
        self.var_inner_armor_qty.set(value=inner_armor_qty)
        total_armor_cost = inner_armor_cost * inner_armor_qty * body_armor_cost
        self.label_inner_armor_cost.configure(text=self.float_to_str(total_armor_cost))
        self.label_inner_armor_weight.configure(text=self.float_to_str(inner_armor_weight * inner_armor_qty * body_armor_weight))
        self.recalculate()

    def front_tire_adjustment(self):
        front_tire_qty = self.var_front_tire_qty.get()
        if front_tire_qty > 0:
            tire_cost:   int = int(self.label_hidden_front_tire_cost.cget("text"))
            tire_weight: int = int(self.label_hidden_front_tire_weight.cget("text"))
            tire_dp:     int = int(self.label_hidden_front_tire_dp.cget("text"))

            hidden_body_cycle: int = self.hidden_body_cycle.cget("text")
            var_front_tire_steelbelting: int = self.var_front_tire_steelbelting.get()
            var_front_tire_radial:       int = self.var_front_tire_radial.get()
            var_front_tire_fireproof:    int = self.var_front_tire_fireproof.get()
            var_front_tire_offroad:      int = self.var_front_tire_offroad.get()
            var_front_tire_racing_slick: int = self.var_front_tire_racing_slick.get()
            if hidden_body_cycle == 1:
                tire_weight = tire_weight / 2
            tire_cost_adjustment: float = 0.0
            tire_weight_adjustment: float = 0.0
            tire_dp_adjustment: float = 0.0
            tire_dp_adjustment_raw: int = 0
            #radials only add HC if all four tires are radials.  Slicks add +1 for each matched pair
            tire_hc_adjustment = self.calculate_tire_hc_adjustment(front=True)
            self.label_hidden_front_tire_hc.configure(text=str(tire_hc_adjustment))

            self.hc_addition()
            tire_weight_adjustment_raw: int = 0
            if var_front_tire_steelbelting == 1:
            #Steelbelting .5 .5 .25 0
                tire_cost_adjustment   = tire_cost_adjustment   + 0.5
                tire_weight_adjustment = tire_weight_adjustment + 0.5
                tire_dp_adjustment     = tire_dp_adjustment     + 0.25
            if var_front_tire_radial       == 1:
            #Radial	1.5 .2 -1 1
                tire_cost_adjustment   = tire_cost_adjustment   + 1.5
                tire_weight_adjustment = tire_weight_adjustment + 0.2
                tire_dp_adjustment_raw = tire_dp_adjustment_raw - 1
                tire_hc_adjustment     = tire_hc_adjustment     + 0.5 #radials on front and back required, check if tire quantity is 4, then adjust to +1
            if var_front_tire_fireproof    == 1:
            #Fireproof 1 0 0 0
                tire_cost_adjustment   = tire_cost_adjustment   + 1.0
            if var_front_tire_offroad      == 1:
            #Off-Road .2 +5 0 +1
                tire_cost_adjustment   = tire_cost_adjustment   + 0.2
                tire_weight_adjustment_raw = tire_weight_adjustment_raw + 5
                tire_hc_adjustment     = tire_hc_adjustment     + 0.5 #off-road on front and back required, check if tire quantity is 4, then adjust to +1
            if var_front_tire_racing_slick == 1:
            #Racing Slick 3 1 +1 +2
                tire_cost_adjustment   = tire_cost_adjustment   + 3.0
                tire_weight_adjustment_raw = tire_weight_adjustment_raw + 1
                tire_dp_adjustment_raw = tire_dp_adjustment_raw - 1
                tire_hc_adjustment     = tire_hc_adjustment     + 1.0 #radials on front and back required, check if tire quantity is 4, then adjust to +1

            tire_cost = (tire_cost + tire_cost * tire_cost_adjustment) * front_tire_qty
            tire_weight = (tire_weight + tire_weight * tire_weight_adjustment + tire_weight_adjustment_raw) * front_tire_qty
            tire_dp = tire_dp + tire_dp * tire_dp_adjustment + tire_dp_adjustment_raw

            self.label_front_tire_cost.configure(text=str(int(tire_cost)))
            self.label_front_tire_weight.configure(text=str(int(tire_weight)))
            self.label_front_tire_dp.configure(text=str(int(tire_dp)))
        else:
            self.label_front_tire_cost.configure(text=str(0))
            self.label_front_tire_weight.configure(text=str(0))
            self.label_front_tire_dp.configure(text=str(0))
            self.label_hidden_front_tire_hc.configure(text=str(0))
            self.hc_addition()

    def rear_tire_adjustment(self):
        rear_tire_qty = self.var_rear_tire_qty.get()
        if rear_tire_qty > 0:
            tire_cost:   int = int(self.label_hidden_rear_tire_cost.cget("text"))
            tire_weight: int = int(self.label_hidden_rear_tire_weight.cget("text"))
            tire_dp:     int = int(self.label_hidden_rear_tire_dp.cget("text"))

            hidden_body_cycle: int = self.hidden_body_cycle.cget("text")
            var_rear_tire_steelbelting: int = self.var_rear_tire_steelbelting.get()
            var_rear_tire_radial:       int = self.var_rear_tire_radial.get()
            var_rear_tire_fireproof:    int = self.var_rear_tire_fireproof.get()
            var_rear_tire_offroad:      int = self.var_rear_tire_offroad.get()
            var_rear_tire_racing_slick: int = self.var_rear_tire_racing_slick.get()
            if hidden_body_cycle == 1:
                tire_weight = tire_weight / 2
            tire_cost_adjustment: float = 0.0
            tire_weight_adjustment: float = 0.0
            tire_dp_adjustment: float = 0.0
            tire_dp_adjustment_raw: int = 0
            #radials only add HC if all four tires are radials.  Slicks add +1 for each matched pair
            tire_hc_adjustment: float = float(rear_tire_qty * var_rear_tire_radial * 0.25) + (rear_tire_qty * var_rear_tire_racing_slick * 0.5)
            self.label_hidden_rear_tire_hc.configure(text=str(tire_hc_adjustment))
            #radials only add HC if all four tires are radials.  Slicks add +1 for each matched pair
            tire_hc_adjustment = self.calculate_tire_hc_adjustment(front=False)
            self.label_hidden_rear_tire_hc.configure(text=str(tire_hc_adjustment))

            self.hc_addition()
            tire_weight_adjustment_raw: int = 0
            if var_rear_tire_steelbelting == 1:
            #Steelbelting .5 .5 .25 0
                tire_cost_adjustment   = tire_cost_adjustment   + 0.5
                tire_weight_adjustment = tire_weight_adjustment + 0.5
                tire_dp_adjustment     = tire_dp_adjustment     + 0.25
            if var_rear_tire_radial       == 1:
            #Radial	1.5 .2 -1 1
                tire_cost_adjustment   = tire_cost_adjustment   + 1.5
                tire_weight_adjustment = tire_weight_adjustment + 0.2
                tire_dp_adjustment_raw = tire_dp_adjustment_raw - 1
                tire_hc_adjustment     = tire_hc_adjustment     + 0.5 #radials on front and back required, check if tire quantity is 4, then adjust to +1
            if var_rear_tire_fireproof    == 1:
            #Fireproof 1 0 0 0
                tire_cost_adjustment   = tire_cost_adjustment   + 1.0
            if var_rear_tire_offroad      == 1:
            #Off-Road .2 +5 0 +1
                tire_cost_adjustment   = tire_cost_adjustment   + 0.2
                tire_weight_adjustment_raw = tire_weight_adjustment_raw + 5
                tire_hc_adjustment     = tire_hc_adjustment     + 0.5 #off-road on front and back required, check if tire quantity is 4, then adjust to +1
            if var_rear_tire_racing_slick == 1:
            #Racing Slick 3 1 +1 +2
                tire_cost_adjustment   = tire_cost_adjustment   + 3.0
                tire_weight_adjustment_raw = tire_weight_adjustment_raw + 1
                tire_dp_adjustment_raw = tire_dp_adjustment_raw - 1
                tire_hc_adjustment     = tire_hc_adjustment     + 1.0 #radials on front and back required, check if tire quantity is 4, then adjust to +1

            tire_cost = (tire_cost + tire_cost * tire_cost_adjustment) * rear_tire_qty
            tire_weight = (tire_weight + tire_weight * tire_weight_adjustment + tire_weight_adjustment_raw) * rear_tire_qty
            tire_dp = tire_dp + tire_dp * tire_dp_adjustment + tire_dp_adjustment_raw

            self.label_rear_tire_cost.configure(text=str(int(tire_cost)))
            self.label_rear_tire_weight.configure(text=str(int(tire_weight)))
            self.label_rear_tire_dp.configure(text=str(int(tire_dp)))
        else:
            self.label_rear_tire_cost.configure(text=str(0))
            self.label_rear_tire_weight.configure(text=str(0))
            self.label_rear_tire_dp.configure(text=str(0))
            self.label_hidden_rear_tire_hc.configure(text=str(0))
            self.hc_addition()

    def calculate_tire_hc_adjustment(self, front: bool) -> float:
        """Calculate the HC contribution for the tire settings"""
        hc_tire_count: int = 0
        hc_partial_tire_count: int = 0
        if front:
            local_tire_qty = self.var_front_tire_qty.get()
            local_var_rear_tire_radial = self.var_front_tire_radial.get()
            local_rear_tire_racing_slick = self.var_front_tire_racing_slick.get()
        else:
            local_tire_qty = self.var_rear_tire_qty.get()
            local_var_rear_tire_radial = self.var_rear_tire_radial.get()
            local_rear_tire_racing_slick = self.var_rear_tire_racing_slick.get()
        body_type: str = self.selected_body.get()
        if body_type in ["Light Cycle", "Medium Cycle", "Heavy Cycle"]: # two wheels
            hc_tire_count = 2
            hc_partial_tire_count = 1
        elif body_type in ["Light SideCar", "Heavy SideCar"]: # one wheel
            hc_tire_count = 1
            hc_partial_tire_count = 1
        elif body_type in ["Light Trike", "Medium Trike", "Heavy Trike", "x-Hvy Trike"]:
            hc_tire_count = 3
            if front:
                hc_partial_tire_count = 1
            else:
                hc_partial_tire_count = 2
        elif body_type in ["Rev. Light Trike", "Rev. Medium Trike", "Rev. Heavy Trike", "Rev. X-Hvy Trike"]:
            hc_tire_count = 3
            if front:
                hc_partial_tire_count = 2
            else:
                hc_partial_tire_count = 1
        else:
            hc_tire_count = 4
            hc_partial_tire_count = 2
            six_wheel_status: int = int(self.var_six_wheel_chassis.get())
            if six_wheel_status == 1: #change the formula to account for six wheels
                hc_tire_count = 6
                if front:
                    hc_partial_tire_count = 2
                else:
                    hc_partial_tire_count = 4

        radial_tire_count: int = local_tire_qty * local_var_rear_tire_radial
        slick_tire_count: int = local_tire_qty * local_rear_tire_racing_slick
        tire_hc_adjustment: float = 0.0
        if radial_tire_count == hc_tire_count: #full load
            tire_hc_adjustment = tire_hc_adjustment + 1
        elif radial_tire_count >= hc_partial_tire_count: #just the front two tires, partial credit
            tire_hc_adjustment = tire_hc_adjustment + 0.5
        if slick_tire_count == hc_tire_count: #full load
            tire_hc_adjustment = tire_hc_adjustment + 2
        elif slick_tire_count >= hc_partial_tire_count: #just the front two tires, partial credit
            tire_hc_adjustment = tire_hc_adjustment + 1
        return tire_hc_adjustment

    def hc_addition(self):
        addition_list: list = []
        body_type: str = self.selected_body.get()
        if body_type in ["Pickup", "Pickup, 1 Spc Ext. Cab", "Pickup, 2 Spc Ext. Cab", "Camper"]:
            total_weight: float = float(self.label_total_weight.cget("text"))
            if total_weight >= 5500:
                self.label_hidden_body_hc.configure(text="-1")
            else:
                self.label_hidden_body_hc.configure(text="0")

        addition_list.append(int(self.label_hidden_body_hc.cget("text")))
        addition_list.append(int(self.label_hc.cget("text")))
        addition_list.append(float(self.label_hidden_front_tire_hc.cget("text")))
        addition_list.append(float(self.label_hidden_rear_tire_hc.cget("text")))
        addition_list.append(float(self.label_hidden_accessories_hc_1.cget("text")))
        addition_list.append(float(self.label_hidden_accessories_hc_2.cget("text")))
        addition_list.append(float(self.label_hidden_accessories_hc_3.cget("text")))
        addition_list.append(float(self.label_hidden_accessories_hc_4.cget("text")))
        addition_list.append(float(self.label_hidden_accessories_hc_5.cget("text")))
        addition_list.append(float(self.label_hidden_accessories_hc_6.cget("text")))
        addition_list.append(float(self.label_hidden_accessories_hc_7.cget("text")))
        addition_list.append(float(self.label_hidden_accessories_hc_8.cget("text")))
        addition_list.append(float(self.label_hidden_accessories_hc_9.cget("text")))
        addition_list.append(float(self.label_hidden_accessories_hc_10.cget("text")))
        addition_list.append(float(self.label_hidden_accessories_hc_11.cget("text")))
        addition_list.append(float(self.label_hidden_accessories_hc_12.cget("text")))
        addition_list.append(float(self.label_hidden_accessories_hc_13.cget("text")))
        addition_list.append(float(self.label_hidden_accessories_hc_14.cget("text")))
        addition_list.append(float(self.label_hidden_accessories_hc_15.cget("text")))
        addition_list.append(float(self.label_hidden_accessories_hc_16.cget("text")))
        addition_list.append(float(self.label_hidden_accessories_hc_17.cget("text")))
        addition_list.append(float(self.label_hidden_accessories_hc_18.cget("text")))
        addition_list.append(float(self.label_hidden_accessories_hc_19.cget("text")))
        addition_list.append(float(self.label_hidden_accessories_hc_20.cget("text")))
        addition_list.append(float(self.label_hidden_accessories_hc_21.cget("text")))
        addition_list.append(float(self.label_hidden_accessories_hc_22.cget("text")))
        addition_list.append(float(self.label_hidden_accessories_hc_23.cget("text")))
        addition_list.append(float(self.label_hidden_accessories_hc_24.cget("text")))
        addition_list.append(float(self.label_hidden_accessories_hc_25.cget("text")))
        addition_list.append(float(self.label_hidden_accessories_hc_26.cget("text")))
        addition_list.append(float(self.label_hidden_accessories_hc_27.cget("text")))
        addition_list.append(float(self.label_hidden_accessories_hc_28.cget("text")))
        addition_list.append(float(self.label_hidden_accessories_hc_29.cget("text")))
        addition_list.append(float(self.label_hidden_accessories_hc_30.cget("text")))
        local_total = sum(addition_list)
        self.label_max_hc.configure(text=str(local_total))

    def get_body_dictionaries(self):
        self.body_list = []
        entry_dict: dict = {'Body': "Body",                   'Cost': 0,    'Weight': 0,    'Total Weight': 0,    'Total Spaces': 0,  'Cargo Spaces': 0,  'Armor Cost/Point': 0,  'Armor Weight/Point': 0,  'To-Hit Mod (side)': 0,  'Max Turret':-1, "Cycle": 0}
        self.body_list.append(entry_dict)
        entry_dict: dict = {'Body': "Light Cycle",            'Cost': 200,  'Weight': 250,  'Total Weight': 800,  'Total Spaces': 4,  'Cargo Spaces': 0,  'Armor Cost/Point': 10, 'Armor Weight/Point': 4,  'To-Hit Mod (side)': -2, 'Max Turret':-1, "Cycle": 1}
        self.body_list.append(entry_dict)
        entry_dict: dict = {'Body': "Medium Cycle",           'Cost': 300,  'Weight': 300,  'Total Weight': 1100, 'Total Spaces': 5,  'Cargo Spaces': 0,  'Armor Cost/Point': 11, 'Armor Weight/Point': 5,  'To-Hit Mod (side)': -2, 'Max Turret':-1, "Cycle": 1}
        self.body_list.append(entry_dict)
        entry_dict: dict = {'Body': "Heavy Cycle",            'Cost': 400,  'Weight': 350,  'Total Weight': 1300, 'Total Spaces': 7,  'Cargo Spaces': 0,  'Armor Cost/Point': 12, 'Armor Weight/Point': 6,  'To-Hit Mod (side)': -2, 'Max Turret':-1, "Cycle": 1}
        self.body_list.append(entry_dict)
        entry_dict: dict = {'Body': "Light SideCar",          'Cost': 300,  'Weight': 200,  'Total Weight': 400,  'Total Spaces': 2,  'Cargo Spaces': 0,  'Armor Cost/Point': 5,  'Armor Weight/Point': 5,  'To-Hit Mod (side)': -2, 'Max Turret':-1, "Cycle": 1}
        self.body_list.append(entry_dict)
        entry_dict: dict = {'Body': "Heavy SideCar",          'Cost': 450,  'Weight': 350,  'Total Weight': 750,  'Total Spaces': 3,  'Cargo Spaces': 0,  'Armor Cost/Point': 5,  'Armor Weight/Point': 6,  'To-Hit Mod (side)': -2, 'Max Turret':-1, "Cycle": 1}
        self.body_list.append(entry_dict)
        entry_dict: dict = {'Body': "Light Trike",            'Cost': 250,  'Weight': 300,  'Total Weight': 1600, 'Total Spaces': 8,  'Cargo Spaces': 0,  'Armor Cost/Point': 11, 'Armor Weight/Point': 5,  'To-Hit Mod (side)': -2, 'Max Turret':0,  "Cycle": 1}
        self.body_list.append(entry_dict)
        entry_dict: dict = {'Body': "Medium Trike",           'Cost': 300,  'Weight': 500,  'Total Weight': 2100, 'Total Spaces': 10, 'Cargo Spaces': 0,  'Armor Cost/Point': 12, 'Armor Weight/Point': 6,  'To-Hit Mod (side)': -1, 'Max Turret':1,  "Cycle": 1}
        self.body_list.append(entry_dict)
        entry_dict: dict = {'Body': "Heavy Trike",            'Cost': 400,  'Weight': 700,  'Total Weight': 2800, 'Total Spaces': 12, 'Cargo Spaces': 0,  'Armor Cost/Point': 14, 'Armor Weight/Point': 7,  'To-Hit Mod (side)': -1, 'Max Turret':2,  "Cycle": 1}
        self.body_list.append(entry_dict)
        entry_dict: dict = {'Body': "x-Hvy Trike",            'Cost': 550,  'Weight': 950,  'Total Weight': 3500, 'Total Spaces': 14, 'Cargo Spaces': 0,  'Armor Cost/Point': 16, 'Armor Weight/Point': 8,  'To-Hit Mod (side)': 0,  'Max Turret':2,  "Cycle": 1}
        self.body_list.append(entry_dict)
        entry_dict: dict = {'Body': "Rev. Light Trike",       'Cost': 375,  'Weight': 300,  'Total Weight': 1600, 'Total Spaces': 7,  'Cargo Spaces': 0,  'Armor Cost/Point': 11, 'Armor Weight/Point': 5,  'To-Hit Mod (side)': -2, 'Max Turret':0,  "Cycle": 1}
        self.body_list.append(entry_dict)
        entry_dict: dict = {'Body': "Rev. Medium Trike",      'Cost': 450,  'Weight': 500,  'Total Weight': 2100, 'Total Spaces': 9,  'Cargo Spaces': 0,  'Armor Cost/Point': 12, 'Armor Weight/Point': 6,  'To-Hit Mod (side)': -1, 'Max Turret':1,  "Cycle": 1}
        self.body_list.append(entry_dict)
        entry_dict: dict = {'Body': "Rev. Heavy Trike",       'Cost': 600,  'Weight': 700,  'Total Weight': 2800, 'Total Spaces': 11, 'Cargo Spaces': 0,  'Armor Cost/Point': 14, 'Armor Weight/Point': 7,  'To-Hit Mod (side)': -1, 'Max Turret':2,  "Cycle": 1}
        self.body_list.append(entry_dict)
        entry_dict: dict = {'Body': "Rev. X-Hvy Trike",       'Cost': 825,  'Weight': 950,  'Total Weight': 3500, 'Total Spaces': 13, 'Cargo Spaces': 0,  'Armor Cost/Point': 16, 'Armor Weight/Point': 8,  'To-Hit Mod (side)': 0,  'Max Turret':2,  "Cycle": 1}
        self.body_list.append(entry_dict)
        entry_dict: dict = {'Body': "Subcompact",             'Cost': 300,  'Weight': 1000, 'Total Weight': 2300, 'Total Spaces': 7,  'Cargo Spaces': 0,  'Armor Cost/Point': 11, 'Armor Weight/Point': 5,  'To-Hit Mod (side)': -1, 'Max Turret':0,  "Cycle": 0}
        self.body_list.append(entry_dict)
        entry_dict: dict = {'Body': "Compact",                'Cost': 400,  'Weight': 1300, 'Total Weight': 3700, 'Total Spaces': 10, 'Cargo Spaces': 0,  'Armor Cost/Point': 13, 'Armor Weight/Point': 6,  'To-Hit Mod (side)': -1, 'Max Turret':1,  "Cycle": 0}
        self.body_list.append(entry_dict)
        entry_dict: dict = {'Body': "Mid-Sized",              'Cost': 600,  'Weight': 1600, 'Total Weight': 4800, 'Total Spaces': 13, 'Cargo Spaces': 0,  'Armor Cost/Point': 16, 'Armor Weight/Point': 8,  'To-Hit Mod (side)': 0,  'Max Turret':2,  "Cycle": 0}
        self.body_list.append(entry_dict)
        entry_dict: dict = {'Body': "Sedan",                  'Cost': 700,  'Weight': 1700, 'Total Weight': 5100, 'Total Spaces': 16, 'Cargo Spaces': 0,  'Armor Cost/Point': 18, 'Armor Weight/Point': 9,  'To-Hit Mod (side)': 0,  'Max Turret':2,  "Cycle": 0}
        self.body_list.append(entry_dict)
        entry_dict: dict = {'Body': "Luxury",                 'Cost': 800,  'Weight': 1800, 'Total Weight': 5500, 'Total Spaces': 19, 'Cargo Spaces': 0,  'Armor Cost/Point': 20, 'Armor Weight/Point': 10, 'To-Hit Mod (side)': 0,  'Max Turret':2,  "Cycle": 0}
        self.body_list.append(entry_dict)
        entry_dict: dict = {'Body': "Station Wagon",          'Cost': 800,  'Weight': 1800, 'Total Weight': 5500, 'Total Spaces': 14, 'Cargo Spaces': 7,  'Armor Cost/Point': 20, 'Armor Weight/Point': 10, 'To-Hit Mod (side)': 0,  'Max Turret':2,  "Cycle": 0}
        self.body_list.append(entry_dict)
        entry_dict: dict = {'Body': "Pickup",                 'Cost': 900,  'Weight': 2100, 'Total Weight': 6500, 'Total Spaces': 13, 'Cargo Spaces': 11, 'Armor Cost/Point': 22, 'Armor Weight/Point': 11, 'To-Hit Mod (side)': 0,  'Max Turret':2,  "Cycle": 0}
        self.body_list.append(entry_dict)
        entry_dict: dict = {'Body': "Pickup, 1 Spc Ext. Cab", 'Cost': 1900, 'Weight': 2200, 'Total Weight': 6500, 'Total Spaces': 14, 'Cargo Spaces': 10, 'Armor Cost/Point': 22, 'Armor Weight/Point': 11, 'To-Hit Mod (side)': 0,  'Max Turret':2,  "Cycle": 0}
        self.body_list.append(entry_dict)
        entry_dict: dict = {'Body': "Pickup, 2 Spc Ext. Cab", 'Cost': 2400, 'Weight': 2350, 'Total Weight': 6500, 'Total Spaces': 16, 'Cargo Spaces': 12, 'Armor Cost/Point': 24, 'Armor Weight/Point': 12, 'To-Hit Mod (side)': 0,  'Max Turret':2,  "Cycle": 0}
        self.body_list.append(entry_dict)
        entry_dict: dict = {'Body': "Camper",                 'Cost': 1400, 'Weight': 2300, 'Total Weight': 6500, 'Total Spaces': 30, 'Cargo Spaces': 14, 'Armor Cost/Point': 30, 'Armor Weight/Point': 14, 'To-Hit Mod (side)': 0,  'Max Turret':3,  "Cycle": 0}
        self.body_list.append(entry_dict)
        entry_dict: dict = {'Body': "Van",                    'Cost': 1000, 'Weight': 2000, 'Total Weight': 6000, 'Total Spaces': 24, 'Cargo Spaces': 6,  'Armor Cost/Point': 30, 'Armor Weight/Point': 14, 'To-Hit Mod (side)': 0,  'Max Turret':3,  "Cycle": 0}
        self.body_list.append(entry_dict)
        entry_dict: dict = {'Body': "Formula One/Indy",       'Cost': 6500, 'Weight': 600,  'Total Weight': 4000, 'Total Spaces': 15, 'Cargo Spaces': 0,  'Armor Cost/Point': 22, 'Armor Weight/Point': 10, 'To-Hit Mod (side)': 0,  'Max Turret':2,  "Cycle": 0}
        self.body_list.append(entry_dict)
        entry_dict: dict = {'Body': "Can-Am",                 'Cost': 6500, 'Weight': 800,  'Total Weight': 4500, 'Total Spaces': 18, 'Cargo Spaces': 0,  'Armor Cost/Point': 24, 'Armor Weight/Point': 12, 'To-Hit Mod (side)': 0,  'Max Turret':2,  "Cycle": 0}
        self.body_list.append(entry_dict)
        entry_dict: dict = {'Body': "Sprint",                 'Cost': 5600, 'Weight': 300,  'Total Weight': 3200, 'Total Spaces': 10, 'Cargo Spaces': 0,  'Armor Cost/Point': 15, 'Armor Weight/Point': 7,  'To-Hit Mod (side)': 0,  'Max Turret':2,  "Cycle": 0}
        self.body_list.append(entry_dict)
        entry_dict: dict = {'Body': "Funny Car",              'Cost': 6600, 'Weight': 700,  'Total Weight': 4500, 'Total Spaces': 20, 'Cargo Spaces': 0,  'Armor Cost/Point': 26, 'Armor Weight/Point': 13, 'To-Hit Mod (side)': 0,  'Max Turret':2,  "Cycle": 0}
        self.body_list.append(entry_dict)
        entry_dict: dict = {'Body': "Dragster",               'Cost': 6200, 'Weight': 600,  'Total Weight': 4000, 'Total Spaces': 16, 'Cargo Spaces': 0,  'Armor Cost/Point': 20, 'Armor Weight/Point': 8,  'To-Hit Mod (side)': 0,  'Max Turret':2,  "Cycle": 0}
        self.body_list.append(entry_dict)

    def get_modifications_dictionaries(self):
        self.modifications_list = []
        entry_dict: dict = {'Modification': "No Mods", 'Cost': 0, 'Weight': 0, 'Spaces': 0, 'Cargo Spaces': 0}
        self.modifications_list.append(entry_dict)
        entry_dict: dict = {'Modification': "CA Frame", 'Cost': 4, 'Weight': -0.5, 'Spaces': 0, 'Cargo Spaces': 0}
        self.modifications_list.append(entry_dict)
        entry_dict: dict = {'Modification': "Streamlined", 'Cost': .5, 'Weight': 0, 'Spaces': 0.1, 'Cargo Spaces': 0.1}
        self.modifications_list.append(entry_dict)
        entry_dict: dict = {'Modification': "CA/Streamlined", 'Cost': 5, 'Weight': -0.5, 'Spaces':0.1, 'Cargo Spaces': 0.1}
        self.modifications_list.append(entry_dict)

    def get_chassis_dictionaries(self):
        self.chassis_list = []
        entry_dict: dict = {'Chassis': "Chassis", 'Cost': 0, 'Max Weight': 1}
        self.chassis_list.append(entry_dict)
        entry_dict: dict = {'Chassis': "Cycle Chassis", 'Cost': 0, 'Max Weight': 1}
        self.chassis_list.append(entry_dict)
        entry_dict: dict = {'Chassis': "Light Chassis", 'Cost': -0.2, 'Max Weight': 0.9}
        self.chassis_list.append(entry_dict)
        entry_dict: dict = {'Chassis': "Standard Chassis", 'Cost': 0, 'Max Weight': 1}
        self.chassis_list.append(entry_dict)
        entry_dict: dict = {'Chassis': "Heavy Chassis", 'Cost': 0.5, 'Max Weight': 1.1}
        self.chassis_list.append(entry_dict)
        entry_dict: dict = {'Chassis': "Ext Heavy Chassis", 'Cost': 1.0, 'Max Weight': 1.2}
        self.chassis_list.append(entry_dict)

    def get_suspension_dictionaries(self):
        self.suspension_list = []
        entry_dict: dict = {'Suspension': "Suspension", 'Cost': 0, 'HC': 0, "Van HC": -6, "Sub HC": -6}
        self.suspension_list.append(entry_dict)
        entry_dict: dict = {'Suspension': "Cycle Light Suspension",    'Cost': 0,   'HC': 0, "Van HC": -6, "Sub HC": -6}
        self.suspension_list.append(entry_dict)
        entry_dict: dict = {'Suspension': "Cycle Improved Suspension", 'Cost': 1,   'HC': 1, "Van HC": -6, "Sub HC": -6}
        self.suspension_list.append(entry_dict)
        entry_dict: dict = {'Suspension': "Cycle - Heavy Suspension",  'Cost': 2,   'HC': 2, "Van HC": -6, "Sub HC": -6}
        self.suspension_list.append(entry_dict)
        entry_dict: dict = {'Suspension': "Cycle - OR Suspension",     'Cost': 3,   'HC': 2, "Van HC": -6, "Sub HC": -6}
        self.suspension_list.append(entry_dict)
        entry_dict: dict = {'Suspension': "Light Suspension",          'Cost': 0,   'HC': 1, "Van HC": 0,  "Sub HC": 2}
        self.suspension_list.append(entry_dict)
        entry_dict: dict = {'Suspension': "Improved Suspension",       'Cost': 1,   'HC': 2, "Van HC": 1,  "Sub HC": 3}
        self.suspension_list.append(entry_dict)
        entry_dict: dict = {'Suspension': "Heavy Suspension",          'Cost': 1.5, 'HC': 3, "Van HC": 2,  "Sub HC": 4}
        self.suspension_list.append(entry_dict)
        entry_dict: dict = {'Suspension': "Off-Road Suspension",       'Cost': 5,   'HC': 2, "Van HC": 1,  "Sub HC": 3}
        self.suspension_list.append(entry_dict)
        entry_dict: dict = {'Suspension': "Racing Suspension",         'Cost': 0,   'HC': 5, "Van HC": -6, "Sub HC": -6}
        self.suspension_list.append(entry_dict)

    def get_engines_dictionaries(self):
        self.engine_list = []
        entry_dict: dict = {'Engine': "Engine", 'Cost': 0, 'Weight': 0, 'Spaces': 0, "DP": 0, "Power Factors": 0, "Base MPG": 0, "Type": "None"}
        self.engine_list.append(entry_dict)
        entry_dict: dict = {'Engine': "10 cid IC Engine",            'Cost': 400,   'Weight': 60,   'Spaces': 1,  "DP": 1,  "Power Factors": 300,   "Base MPG": 80, "Type": "Gas"}
        self.engine_list.append(entry_dict)
        entry_dict: dict = {'Engine': "30 cid IC Engine",            'Cost': 750,   'Weight': 115,  'Spaces': 1,  "DP": 2,  "Power Factors": 500,   "Base MPG": 70, "Type": "Gas"}
        self.engine_list.append(entry_dict)
        entry_dict: dict = {'Engine': "50 cid IC Engine",            'Cost': 1250,  'Weight': 150,  'Spaces': 1,  "DP": 3,  "Power Factors": 700,   "Base MPG": 60, "Type": "Gas"}
        self.engine_list.append(entry_dict)
        entry_dict: dict = {'Engine': "100 cid IC Engine",           'Cost': 2500,  'Weight': 265,  'Spaces': 2,  "DP": 6,  "Power Factors": 1300,  "Base MPG": 50, "Type": "Gas"}
        self.engine_list.append(entry_dict)
        entry_dict: dict = {'Engine': "150 cid IC Engine",           'Cost': 4000,  'Weight': 375,  'Spaces': 3,  "DP": 9,  "Power Factors": 1900,  "Base MPG": 45, "Type": "Gas"}
        self.engine_list.append(entry_dict)
        entry_dict: dict = {'Engine': "200 cid IC Engine",           'Cost': 5500,  'Weight': 480,  'Spaces': 4,  "DP": 12, "Power Factors": 2500,  "Base MPG": 35, "Type": "Gas"}
        self.engine_list.append(entry_dict)
        entry_dict: dict = {'Engine': "250 cid IC Engine",           'Cost': 6500,  'Weight': 715,  'Spaces': 5,  "DP": 14, "Power Factors": 3200,  "Base MPG": 28, "Type": "Gas"}
        self.engine_list.append(entry_dict)
        entry_dict: dict = {'Engine': "300 cid IC Engine",           'Cost': 7800,  'Weight': 825,  'Spaces': 6,  "DP": 16, "Power Factors": 4000,  "Base MPG": 22, "Type": "Gas"}
        self.engine_list.append(entry_dict)
        entry_dict: dict = {'Engine': "350 cid IC Engine",           'Cost': 9500,  'Weight': 975,  'Spaces': 7,  "DP": 19, "Power Factors": 5000,  "Base MPG": 18, "Type": "Gas"}
        self.engine_list.append(entry_dict)
        entry_dict: dict = {'Engine': "400 cid IC Engine",           'Cost': 10500, 'Weight': 1050, 'Spaces': 8,  "DP": 22, "Power Factors": 6300,  "Base MPG": 15, "Type": "Gas"}
        self.engine_list.append(entry_dict)
        entry_dict: dict = {'Engine': "450 cid IC Engine",           'Cost': 11700, 'Weight': 1125, 'Spaces': 9,  "DP": 24, "Power Factors": 7800,  "Base MPG": 13, "Type": "Gas"}
        self.engine_list.append(entry_dict)
        entry_dict: dict = {'Engine': "500 cid IC Engine",           'Cost': 13000, 'Weight': 1200, 'Spaces': 10, "DP": 26, "Power Factors": 9500,  "Base MPG": 12, "Type": "Gas"}
        self.engine_list.append(entry_dict)
        entry_dict: dict = {'Engine': "700 cid IC Engine",           'Cost': 19000, 'Weight': 1275, 'Spaces': 14, "DP": 30, "Power Factors": 13000, "Base MPG": 10, "Type": "Gas"}
        self.engine_list.append(entry_dict)
        entry_dict: dict = {'Engine': "Small Cycle Power Plant",     'Cost': 500,   'Weight': 100,  'Spaces': 1,  "DP": 2,  "Power Factors": 400,   "Base MPG": 0, "Type": "Electric"}
        self.engine_list.append(entry_dict)
        entry_dict: dict = {'Engine': "Medium Cycle Power Plant",    'Cost': 1000,  'Weight': 150,  'Spaces': 1,  "DP": 3,  "Power Factors": 600,   "Base MPG": 0, "Type": "Electric"}
        self.engine_list.append(entry_dict)
        entry_dict: dict = {'Engine': "Large Cycle Power Plant",     'Cost': 1500,  'Weight': 175,  'Spaces': 2,  "DP": 4,  "Power Factors": 800,   "Base MPG": 0, "Type": "Electric"}
        self.engine_list.append(entry_dict)
        entry_dict: dict = {'Engine': "Super Cycle Power Plant",     'Cost': 2000,  'Weight': 200,  'Spaces': 2,  "DP": 5,  "Power Factors": 1000,  "Base MPG": 0, "Type": "Electric"}
        self.engine_list.append(entry_dict)
        entry_dict: dict = {'Engine': "Super Trike Power Plant",     'Cost': 3000,  'Weight': 250,  'Spaces': 3,  "DP": 6,  "Power Factors": 1200,  "Base MPG": 0, "Type": "Electric"}
        self.engine_list.append(entry_dict)
        entry_dict: dict = {'Engine': "Small Electric Power Plant",  'Cost': 500,   'Weight': 500,  'Spaces': 3,  "DP": 5,  "Power Factors": 800,   "Base MPG": 0, "Type": "Electric"}
        self.engine_list.append(entry_dict)
        entry_dict: dict = {'Engine': "Medium Electric Power Plant", 'Cost': 1000,  'Weight': 700,  'Spaces': 4,  "DP": 8,  "Power Factors": 1400,  "Base MPG": 0, "Type": "Electric"}
        self.engine_list.append(entry_dict)
        entry_dict: dict = {'Engine': "Large Electric Power Plant",  'Cost': 2000,  'Weight': 900,  'Spaces': 5,  "DP": 10, "Power Factors": 2000,  "Base MPG": 0, "Type": "Electric"}
        self.engine_list.append(entry_dict)
        entry_dict: dict = {'Engine': "Super Power Plant",           'Cost': 3000,  'Weight': 1100, 'Spaces': 6,  "DP": 12, "Power Factors": 2600,  "Base MPG": 0, "Type": "Electric"}
        self.engine_list.append(entry_dict)
        entry_dict: dict = {'Engine': "Sport Power Plant",           'Cost': 6000,  'Weight': 1000, 'Spaces': 6,  "DP": 12, "Power Factors": 3000,  "Base MPG": 0, "Type": "Electric"}
        self.engine_list.append(entry_dict)
        entry_dict: dict = {'Engine': "ThunderCat Power Plant",      'Cost': 12000, 'Weight': 2000, 'Spaces': 8,  "DP": 15, "Power Factors": 6700,  "Base MPG": 0, "Type": "Electric"}
        self.engine_list.append(entry_dict)

    def get_gas_tank_dictionaries(self):
        self.gas_tank_list = []
        entry_dict: dict = {"Gas Tank": "Gas Tank",          "Cost": 0,  "Weight": 0,  "DP": 0}
        self.gas_tank_list.append(entry_dict)
        entry_dict: dict = {"Gas Tank": "Electric",          "Cost": 0,  "Weight": 0,  "DP": 0}
        self.gas_tank_list.append(entry_dict)
        entry_dict: dict = {"Gas Tank": "Economy Gas Tank",  "Cost": 2,  "Weight": 1,  "DP": 2}
        self.gas_tank_list.append(entry_dict)
        entry_dict: dict = {"Gas Tank": "Hvy-Duty Gas Tank", "Cost": 5,  "Weight": 2,  "DP": 4}
        self.gas_tank_list.append(entry_dict)
        entry_dict: dict = {"Gas Tank": "Racing Gas Tank",   "Cost": 10, "Weight": 5,  "DP": 4}
        self.gas_tank_list.append(entry_dict)
        entry_dict: dict = {"Gas Tank": "Duelling Gas Tank", "Cost": 25, "Weight": 10, "DP": 8}
        self.gas_tank_list.append(entry_dict)

    def get_tires_dictionaries(self):
        self.tires_list = []
        entry_dict: dict = {"Tires": "Tires",            "Cost": 0,    "Weight": 0,   "DP": 0}
        self.tires_list.append(entry_dict)
        entry_dict: dict = {"Tires": "Standard Tires",   "Cost": 50,   "Weight": 30,  "DP": 4}
        self.tires_list.append(entry_dict)
        entry_dict: dict = {"Tires": "Heavy Duty Tires", "Cost": 100,  "Weight": 40,  "DP": 6}
        self.tires_list.append(entry_dict)
        entry_dict: dict = {"Tires": "PR Tires",         "Cost": 200,  "Weight": 50,  "DP": 9}
        self.tires_list.append(entry_dict)
        entry_dict: dict = {"Tires": "Solid Tires",      "Cost": 500,  "Weight": 75,  "DP": 12}
        self.tires_list.append(entry_dict)
        entry_dict: dict = {"Tires": "Plasticore Tires", "Cost": 1000, "Weight": 150, "DP": 25}
        self.tires_list.append(entry_dict)

    def get_accessories_dictionaries(self):
        self.accessories_list = []
        entry_dict: dict = {"Accessory Name": "Accessory",                                    "Cost": "0",     "Space": "0",    "Weight": "0",     "DP": "",   "Notes": "", "Turret Size": -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Active Suspension",                            "Cost": "4000",  "Space": "1",	"Weight": "100",   "DP": "",   "Notes": "+1 Added to HC", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Anti-Lock Brakes",                             "Cost": "1000",  "Space": "",	    "Weight": "",      "DP": "",   "Notes": "No tire dam from hvy braking. Braking hazards -D1for bad road surfaces", "Turret Size": -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Blow Through Concealment",                     "Cost": "100",   "Space": "",	    "Weight": "10",    "DP": "",   "Notes": "EACH!", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Bumper Spikes",                                "Cost": "150",   "Space": "",	    "Weight": "70",    "DP": "",   "Notes": "1D in collisions", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Bumper Trigger",                               "Cost": "50",    "Space": "",	    "Weight": "",      "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 0, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Cyberlink",                                    "Cost": "16000", "Space": "1",	"Weight": "100",   "DP": "",   "Notes": " +3 to hit", "Turret Size":  -2, "Cycle Only": 0, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Fire Extinguisher (FE)",                       "Cost": "300",   "Space": "1",    "Weight": "150",   "DP": "",   "Notes": "Will put out fire on 1 - 3 (1 - 2 with gas) on 1D6", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Fire Retardant Insulators",                    "Cost": "150",   "Space": "1",	"Weight": "25",    "DP": "",   "Notes": " PER SPACE PROTECTED", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Heavy-duty Brakes",                            "Cost": "600",   "Space": "",	    "Weight": "",      "DP": "",   "Notes": "One purchase per vehicle", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Heavy-duty Shock Absorbers",                   "Cost": "2400",  "Space": "",	    "Weight": "30",    "DP": "",   "Notes": "Reduce All Road Hazards by D1, D0 do not force Control Rolls; one purchase only", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Hi-Res Computer",                              "Cost": "4000",  "Space": "",    	"Weight": "",      "DP": "",   "Notes": " +2 To Hit for ONE location", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Hi-Res Single Weapon Computer (HRSWC)",        "Cost": "2500",  "Space": "",	    "Weight": "",      "DP": "",   "Notes": " +2 To Hit for One Weapon System for One Location", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "High Torque Motors (HTM)",                     "Cost": "600",   "Space": "",	    "Weight": "",      "DP": "",   "Notes": "Adds 5 to acceleration when engaged; Top speed reduced by 1/4; buy just one", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "High Torque Motors, Heavy Duty (HDHTM)",       "Cost": "1200",  "Space": "",	    "Weight": "",      "DP": "",   "Notes": "Doubles base accel. When engaged; Top speed reduced 1/3; buy just one", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Improved Fire Extinguisher (IFE)",             "Cost": "500",   "Space": "1",	"Weight": "200",   "DP": "",   "Notes": "Will put out fire on 1 - 4 (1 - 3 with gas) on 1D6", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Link",                                         "Cost": "50",    "Space": "",	    "Weight": "",      "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Ramplate",                                     "Cost": "0",     "Space": "",	    "Weight": "0",     "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Single-Weapon Computer",                       "Cost": "500",   "Space": "",	    "Weight": "",      "DP": "",   "Notes": " +1 to hit with one weapon system for one location", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Smart Link",                                   "Cost": "500",   "Space": "",	    "Weight": "",      "DP": "",   "Notes": "Allows weapons in one location to be aimed and fired with others (same weapon)", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Spoilers and Airdams, plastic",                "Cost": "750",   "Space": "",	    "Weight": "140",   "DP": "",   "Notes": "Must have two for full effect!", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Spoilers and Airdams, Metal Airfoil",          "Cost": "750",   "Space": "",	    "Weight": "140",   "DP": "",   "Notes": "Must have two for full effect!", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Targeting Computer",                           "Cost": "1000",  "Space": "",	    "Weight": "",      "DP": "",   "Notes": " +1 To Hit for ONE position", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Turret - Zero-space",                          "Cost": "750",   "Space": "1",	"Weight": "75",    "DP": "",   "Notes": "Uses 1spc For Targeting Laser Only.", "Turret Size":  0, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Turret - One Space",                           "Cost": "1000",  "Space": "0",	"Weight": "150",   "DP": "",   "Notes": "Uses 1spc GIVES 1 Spc for Weap.Compact +", "Turret Size":  1, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Turret - Two-space",                           "Cost": "1500",  "Space": "0",	"Weight": "200",   "DP": "",   "Notes": "Uses 2spc GIVES 2 Spc for Weap. Midsize +", "Turret Size":  2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Turret - Three-space",                         "Cost": "2500",  "Space": "-1",	"Weight": "300",   "DP": "",   "Notes": "Uses 2spc but GIVES 3 Spc for Weap. Camper +", "Turret Size":  3, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Wheelguards, Front - Plastic",                 "Cost": "10",    "Space": "", 	"Weight": "4",     "DP": "",   "Notes": "Per point of armor, max wt 40lbs; must match vehicular armor type", "Turret Size":  -2, "Cycle Only": -1}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Wheelguards, Front - MET",                     "Cost": "25",    "Space": "",	    "Weight": "20",    "DP": "",   "Notes": "Per point of armor, max wt 40lbs; must match vehicular armor type", "Turret Size":  -2, "Cycle Only": -1}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Wheelguards, Rear - Plastic",                  "Cost": "10",    "Space": "",	    "Weight": "4",     "DP": "",   "Notes": "Per point of armor, max wt 40lbs; must match vehicular armor type", "Turret Size":  -2, "Cycle Only": -1}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Wheelguards, Rear - MET",                      "Cost": "25",    "Space": "",	    "Weight": "20",    "DP": "",   "Notes": "Per point of armor, max wt 40lbs; must match vehicular armor type", "Turret Size":  -2, "Cycle Only": -1}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Wheelhubs - Plastic",                          "Cost": "10",    "Space": "",	    "Weight": "4",     "DP": "",   "Notes": "Per point of armor, max wt 40lbs; must match vehicular armor type", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Wheelhubs - MET",                              "Cost": "25",    "Space": "",	    "Weight": "20",    "DP": "",   "Notes": "Per point of armor, max wt 40lbs; must match vehicular armor type", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "---Less Often Used Accessories---",            "Cost": "0",     "Space": "0",    "Weight": "0",     "DP": "",   "Notes": "", "Turret Size": -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "EWP Armor - Normal",                           "Cost": "10",    "Space": "",	    "Weight": "4",     "DP": "",   "Notes": "per point; 40 lb per pod max; need not match vehicle armor", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "EWP Armor - FP",                               "Cost": "20",    "Space": "",	    "Weight": "4",     "DP": "",   "Notes": "per point; 40 lb per pod max; need not match vehicle armor", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "EWP Armor - LR",                               "Cost": "11",    "Space": "",	    "Weight": "4.4",   "DP": "",   "Notes": "per point; 40 lb per pod max; need not match vehicle armor", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "EWP Armor - LRFP",                             "Cost": "25",    "Space": "",	    "Weight": "4.4",   "DP": "",   "Notes": "per point; 40 lb per pod max; need not match vehicle armor", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "EWP Armor - RP",                               "Cost": "20",    "Space": "",	    "Weight": "4",     "DP": "",   "Notes": "per point; 40 lb per pod max; need not match vehicle armor", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "EWP Armor - RPFP",                             "Cost": "40",    "Space": "",	    "Weight": "4",     "DP": "",   "Notes": "per point; 40 lb per pod max; need not match vehicle armor", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "EWP Armor - MET",                              "Cost": "25",    "Space": "",	    "Weight": "20",    "DP": "",   "Notes": "per point; 40 lb per pod max; need not match vehicle armor", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "EWP Armor - LR MET",                           "Cost": "27.5",  "Space": "",	    "Weight": "20",    "DP": "",   "Notes": "per point; 40 lb per pod max; need not match vehicle armor", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "External Weapons Pod - Four-space",            "Cost": "3000",  "Space": "-4",	"Weight": "600",   "DP": "",   "Notes": "Oversized vehicles only", "Turret Size":  4, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "External Weapons Pod - One-space",             "Cost": "500",   "Space": "-1",	"Weight": "150",   "DP": "",   "Notes": "", "Turret Size":  0, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "External Weapons Pod - Three-space",           "Cost": "2000",  "Space": "-3",	"Weight": "400",   "DP": "",   "Notes": "Campers and Vans only", "Turret Size":  3, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "External Weapons Pod - Two-space",             "Cost": "1000",  "Space":  "-2",	"Weight": "250",   "DP": "",   "Notes": "Mid-sized and larger bodies ", "Turret Size": 2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "External Weapons Pod Ejector",                 "Cost": "250",   "Space": "",	    "Weight": "",      "DP": "",   "Notes": "Per pod", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Improved Super Charger Capacitors",            "Cost": "500",   "Space": "1",	"Weight": "75",    "DP": "1",  "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Infrared Sighting System (IR)",                "Cost": "4000",  "Space": "1",	"Weight": "100",   "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Heavy-duty Transmission",                      "Cost": "300",   "Space": "2",	"Weight": "300",   "DP": "",   "Notes": "Must select heavy or extra-heavy chassis.  Cars, Pickups, Vans and Campers only.", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Laser Battery",                                "Cost": "500",   "Space": "1",	"Weight": "100",   "DP": "1",  "Notes": "100 PU each; required to use lasers, radar, etc., with gas engines", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Laser Guidance Link Electronics",              "Cost": "500",   "Space": "",	    "Weight": "",      "DP": "",   "Notes": "Required once per laser; (must also buy LGL tuning per round and LGL link to launcher(s))", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Laser Guidance tuning for Rocket",             "Cost": "200",   "Space": "", 	"Weight": "",      "DP": "",   "Notes": "Required for each guided round; (must also buy LGL Electronics and LGL link to launcher(s))", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Laser Guidance Link to Launcher",              "Cost": "50",    "Space": "",	    "Weight": "",      "DP": "",   "Notes": "Required for ea. Launcher; (must also buy LGL tuning per round, and LGL Electronics)", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Laser Reactive Web",                           "Cost": "100",   "Space": "",	    "Weight": "",      "DP": "",   "Notes": "Per armor Location", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Magazine Switch",                              "Cost": "250",   "Space": "",	    "Weight": "",      "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Nitrous Oxide",                                "Cost": "500",   "Space": "1",	"Weight": "20",    "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "No-Paint Windshield",                          "Cost": "1000",  "Space": "",	    "Weight": "",      "DP": "",   "Notes": "Paint Clouds have no Effect", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Overdrive",                                    "Cost": "600",   "Space": "",	    "Weight": "",      "DP": "",   "Notes": "Increases top speed 20 mph when activated; one perchase per vehicle", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Radio Detonator - receiver",                   "Cost": "50",    "Space": "",	    "Weight": "",      "DP": "",   "Notes": "per munition equipped", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Radio Detonator - sender",                     "Cost": "500",   "Space": "",	    "Weight": "",      "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Remote Control Guidance System - Reciever",    "Cost": "2000",  "Space": "",	    "Weight": "",      "DP": "",   "Notes": "AADA banned", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Remote Control Guidance System - Transmitter", "Cost": "2000",  "Space": "3",	"Weight": "200",   "DP": "",   "Notes": "AADA banned", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Retractable Wheelguards",                      "Cost": "250",   "Space": "1",	"Weight": "50",    "DP": "",   "Notes": "Per Pair + cost & wt of wheelguard itself", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Rocket Magazine",                              "Cost": "50",    "Space": "0",    "Weight": "15",    "DP": "",   "Notes": "Per spc of capacity (up to 3 per magazine)", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Rocket EWP - One-space",                       "Cost": "250",   "Space": "-1",	"Weight": "75",    "DP": "",   "Notes": "Mounts single-shot rockets only; may not be armored or magazine fed.", "Turret Size":  0, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Rocket EWP - Two-space",                       "Cost": "500",   "Space": "-2",	"Weight": "125",   "DP": "",   "Notes": "Mounts single-shot rockets only; may not be armored or magazine fed.", "Turret Size":  2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Rocket EWP - Three-space",                     "Cost": "1000",  "Space": "-3",	"Weight": "200",   "DP": "",   "Notes": "Mounts single-shot rockets only; may not be armored or magazine fed.", "Turret Size":  3, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Rocket EWP - Four-space",                      "Cost": "1500",  "Space": "-4",	"Weight": "300",   "DP": "",   "Notes": "Mounts single-shot rockets only; may not be armored or magazine fed.", "Turret Size":  4, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Rocket Platform - Large",                      "Cost": "150",   "Space": "-3",	"Weight": "200",   "DP": "",   "Notes": "", "Turret Size":  3, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Rocket Platform - Mini",                       "Cost": "75",    "Space": "-1",	"Weight": "50",    "DP": "",   "Notes": "", "Turret Size":  0, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Rocket Platform - Small",                      "Cost": "100",   "Space": "-2",	"Weight": "100",   "DP": "",   "Notes": "", "Turret Size":  2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Roll Cage",                                    "Cost": "900",   "Space": "1",	"Weight": "420",   "DP": "1",  "Notes": "Must be original equipment", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Rotary Magazine",                              "Cost": "500",   "Space": "",	    "Weight": "10",    "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Safety Seat",                                  "Cost": "500",   "Space": "",	    "Weight": "25",    "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Snow Tires",                                   "Cost": "600",   "Space": "",	    "Weight": "",      "DP": "",   "Notes": "Cannot be used with Racing Slicks; one purchase per vehicle", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Snow Tires, Off-Road",                         "Cost": "300",   "Space": "",	    "Weight": "",      "DP": "",   "Notes": "Cannot be used with Racing Slicks; one purchase per vehicle", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Sponson Turret Mount - 1 space",               "Cost": "750",   "Space": "0",	"Weight": "75",    "DP": "",   "Notes": "Uses 1spc GIVES 1 Spc for Weap.Compact +", "Turret Size": 1, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Sponson Turret Mount - 2 space",               "Cost": "1125",  "Space": "0",	"Weight": "100",   "DP": "",   "Notes": "Uses 2spc GIVES 2 Spc for Weap. Midsize +", "Turret Size": 2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Sponson Turret Mount - 3 space",               "Cost": "1875",  "Space": "-1",	"Weight": "150",   "DP": "",   "Notes": "Uses 2spc but GIVES 3 Spc for Weap. Camper +", "Turret Size": 3, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Sponson Turret Mount - 4 space",               "Cost": "2625",  "Space": "-2",	"Weight": "200",   "DP": "",   "Notes": "Uses 2spc but GIVES 4 Spc for Weap. Oversized Only", "Turret Size":  4, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Tinted Windows",                               "Cost": "500",   "Space": "",	    "Weight": "",      "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Tire Chains",                                  "Cost": "150",   "Space": "",	    "Weight": "5",     "DP": "",   "Notes": "One purchase per vehicle", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Turret - Four-space",                          "Cost": "3500",  "Space": "-2",	"Weight": "400",   "DP": "",   "Notes": "Uses 2spc but GIVES 4 Spc for Weap. Oversized ", "Turret Size": 4, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Turret - Pop-up - Zero-space",                 "Cost": "1750",  "Space": "1",	"Weight": "150",   "DP": "",   "Notes": "Uses 1spc For Targeting Laser Only.", "Turret Size":  0, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Turret - Pop-up - One-space",                  "Cost": "2000",  "Space": "0",	"Weight": "300",   "DP": "",   "Notes": "Uses 1spc GIVES 1 Spc for Weap. Compact+", "Turret Size":  1, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Turret - Pop-up - Two-space",                  "Cost": "2500",  "Space": "2",	"Weight": "350",   "DP": "",   "Notes": "Uses 4spc GIVES 2 Spc for Weap. Midsize +", "Turret Size":  2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Turret - Pop-up - Three-space",                "Cost": "3500",  "Space": "2",	"Weight": "450",   "DP": "",   "Notes": "Uses 5spc GIVES 3 Spc for Weap. Camper+", "Turret Size":  3, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Turret - Pop-up - Four-space",                 "Cost": "4500",  "Space": "2",	"Weight": "600",   "DP": "",   "Notes": "Uses 6spc GIVES 4 Spc for Weap. Oversized Only", "Turret Size":  4, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Universal mod for Turret, Cupola, Platform",   "Cost": "1000",  "Space": "",	    "Weight": "",      "DP": "",   "Notes": "Per mount.  Allows vertical firing above 45 degrees (straight up)", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Universal mount for Cycle Turret Sidecar",     "Cost": "1000",  "Space": "",	    "Weight": "",      "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Weapon Concealment",                           "Cost": "250",   "Space": "",	    "Weight": "50",    "DP": "",   "Notes": "For 1 and 2 space weapons only.  See end of list for larger weapon concealment.", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Weapon Concealment - 3+ space weapons",        "Cost": "250",   "Space": "",	    "Weight": "50",    "DP": "",   "Notes": "Uses 1 space per weapon", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Weapon Timer",                                 "Cost": "350",   "Space": "",	    "Weight": "",      "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Airbag Restraints",                            "Cost": "200",   "Space": "",	    "Weight": "10",    "DP": "",   "Notes": "", "Turret Size": -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Amphibious Modifications",                     "Cost": "6000",  "Space": "2",	"Weight": "200",   "DP": "4",  "Notes": "Cars, and trikes only; AADA banned.", "Turret Size": -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Anti-radar Camo Netting",                      "Cost": "105",   "Space": "0.5",	"Weight": "60",    "DP": "",   "Notes": "per 0.5-inch covered; must specify terrain", "Turret Size": -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Anti-theft System",                            "Cost": "1000",  "Space": "",	    "Weight": "",      "DP": "",   "Notes": "Plus cost and weight of linked dischargers.", "Turret Size": -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Armored Beer Refrigerator",                    "Cost": "250",   "Space": "2",	"Weight": "50",    "DP": "20", "Notes": "fireproof; AADA banned", "Turret Size": -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Armored Minifridge",                           "Cost": "100",   "Space": "1",	"Weight": "30",    "DP": "10", "Notes": "fireproof; AADA banned", "Turret Size": -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Armored Searchlight",                          "Cost": "500",   "Space": "1",	"Weight": "75",    "DP": "5",  "Notes": "AADA banned if used as damage sink", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Assault Ramp",                                 "Cost": "1000",  "Space": "1",	"Weight": "10",    "DP": "",   "Notes": "Vans only", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "ATAD - Central Logic Unit",                    "Cost": "4000",  "Space": "",	    "Weight": "",      "DP": "",   "Notes": "Buy weapon sensors seperately; AADA banned", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "ATAD - Sensor Package",                        "Cost": "1000",  "Space": "",	    "Weight": "",      "DP": "",   "Notes": "Per weapon or set of linked weapons; must buy CLU; AADA banned.", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Autopilot",                                    "Cost": "9000",  "Space": "",	    "Weight": "50",    "DP": "",   "Notes": "AADA banned", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Birdcatcher",                                  "Cost": "1000",  "Space": "",	    "Weight": "",      "DP": "",   "Notes": "Destroyed with Power Plant", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Body Blades",                                  "Cost": "33",    "Space": "",	    "Weight": "15",    "DP": "",   "Notes": "$$/Wt Same as 3 pts armor", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Bollix",                                       "Cost": "5000",  "Space": "2",	"Weight": "200",   "DP": "1",  "Notes": "AADA banned", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Brushcutter",                                  "Cost": "100",   "Space": "",	    "Weight": "20",    "DP": "",   "Notes": "Adds 2 hits to pedestrian damage; no hazard from small trees.", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Brushcutter - Retractable",                    "Cost": "250",   "Space": "1",	"Weight": "30",    "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Bulk Ammo Boxes",                              "Cost": "50",    "Space": "1",	"Weight": "10",    "DP": "5",  "Notes": "FireProof; AADA banned", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Camouflage Netting",                           "Cost": "35",    "Space": "0.5",	"Weight": "20",    "DP": "",   "Notes": "per 0.5 inch square; specify terrain", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Car Top Carrier - 2 space",                    "Cost": "100",   "Space": "",	    "Weight": "50",    "DP": "",   "Notes": "armor at $5/2 / point", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Car Top Carrier - 4 space",                    "Cost": "200",   "Space": "",	    "Weight": "100",   "DP": "",   "Notes": "armor at $7/3 / point", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Car Top Carrier - 6 space",                    "Cost": "400",   "Space": "",	    "Weight": "150",   "DP": "",   "Notes": "armor at $11/6 / point", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Cargo Safe",                                   "Cost": "22000", "Space": "15",	"Weight": "12000", "DP": "",   "Notes": "AADA banned", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Compact Television (CTV)",                     "Cost": "700",   "Space": "",	    "Weight": "",      "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Computer Gunner",                              "Cost": "6000",  "Space": "",	    "Weight": "10",    "DP": "",   "Notes": " +1 to Hit; AADA banned", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Computer Gunner/Autopilot Software",           "Cost": "2500",  "Space": "",	    "Weight": "",      "DP": "",   "Notes": " +1 to Hit OR +1 to HC; AADA banned", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Computer Navigator",                           "Cost": "500",   "Space": "",	    "Weight": "",      "DP": "",   "Notes": "AADA banned", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Convertible Hardtop",                          "Cost": "1500",  "Space": "2",	"Weight": "50",    "DP": "",   "Notes": "See UACFH p.68 for restrictions; max 20 pts plastic armor (4 pts. metal)", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Cupola - Three-space",                         "Cost": "3500",  "Space": "-1",	"Weight": "400",   "DP": "",   "Notes": "Uses 2 but gives 3 Weapon Spaces", "Turret Size":  3, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Cupola - Four-space",                          "Cost": "5500",  "Space": "-2",	"Weight": "500",   "DP": "",   "Notes": "Uses 2 But gives 4 Weapon Spaces", "Turret Size":  4, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Cuploa - Pop-up - Three-space",                "Cost": "4500",  "Space": "2",	"Weight": "600",   "DP": "",   "Notes": "Uses 5 but gives 3 Weapon Spaces.", "Turret Size":  3, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Cupola - Pop-up - Four-space",                 "Cost": "6500 ", "Space": "2",	"Weight": "750",   "DP": "",   "Notes": "Uses 6 but gives 4 Weapon Spaces", "Turret Size":  4, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Cycle Blades",                                 "Cost": "50",    "Space": "",     "Weight": "20",    "DP": "",   "Notes": "Adds 2 hits to pedestrian damage.  Destroyed in a roll.", "Turret Size":  -2, "Cycle Only": 1}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Cycle Blades - fake",                          "Cost": "20",    "Space": "",	    "Weight": "",      "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 1}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Cycle Turret Sidecar - 1 space",               "Cost": "1530",  "Space": "-2",	"Weight": "-270",  "DP": "",   "Notes": "Max load 550#; 1 weapon space, 1 magazine space; includes first point of armor for 6 facings", "Turret Size":  -2, "Cycle Only": 1}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Cycle Turret Sidecar - 2 space",               "Cost": "2530",  "Space": "-3",	"Weight": "-320",  "DP": "",   "Notes": "Max load 800#; 2 weapon spaces, 1 magazine space; includes first point of armor for 6 facings", "Turret Size":  -2, "Cycle Only": 1}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Cycle Turret Sidecar Armor - 1 space",         "Cost": "5",     "Space": "",	    "Weight": "5",     "DP": "",   "Notes": "per point.  First point for all six faces included with sidecar.", "Turret Size":  -2, "Cycle Only": 1}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Cycle Turret Sidecar Armor - 2 space",         "Cost": "5",     "Space": "",	    "Weight": "6",     "DP": "",   "Notes": "per point.  First point for all six faces included with sidecar.", "Turret Size":  -2, "Cycle Only": 1}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Cycle Wheelhubs/guards - Plastic",             "Cost": "10",    "Space": "",	    "Weight": "2",     "DP": "",   "Notes": "Per point of armor, max wt 20lbs; must match vehicular armor type", "Turret Size":  -2, "Cycle Only": 1}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Cycle Wheelhubs/guards - MET",                 "Cost": "25",    "Space": "",	    "Weight": "10",    "DP": "",   "Notes": "Per point of armor, max wt 20lbs; must match vehicular armor type", "Turret Size":  -2, "Cycle Only": 1}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Cycle Windshell",                              "Cost": "500",   "Space": "",	    "Weight": "50",    "DP": "2",  "Notes": "Pair with spoiler for full effect!  Cannot be combined with sidecar", "Turret Size":  -2, "Cycle Only": 1}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Cycle Windshell Armor - Normal",               "Cost": "10",    "Space": "",	    "Weight": "5",     "DP": "",   "Notes": "per point; max 50 lbs", "Turret Size":  -2, "Cycle Only": 1}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Cycle Windshell Armor - MET",                  "Cost": "25",    "Space": "",	    "Weight": "25",    "DP": "",   "Notes": "per point; max 50 lbs", "Turret Size":  -2, "Cycle Only": 1}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Deadman Sensor",                               "Cost": "100",   "Space": "",	    "Weight": "",      "DP": "",   "Notes": "AADA banned", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Deadman Switch",                               "Cost": "100",   "Space": "",	    "Weight": "",      "DP": "",   "Notes": "AADA banned", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Deluxe Galley",                                "Cost": "2000",  "Space": "8",	"Weight": "500",   "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Drag Chute - Normal",                          "Cost": "300",   "Space": "1",	"Weight": "20",    "DP": "1",  "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Drag Chute - FP",                              "Cost": "450",   "Space": "1",	"Weight": "20",    "DP": "1",  "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Ejection Seat",                                "Cost": "500",   "Space": "",	    "Weight": "100",   "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Ejection Seat - no chute or glider",           "Cost": "400",   "Space": "",	    "Weight": "100",   "DP": "",   "Notes": "User takes 3d+3 damage upon landing, preventable only by impact armor", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "ERIS Receiver",                                "Cost": "100",   "Space": "",	    "Weight": "",      "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Extra Driver Controls",                        "Cost": "1000",  "Space": "",	    "Weight": "50",    "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Fake Blades",                                  "Cost": "20",    "Space": "",	    "Weight": "",      "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Fake Passengers",                              "Cost": "50",    "Space": "1",	"Weight": "25",    "DP": "1",  "Notes": "AADA banned", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Fake Ramplate",                                "Cost": "150",   "Space": "",	    "Weight": "70",    "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Fake Turret",                                  "Cost": "250",   "Space": "",	    "Weight": "50",    "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Fake Weapons",                                 "Cost": "100",   "Space": "",	    "Weight": "20",    "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Fake Wheelguards and Armored Hubs",            "Cost": "2",     "Space": "",	    "Weight": "1",     "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Galley",                                       "Cost": "750",   "Space": "2",	"Weight": "150",   "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Jettison Joinings",                            "Cost": "300",   "Space": "",	    "Weight": "",      "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Hang Gliders",                                 "Cost": "500",   "Space": "1",	"Weight": "60",    "DP": "",   "Notes": " 1 GE when carried", "Turret Size": -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Hazard Detector",                              "Cost": "500",   "Space": "",	    "Weight": "",      "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Identification Friend or Foe (IFF)",           "Cost": "200",   "Space": "",	    "Weight": "",      "DP": "",   "Notes": "AADA banned", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Kamibombs",                                    "Cost": "100",   "Space": "1",	"Weight": "100",   "DP": "2",  "Notes": "AADA banned; multiple spaces may be combined into one bomb.", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Laser Comm Array - Comm Laser",                "Cost": "1750",  "Space": "0",	"Weight": "125",   "DP": "",   "Notes": "put on weapons list; to hit 6, no damage, can be used as targeting laser", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Laser Comm Array - Comm Target Round",         "Cost": "200",   "Space": "",	    "Weight": "",      "DP": "",   "Notes": "per side equippped", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Laser Comm Array - Computer",                  "Cost": "3000",  "Space": "",	    "Weight": "",      "DP": "",   "Notes": "Required to send or receive", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Life Raft",                                    "Cost": "500",   "Space": "",	    "Weight": "25",    "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Long-Distance Radio",                          "Cost": "600",   "Space": "",	    "Weight": "",      "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Long-Range Radar",                             "Cost": "10000", "Space": "1",	"Weight": "100",   "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Mini-Safe - Large",                            "Cost": "700",   "Space": "4",	"Weight": "150",   "DP": "",   "Notes": "AADA banned", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Mini-Safe - Small",                            "Cost": "150",   "Space": "1",	"Weight": "20",    "DP": "",   "Notes": "AADA banned", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Motion Compensator",                           "Cost": "0",     "Space": "",	    "Weight": "",      "DP": "",   "Notes": "$5*loaded wt. of weapon, 10% of weapon's unloaded wt.  Use Misc fields.", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Nuclear/Biological/Chemical Shielding (NBC)",  "Cost": "60000", "Space": "1",	"Weight": "50",    "DP": "2",  "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Oversized Vehicle Airfoils",                   "Cost": "1500",  "Space": "",	    "Weight": "150",   "DP": "4",  "Notes": "Per Pair", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Passenger Accomodations",                      "Cost": "500",   "Space": "2",	"Weight": "100",   "DP": "",   "Notes": "Per Passenger", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Personal Parachute",                           "Cost": "200",   "Space": "",	    "Weight": "20",    "DP": "4",  "Notes": "2 GE", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Pickup Racks",                                 "Cost": "150",   "Space": "",	    "Weight": "25",    "DP": "3",  "Notes": "Adds 8 cargo spaces; pickups only; AADA banned", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Pintle Mount, 1-space",                        "Cost": "150",   "Space": "",	    "Weight": "20",    "DP": "",   "Notes": "Mounts any one 1-space weapon", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Pintle Mount, 2-space",                        "Cost": "300",   "Space": "",	    "Weight": "40",    "DP": "",   "Notes": "Mounts any one 2-space weapon", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Portable Camera",                              "Cost": "400",   "Space": "",	    "Weight": "",      "DP": "",   "Notes": "1 GE", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Portable Earth Station",                       "Cost": "700",   "Space": "2",	"Weight": "150",   "DP": "1",  "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Portable Shop",                                "Cost": "4000",  "Space": "4",	"Weight": "300",   "DP": "8",  "Notes": "Four separate cases.", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Radar",                                        "Cost": "2500",  "Space": "",	    "Weight": "",      "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Radar Detector",                               "Cost": "300",   "Space": "",	    "Weight": "",      "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Radar Jammer",                                 "Cost": "3000",  "Space": "",	    "Weight": "",      "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Searchlight",                                  "Cost": "200",   "Space": "1",	"Weight": "50",    "DP": "1",  "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Semi-Trailer Emergency Plate",                 "Cost": "1500",  "Space": "2",	"Weight": "800",   "DP": "8",  "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Skid Stretchers",                              "Cost": "300",   "Space": "",	    "Weight": "25",    "DP": "2",  "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Sonar",                                        "Cost": "4000",  "Space": "1",	"Weight": "100",   "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Sound Enhancement",                            "Cost": "6000",  "Space": "1",	"Weight": "150",   "DP": "2",  "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Sound System",                                 "Cost": "1000",  "Space": "1",	"Weight": "100",   "DP": "2",  "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Spinal Mounting for Autocannon",               "Cost": "1500",  "Space": "1",	"Weight": "",      "DP": "",   "Notes": "Purchase Autocannon in Weapons Section", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Spinal Mounting for Anti-Tank Gun",            "Cost": "1000",  "Space": "1",	"Weight": "",      "DP": "",   "Notes": "Purchase ATG in Weapons Section", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Spinal Mounting for Blast Canon",              "Cost": "2000",  "Space": "1",	"Weight": "",      "DP": "",   "Notes": "Purchase Blast Cannon in Weapons Section", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Spinal Mounting for Heavy Recoilless Rifle",   "Cost": "2000",  "Space": "1",	"Weight": "",      "DP": "",   "Notes": "Purchase HRR in Weapons Section", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Spinal Mounting for Heavy VMG",                "Cost": "1500",  "Space": "1",	"Weight": "",      "DP": "",   "Notes": "Purchase HVMG in Weapons Section", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Spinal Mounting for Gatling Cannon",           "Cost": "2000",  "Space": "2",	"Weight": "",      "DP": "",   "Notes": "Purchase Gatling Cannon in Weapons Section", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Spinal Mounting for RFTG",                     "Cost": "2500",  "Space": "2",	"Weight": "",      "DP": "",   "Notes": "Purchase RFTG in Weapons Section", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Spinal Mounting for 75mm Tank Gun",            "Cost": "2000",  "Space": "2",	"Weight": "",      "DP": "",   "Notes": "Purchase 75mm Tank Gun in Weapons Section", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Spinal Mounting for Magnetic Cannon",          "Cost": "3000",  "Space": "2",	"Weight": "",      "DP": "",   "Notes": "Purchase Magnetic Cannon in Weapons Section", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Spinal Mounting for HD Flame Thrower",         "Cost": "750",   "Space": "1",	"Weight": "",      "DP": "",   "Notes": "Purchase HD Flame Thrower in Weapons Section", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Spinal Mounting for Military Flame Thrower",   "Cost": "1000",  "Space": "1",	"Weight": "",      "DP": "",   "Notes": "Purchase Military FT in Weapons Section", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Stealth- Cars",                                "Cost": "6000",  "Space": "1",	"Weight": "150",   "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Stealth - Cycles & Trikes",                    "Cost": "3000",  "Space": "1",	"Weight": "75",    "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "StealthKote Shield",                           "Cost": "110",   "Space": "0",	"Weight": "0",     "DP": "1",  "Notes": "Per armor facing.  StealthKoted shielding destroyed first when face damaged.", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Sunroof",                                      "Cost": "500",   "Space": "",	    "Weight": "25",    "DP": "",   "Notes": "", "Turret Size": 1, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Surge Protector",                              "Cost": "250",   "Space": "",	    "Weight": "",      "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Tow Bar",                                      "Cost": "500",   "Space": "",	    "Weight": "25",    "DP": "",   "Notes": "1 spc as cargo", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Truck Turbo",                                  "Cost": "2000",  "Space": "1",	"Weight": "50",    "DP": "",   "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Vehicular Camera",                             "Cost": "1500",  "Space": "0.5",	"Weight": "25",    "DP": "1",  "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Vehicular Computer",                           "Cost": "4000",  "Space": "",	    "Weight": "",      "DP": "",   "Notes": "Same as targeting computer; also runs other applications.", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Vehicular Parachute",                          "Cost": "1500",  "Space": "3",	"Weight": "150",   "DP": "4",  "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Voice Control Software",                       "Cost": "200",   "Space": "",	    "Weight": "",      "DP": "",   "Notes": "Requires Autopilot or Vehicular Computer", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Waterproofed Weapons",                         "Cost": "0",     "Space": "",	    "Weight": "",      "DP": "",   "Notes": " +25% of unloaded weapon cost; use Misc field", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)
        entry_dict: dict = {"Accessory Name": "Winch",                                        "Cost": "500",   "Space": "1",	"Weight": "100",   "DP": "1",  "Notes": "", "Turret Size":  -2, "Cycle Only": 0}
        self.accessories_list.append(entry_dict)

    def get_accessories_options(self):
        """Use the existing self.accessories_list and generate a list based on the Accessory Name
           This will allow any dynamic changes to be accurately represented"""
        options: list = []
        for entry in self.accessories_list:
            accessory_name: str = entry.get("Accessory Name")
            options.append(accessory_name)
        return options

    def get_outer_armor_dictionaries(self):
        self.outer_armor_list = []
        entry_dict: dict = {"Outer Armor": "Outer Armor",                "Cost": "0",    "Weight": "0",   "Abbr": "None"}
        self.outer_armor_list.append(entry_dict)
        entry_dict: dict = {"Outer Armor": "Normal Plastic Outer Armor", "Cost": "1",    "Weight": "1",   "Abbr": "Normal"}
        self.outer_armor_list.append(entry_dict)
        entry_dict: dict = {"Outer Armor": "FP Plastic Outer Armor",     "Cost": "2",    "Weight": "1",   "Abbr": "	FP"}
        self.outer_armor_list.append(entry_dict)
        entry_dict: dict = {"Outer Armor": "LR Plastic Outer Armor",     "Cost": "1.1",  "Weight": "1.1", "Abbr": "LR"}
        self.outer_armor_list.append(entry_dict)
        entry_dict: dict = {"Outer Armor": "LRFP Plastic Outer Armor",   "Cost": "2.5",  "Weight": "1.1", "Abbr": "LRFP"}
        self.outer_armor_list.append(entry_dict)
        entry_dict: dict = {"Outer Armor": "RP Plastic Outer Armor",     "Cost": "2",    "Weight": "1",   "Abbr": "RP"}
        self.outer_armor_list.append(entry_dict)
        entry_dict: dict = {"Outer Armor": "RPFP Plastic Outer Armor",   "Cost": "4",    "Weight": "1",   "Abbr": "RPFP"}
        self.outer_armor_list.append(entry_dict)
        entry_dict: dict = {"Outer Armor": "MET Outer Armor",            "Cost": "2.5",  "Weight": "5",   "Abbr": "MET"}
        self.outer_armor_list.append(entry_dict)
        entry_dict: dict = {"Outer Armor": "LR MET Outer Armor",         "Cost": "2.75", "Weight": "5",   "Abbr": "LR MET"}
        self.outer_armor_list.append(entry_dict)

    def get_inner_armor_dictionaries(self):
        self.inner_armor_list = []
        entry_dict: dict = {"Inner Armor": "Inner Armor",                "Cost": "0",    "Weight": "0",   "Abbr": "None"}
        self.inner_armor_list.append(entry_dict)
        entry_dict: dict = {"Inner Armor": "Normal Plastic Inner Armor", "Cost": "1",    "Weight": "1",   "Abbr": "Normal"}
        self.inner_armor_list.append(entry_dict)
        entry_dict: dict = {"Inner Armor": "FP Plastic Inner Armor",     "Cost": "2",    "Weight": "1",   "Abbr": "	FP"}
        self.inner_armor_list.append(entry_dict)
        entry_dict: dict = {"Inner Armor": "LR Plastic Inner Armor",     "Cost": "1.1",  "Weight": "1.1", "Abbr": "LR"}
        self.inner_armor_list.append(entry_dict)
        entry_dict: dict = {"Inner Armor": "LRFP Plastic Inner Armor",   "Cost": "2.5",  "Weight": "1.1", "Abbr": "LRFP"}
        self.inner_armor_list.append(entry_dict)
        entry_dict: dict = {"Inner Armor": "RP Plastic Inner Armor",     "Cost": "2",    "Weight": "1",   "Abbr": "RP"}
        self.inner_armor_list.append(entry_dict)
        entry_dict: dict = {"Inner Armor": "RPFP Plastic Inner Armor",   "Cost": "4",    "Weight": "1",   "Abbr": "RPFP"}
        self.inner_armor_list.append(entry_dict)
        entry_dict: dict = {"Inner Armor": "MET Inner Armor",            "Cost": "2.5",  "Weight": "5",   "Abbr": "MET"}
        self.inner_armor_list.append(entry_dict)
        entry_dict: dict = {"Inner Armor": "LR MET Inner Armor",         "Cost": "2.75", "Weight": "5",   "Abbr": "LR MET"}
        self.inner_armor_list.append(entry_dict)

    def get_outer_armor_options(self):
        options: list = []
        for entry in self.outer_armor_list:
            outer_armor_name: str = entry.get("Outer Armor")
            options.append(outer_armor_name)
        return options

    def get_inner_armor_options(self):
        options: list = []
        for entry in self.inner_armor_list:
            inner_armor_name: str = entry.get("Inner Armor")
            options.append(inner_armor_name)
        return options

    def launch_it(self):
        self.root.mainloop()

    def get_weapon_options_alt(self) -> list:
        """ This will be a comma delimited list of every single selectable weapon in the weapons list.
            This won't be pretty."""
        options = ["Weapon",
                   "SMALL BORE WEAPONS",
                   "LARGE BORE WEAPONS",
                   "GRENADE LAUNCHERS",
                   "GRENADE AMMO",
                   "ROCKETS",
                   "ENERGY WEAPONS",
                   "FLAMETHROWERS",
                   "DROPPED GASSES",
                   "DROPPED LIQUIDS",
                   "DROPPED SOLIDS",
                   "MINEDROPPERS",
                   "DISCHARGERS"]
        return options

    def on_select_sub_weapon_alt_1(self, *args):
        selected_value = self.selected_sub_weapon_1.get()
        for entry in self.temp_dropdown_list:
            drop_down_name: str = entry.get("Drop-Down Name")
            if selected_value == drop_down_name:
                self.add_to_sub_weapon_row_1(entry)

    def on_select_sub_weapon_alt_1_canvas(self, *args):
        selected_value = self.selected_sub_weapon_1_canvas.get()
        for entry in self.temp_dropdown_list:
            drop_down_name: str = entry.get("Drop-Down Name")
            if selected_value == drop_down_name:
                self.add_to_sub_weapon_row_1(entry)

    def get_weapon_options_sub_list(self, input_list: list):
        options: list = []
        for entry in input_list:
            weapon_name: str = entry.get("Drop-Down Name")
            options.append(weapon_name)
        return options

    def get_weapon_dictionaries_alt(self):
        """ This will be a comma delimited list of every single selectable weapon in the weapons list.
            This won't be even prettier."""
        self.weapons_small_bore_list = []
        self.weapons_large_bore_list = []
        self.weapons_grenade_launchers_list = []
        self.weapons_grenade_ammo_list = []
        self.weapons_rockets_list = []
        self.weapons_missiles_list = []
        self.weapons_energy_list = []
        self.weapons_flamethrower_list = []
        self.weapons_dropped_gas_list = []
        self.weapons_dropped_liquid_list = []
        self.weapons_dropped_solid_list = []
        self.weapons_minedroppers_list = []
        self.weapons_dischargers_list = []
        #entry_dict: dict = {'Weapon Name': '',                                  'Drop-Down Name': 'Weapon',                                            'Ammo Type': '',                            'Abbv': '',                            'Effect': '',                    'To- Hit': '0',      'Dam': '',                   'DP': '0',  'Cost': '0',      'Weight': '0',    'Space': '0 ',           'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '0',      'Loaded Weight': '0',    'Mag Cost': '0',     'Mag Weight': '0'}
        #self.weapons_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '',                                  'Drop-Down Name': 'SMALL BORE WEAPONS',                                'Ammo Type': '',                            'Abbv': '',                            'Effect': '',                    'To- Hit': '',       'Dam': '',                   'DP': '',   'Cost': '',       'Weight': '',     'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Light Machine Gun',                 'Drop-Down Name': 'Light Machine Gun - Reg.',                          'Ammo Type': 'Reg',                         'Abbv': 'LMG',                         'Effect': 'Area',                'To- Hit': '7',      'Dam': '1D-1',               'DP': '2',  'Cost': '850',    'Weight': '100',  'Space': '1 ',           'Shots': '20', 'Shot Cost': '20',    'Shot Weight': '2.5'   ,'Loaded Cost': '1250',   'Loaded Weight': '150',  'Mag Cost': '450',   'Mag Weight': '65'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Light Machine Gun',                 'Drop-Down Name': 'Light Machine Gun - HD Ammo',                       'Ammo Type': 'HD Ammo',                     'Abbv': 'LGM w/HD',                    'Effect': 'Area',                'To- Hit': '7',      'Dam': '1D',                 'DP': '2',  'Cost': '850',    'Weight': '100',  'Space': '1 ',           'Shots': '20', 'Shot Cost': '40',    'Shot Weight': '5'     ,'Loaded Cost': '1650',   'Loaded Weight': '200',  'Mag Cost': '850',   'Mag Weight': '115'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Light Machine Gun',                 'Drop-Down Name': 'Light Machine Gun - Incendiary',                    'Ammo Type': 'Incedenary',                  'Abbv': 'LGM w/inc',                   'Effect': 'Area',                'To- Hit': '7',      'Dam': '1D-1* (2/1)',        'DP': '2',  'Cost': '850',    'Weight': '100',  'Space': '1 ',           'Shots': '20', 'Shot Cost': '30',    'Shot Weight': '2.5'   ,'Loaded Cost': '1450',   'Loaded Weight': '150',  'Mag Cost': '650',   'Mag Weight': '65'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Light Machine Gun',                 'Drop-Down Name': 'Light Machine Gun - Anti-Pers.',                    'Ammo Type': 'Anti-Personnel',              'Abbv': 'LGM w/Anti',                  'Effect': 'Area',                'To- Hit': '7',      'Dam': '1D-1*',              'DP': '2',  'Cost': '850',    'Weight': '100',  'Space': '1 ',           'Shots': '20', 'Shot Cost': '100',   'Shot Weight': '2.5'   ,'Loaded Cost': '2850',   'Loaded Weight': '150',  'Mag Cost': '2050',  'Mag Weight': '65'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Light Machine Gun',                 'Drop-Down Name': 'Light Machine Gun - Explosive',                     'Ammo Type': 'Explosive',                   'Abbv': 'LGM w/Exp',                   'Effect': '1/2 inch Radius',     'To- Hit': '7',      'Dam': '1D-1',               'DP': '2',  'Cost': '850',    'Weight': '100',  'Space': '1 ',           'Shots': '20', 'Shot Cost': '40',    'Shot Weight': '5'     ,'Loaded Cost': '1650',   'Loaded Weight': '200',  'Mag Cost': '850',   'Mag Weight': '115'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Machine Gun',                       'Drop-Down Name': 'Machine Gun - Reg',                                 'Ammo Type': 'Reg',                         'Abbv': 'MG',                          'Effect': 'Area',                'To- Hit': '7',      'Dam': '1D',                 'DP': '3',  'Cost': '1000',   'Weight': '150',  'Space': '1',            'Shots': '20', 'Shot Cost': '25',    'Shot Weight': '2.5'   ,'Loaded Cost': '1500',   'Loaded Weight': '200',  'Mag Cost': '550',   'Mag Weight': '65'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Machine Gun',                       'Drop-Down Name': 'Machine Gun - HD Ammo',                             'Ammo Type': 'HD Ammo',                     'Abbv': 'MG W/HD',                     'Effect': 'Area',                'To- Hit': '7',      'Dam': '1D+1',               'DP': '3',  'Cost': '1000',   'Weight': '150',  'Space': '1',            'Shots': '20', 'Shot Cost': '50',    'Shot Weight': '5'     ,'Loaded Cost': '2000',   'Loaded Weight': '250',  'Mag Cost': '1050',  'Mag Weight': '115'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Machine Gun',                       'Drop-Down Name': 'Machine Gun - Incendiary',                          'Ammo Type': 'Incedenary',                  'Abbv': 'MG w/INC',                    'Effect': 'Area',                'To- Hit': '7',      'Dam': '1D (2/1)',           'DP': '3',  'Cost': '1000',   'Weight': '150',  'Space': '1',            'Shots': '20', 'Shot Cost': '38',    'Shot Weight': '2.5'   ,'Loaded Cost': '1750',   'Loaded Weight': '200',  'Mag Cost': '800',   'Mag Weight': '65'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Machine Gun',                       'Drop-Down Name': 'Machine Gun - Anti-Personnel',                      'Ammo Type': 'Anti-Personnel',              'Abbv': 'MG w/AP',                     'Effect': 'Area',                'To- Hit': '7',      'Dam': '1D',                 'DP': '3',  'Cost': '1000',   'Weight': '150',  'Space': '1',            'Shots': '20', 'Shot Cost': '125',   'Shot Weight': '2.5'   ,'Loaded Cost': '3500',   'Loaded Weight': '200',  'Mag Cost': '2550',  'Mag Weight': '65'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Machine Gun',                       'Drop-Down Name': 'Machine Gun - Explosive',                           'Ammo Type': 'Explosive',                   'Abbv': 'MG w/Exp',                    'Effect': '1/2 inch Radius',     'To- Hit': '7',      'Dam': '1D',                 'DP': '3',  'Cost': '1000',   'Weight': '150',  'Space': '1',            'Shots': '20', 'Shot Cost': '50',    'Shot Weight': '5'     ,'Loaded Cost': '2000',   'Loaded Weight': '250',  'Mag Cost': '1050',  'Mag Weight': '115'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Heavy Machine Gun',                 'Drop-Down Name': 'Heavy Machine Gun - Reg',                           'Ammo Type': 'Reg',                         'Abbv': 'HMG',                         'Effect': 'Area',                'To- Hit': '7',      'Dam': '2D-2',               'DP': '4',  'Cost': '1500',   'Weight': '250',  'Space': '1',            'Shots': '20', 'Shot Cost': '50',    'Shot Weight': '5'     ,'Loaded Cost': '2500',   'Loaded Weight': '350',  'Mag Cost': '1050',  'Mag Weight': '115'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Heavy Machine Gun',                 'Drop-Down Name': 'Heavy Machine Gun - HD Ammo',                       'Ammo Type': 'HD Ammo',                     'Abbv': 'HMG w/HD',                    'Effect': 'Area',                'To- Hit': '7',      'Dam': '2D',                 'DP': '4',  'Cost': '1500',   'Weight': '250',  'Space': '1',            'Shots': '20', 'Shot Cost': '100',   'Shot Weight': '10'    ,'Loaded Cost': '3500',   'Loaded Weight': '400',  'Mag Cost': '2050',  'Mag Weight': '215'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Heavy Machine Gun',                 'Drop-Down Name': 'Heavy Machine Gun - Incendiary',                    'Ammo Type': 'Incendiary',                  'Abbv': 'HMG w/Inc',                   'Effect': 'Area',                'To- Hit': '7',      'Dam': '2D-2* (2/1)',        'DP': '4',  'Cost': '1500',   'Weight': '250',  'Space': '1',            'Shots': '20', 'Shot Cost': '75',    'Shot Weight': '5'     ,'Loaded Cost': '3000',   'Loaded Weight': '300',  'Mag Cost': '1550',  'Mag Weight': '115'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Heavy Machine Gun',                 'Drop-Down Name': 'Heavy Machine Gun - Anti-Personnel',                'Ammo Type': 'Anti-Personnel',              'Abbv': 'HMG w/AP',                    'Effect': 'Area',                'To- Hit': '7',      'Dam': '2D-2*',              'DP': '4',  'Cost': '1500',   'Weight': '250',  'Space': '1',            'Shots': '20', 'Shot Cost': '250',   'Shot Weight': '5'     ,'Loaded Cost': '6500',   'Loaded Weight': '300',  'Mag Cost': '5050',  'Mag Weight': '115'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Heavy Machine Gun',                 'Drop-Down Name': 'Heavy Machine Gun - Explosive',                     'Ammo Type': 'Explosive',                   'Abbv': 'HMG w/EXP',                   'Effect': '1/2 inch Radius',     'To- Hit': '7',      'Dam': '2D-2',               'DP': '4',  'Cost': '1500',   'Weight': '250',  'Space': '1',            'Shots': '20', 'Shot Cost': '100',   'Shot Weight': '10'    ,'Loaded Cost': '3500',   'Loaded Weight': '400',  'Mag Cost': '2050',  'Mag Weight': '215'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Vulcan MG',                         'Drop-Down Name': 'Vulcan MG - Reg',                                   'Ammo Type': 'Reg',                         'Abbv': 'VMG',                         'Effect': 'Area',                'To- Hit': '6',      'Dam': '2D',                 'DP': '3',  'Cost': '2000',   'Weight': '350',  'Space': '2',            'Shots': '20', 'Shot Cost': '35',    'Shot Weight': '5'     ,'Loaded Cost': '2700',   'Loaded Weight': '450',  'Mag Cost': '750',   'Mag Weight': '115'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Vulcan MG',                         'Drop-Down Name': 'Vulcan MG - HD',                                    'Ammo Type': 'HD',                          'Abbv': 'VMG w/HD',                    'Effect': 'Area',                'To- Hit': '6',      'Dam': '2D+2',               'DP': '3',  'Cost': '2000',   'Weight': '350',  'Space': '2',            'Shots': '20', 'Shot Cost': '70',    'Shot Weight': '10'    ,'Loaded Cost': '3400',   'Loaded Weight': '550',  'Mag Cost': '1450',  'Mag Weight': '215'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Vulcan MG',                         'Drop-Down Name': 'Vulcan MG - Incendiary',                            'Ammo Type': 'Incendiary',                  'Abbv': 'VMG w/INC',                   'Effect': 'Area',                'To- Hit': '6',      'Dam': '2D (2/1)',           'DP': '3',  'Cost': '2000',   'Weight': '350',  'Space': '2',            'Shots': '20', 'Shot Cost': '53',    'Shot Weight': '5'     ,'Loaded Cost': '3050',   'Loaded Weight': '450',  'Mag Cost': '1100',  'Mag Weight': '115'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Vulcan MG',                         'Drop-Down Name': 'Vulcan MG - Antipersonnel',                         'Ammo Type': 'Antipersonnel',               'Abbv': 'VMG w/AP',                    'Effect': 'Area',                'To- Hit': '6',      'Dam': '2D',                 'DP': '3',  'Cost': '2000',   'Weight': '350',  'Space': '2',            'Shots': '20', 'Shot Cost': '175',   'Shot Weight': '5'     ,'Loaded Cost': '5500',   'Loaded Weight': '450',  'Mag Cost': '3550',  'Mag Weight': '115'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Vulcan MG',                         'Drop-Down Name': 'Vulcan MG - Explosive',                             'Ammo Type': 'Explosive',                   'Abbv': 'VMG w/EXP',                   'Effect': '1/4" Radius',         'To- Hit': '6',      'Dam': '2D',                 'DP': '3',  'Cost': '2000',   'Weight': '350',  'Space': '2',            'Shots': '20', 'Shot Cost': '70',    'Shot Weight': '10'    ,'Loaded Cost': '3400',   'Loaded Weight': '550',  'Mag Cost': '1450',  'Mag Weight': '215'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Heavy Vulcan Machine Gun',          'Drop-Down Name': 'Heavy Vulcan Machine Gun - Reg',                    'Ammo Type': 'Reg',                         'Abbv': 'HVMG',                        'Effect': 'Area',                'To- Hit': '6',      'Dam': '4D',                 'DP': '5',  'Cost': '7000',   'Weight': '650',  'Space': '3',            'Shots': '10', 'Shot Cost': '75',    'Shot Weight': '15'    ,'Loaded Cost': '7750',   'Loaded Weight': '800',  'Mag Cost': '800',   'Mag Weight': '165'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Heavy Vulcan Machine Gun',          'Drop-Down Name': 'Heavy Vulcan Machine Gun - HD Ammo',                'Ammo Type': 'HD',                          'Abbv': 'HVMG w/HD',                   'Effect': 'Area',                'To- Hit': '6',      'Dam': '4D+4',               'DP': '5',  'Cost': '7000',   'Weight': '650',  'Space': '3',            'Shots': '10', 'Shot Cost': '150',   'Shot Weight': '30'    ,'Loaded Cost': '8500',   'Loaded Weight': '950',  'Mag Cost': '1550',  'Mag Weight': '315'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Heavy Vulcan Machine Gun',          'Drop-Down Name': 'Heavy Vulcan Machine Gun - Incendiary',             'Ammo Type': 'Incendiary',                  'Abbv': 'HVMG w/INC',                  'Effect': 'Area',                'To- Hit': '6',      'Dam': '4D* (2/1)',          'DP': '5',  'Cost': '7000',   'Weight': '650',  'Space': '3',            'Shots': '10', 'Shot Cost': '113',   'Shot Weight': '15'    ,'Loaded Cost': '8125',   'Loaded Weight': '800',  'Mag Cost': '1175',  'Mag Weight': '165'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Heavy Vulcan Machine Gun',          'Drop-Down Name': 'Heavy Vulcan Machine Gun - Anti-Personnel',         'Ammo Type': 'Antipersonnel',               'Abbv': 'HVMG w/AP',                   'Effect': 'Area',                'To- Hit': '6',      'Dam': '4D*',                'DP': '5',  'Cost': '7000',   'Weight': '650',  'Space': '3',            'Shots': '10', 'Shot Cost': '375',   'Shot Weight': '15'    ,'Loaded Cost': '8125',   'Loaded Weight': '800',  'Mag Cost': '1175',  'Mag Weight': '165'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Heavy Vulcan Machine Gun',          'Drop-Down Name': 'Heavy Vulcan Machine Gun - Explosive',              'Ammo Type': 'Explosive',                   'Abbv': 'HVMG w/EXP',                  'Effect': '1/2 inch Radius',     'To- Hit': '6',      'Dam': '4D',                 'DP': '5',  'Cost': '7000',   'Weight': '650',  'Space': '3',            'Shots': '10', 'Shot Cost': '150',   'Shot Weight': '30'    ,'Loaded Cost': '8500',   'Loaded Weight': '950',  'Mag Cost': '1550',  'Mag Weight': '315'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Flechette Gun',                     'Drop-Down Name': 'Flechette Gun',                                     'Ammo Type': 'Normal',                      'Abbv': 'FG',                          'Effect': 'Area',                'To- Hit': '6',      'Dam': '1D+1',               'DP': '2',  'Cost': '700',    'Weight': '100',  'Space': '1',            'Shots': '20', 'Shot Cost': '10',    'Shot Weight': '2.5'   ,'Loaded Cost': '900',    'Loaded Weight': '150',  'Mag Cost': '250',   'Mag Weight': '65'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Vehicular Shotgun',                 'Drop-Down Name': 'Vehicular Shotgun',                                 'Ammo Type': 'Normal',                      'Abbv': 'VS',                          'Effect': 'Area',                'To- Hit': '6',      'Dam': '2 Hits',             'DP': '2',  'Cost': '950',    'Weight': '90',   'Space': '1',            'Shots': '10', 'Shot Cost': '5',     'Shot Weight': '1'     ,'Loaded Cost': '1000',   'Loaded Weight': '100',  'Mag Cost': '100',   'Mag Weight': '25'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Gauss Gun',                         'Drop-Down Name': 'Gauss Gun',                                         'Ammo Type': 'Normal',                      'Abbv': 'GG',                          'Effect': 'Area',                'To- Hit': '6',      'Dam': '3D',                 'DP': '3',  'Cost': '10000',  'Weight': '300',  'Space': '2',            'Shots': '10', 'Shot Cost': '50',    'Shot Weight': '10'    ,'Loaded Cost': '10500',  'Loaded Weight': '400',  'Mag Cost': '550',   'Mag Weight': '115'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Recoiless Rifle',                   'Drop-Down Name': 'Recoiless Rifle',                                   'Ammo Type': 'Normal',                      'Abbv': 'RR',                          'Effect': '2 inch Radius',       'To- Hit': '7',      'Dam': '2D',                 'DP': '4',  'Cost': '1500',   'Weight': '300',  'Space': '2',            'Shots': '10', 'Shot Cost': '35',    'Shot Weight': '5'     ,'Loaded Cost': '1850',   'Loaded Weight': '350',  'Mag Cost': '400',   'Mag Weight': '65'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Recoiless Rifle',                   'Drop-Down Name': 'Recoiless Rifle - HEAT',                            'Ammo Type': 'HEAT',                        'Abbv': 'RR w/HEAT',                   'Effect': '2 inch Radius',       'To- Hit': '7',      'Dam': '2D+2',               'DP': '4',  'Cost': '1500',   'Weight': '300',  'Space': '2',            'Shots': '10', 'Shot Cost': '53',    'Shot Weight': '5'     ,'Loaded Cost': '2025',   'Loaded Weight': '350',  'Mag Cost': '575',   'Mag Weight': '65'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Recoiless Rifle',                   'Drop-Down Name': 'Recoiless Rifle - HESH',                            'Ammo Type': 'HESH',                        'Abbv': 'RR w/HESH',                   'Effect': '2 inch Radius',       'To- Hit': '7',      'Dam': '2D',                 'DP': '4',  'Cost': '1500',   'Weight': '300',  'Space': '2',            'Shots': '10', 'Shot Cost': '53',    'Shot Weight': '5'     ,'Loaded Cost': '2025',   'Loaded Weight': '350',  'Mag Cost': '575',   'Mag Weight': '65'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'AutoCannon',                        'Drop-Down Name': 'AutoCannon',                                        'Ammo Type': 'Normal',                      'Abbv': 'AC',                          'Effect': '2 inch Radius',       'To- Hit': '6',      'Dam': '3D',                 'DP': '4',  'Cost': '6500',   'Weight': '500',  'Space': '3',            'Shots': '10', 'Shot Cost': '75',    'Shot Weight': '10'    ,'Loaded Cost': '7250',   'Loaded Weight': '600',  'Mag Cost': '800',   'Mag Weight': '115'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'AutoCannon',                        'Drop-Down Name': 'AutoCannon - HD Ammo',                              'Ammo Type': 'HD Ammo',                     'Abbv': 'AC w/HD',                     'Effect': '2 inch Radius',       'To- Hit': '6',      'Dam': '3D+3',               'DP': '4',  'Cost': '6500',   'Weight': '500',  'Space': '3',            'Shots': '10', 'Shot Cost': '150',   'Shot Weight': '20'    ,'Loaded Cost': '8000',   'Loaded Weight': '700',  'Mag Cost': '1550',  'Mag Weight': '215'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'AutoCannon',                        'Drop-Down Name': 'AutoCannon - Incendiary',                           'Ammo Type': 'Incendiary',                  'Abbv': 'Ac w/INC',                    'Effect': '2 inch Radius',       'To- Hit': '6',      'Dam': '3D* (2/1)',          'DP': '4',  'Cost': '6500',   'Weight': '500',  'Space': '3',            'Shots': '10', 'Shot Cost': '113',   'Shot Weight': '10'    ,'Loaded Cost': '7625',   'Loaded Weight': '600',  'Mag Cost': '1175',  'Mag Weight': '115'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*AutoCannon',                       'Drop-Down Name': '*AutoCannon - DPU Ammo',                            'Ammo Type': 'DPU Ammo',                    'Abbv': 'AC w/DPU',                    'Effect': '2 inch Radius',       'To- Hit': '6',      'Dam': '18',                 'DP': '4',  'Cost': '6500',   'Weight': '500',  'Space': '3',            'Shots': '10', 'Shot Cost': '750',   'Shot Weight': '30'    ,'Loaded Cost': '14000',  'Loaded Weight': '800',  'Mag Cost': '8300',  'Mag Weight': '315'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Gatling Cannon',                   'Drop-Down Name': '*Gatling Cannon',                                   'Ammo Type': 'Normal',                      'Abbv': 'GC',                          'Effect': '2 inch Radius',       'To- Hit': '6',      'Dam': '5D',                 'DP': '5',  'Cost': '7000',   'Weight': '750',  'Space': '5',            'Shots': '10', 'Shot Cost': '45',    'Shot Weight': '15'    ,'Loaded Cost': '7450',   'Loaded Weight': '900',  'Mag Cost': '500',   'Mag Weight': '165'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Gatling Cannon',                   'Drop-Down Name': '*Gatling Cannon - HD Ammo',                         'Ammo Type': 'HD Ammo',                     'Abbv': 'GC w/HD',                     'Effect': '2 inch Radius',       'To- Hit': '6',      'Dam': '5D+5',               'DP': '5',  'Cost': '7000',   'Weight': '750',  'Space': '5',            'Shots': '10', 'Shot Cost': '90',    'Shot Weight': '30'    ,'Loaded Cost': '7900',   'Loaded Weight': '1050',' Mag Cost': '950',   'Mag Weight': '315'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Gatling Cannon',                   'Drop-Down Name': '*Gatling Cannon - Incendiary',                      'Ammo Type': 'Incendiary',                  'Abbv': 'GC w/INC',                    'Effect': '2 inch Radius',       'To- Hit': '6',      'Dam': '5D* (2/1)',          'DP': '5',  'Cost': '7000',   'Weight': '750',  'Space': '5',            'Shots': '10', 'Shot Cost': '68',    'Shot Weight': '15'    ,'Loaded Cost': '7675',   'Loaded Weight': '900',  'Mag Cost': '725',   'Mag Weight': '165'}
        self.weapons_small_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '',                                  'Drop-Down Name': 'LARGE BORE WEAPONS',                                'Ammo Type': '',                            'Abbv': '',                            'Effect': '',                    'To- Hit': '',       'Dam': '',                   'DP': '',   'Cost': '',       'Weight': '',     'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Starshell Launcher',                'Drop-Down Name': 'Starshell Launcher',                                'Ammo Type': 'Normal',                      'Abbv': 'SL',                          'Effect': '0',                   'To- Hit': '0',      'Dam': '0',                  'DP': '2',  'Cost': '500',    'Weight': '100',  'Space': '1',            'Shots': '5',  'Shot Cost': '50',    'Shot Weight': '5'     ,'Loaded Cost': '750',    'Loaded Weight': '125',  'Mag Cost': '300',   'Mag Weight': '40'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Drag Chute Harpoon',               'Drop-Down Name': '*Drag Chute Harpoon',                               'Ammo Type': 'Normal',                      'Abbv': 'DCH',                         'Effect': '0',                   'To- Hit': '9',      'Dam': '1 hit',              'DP': '2',  'Cost': '400',    'Weight': '40',   'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '400',    'Loaded Weight': '40',   'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Drag Chute Harpoon',               'Drop-Down Name': '*Drag Chute Harpoon - FP',                          'Ammo Type': 'FP',                          'Abbv': 'DCH',                         'Effect': '0',                   'To- Hit': '9',      'Dam': '1 hit',              'DP': '2',  'Cost': '550',    'Weight': '40',   'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '400',    'Loaded Weight': '40',   'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Mine-Flinger',                      'Drop-Down Name': 'Mine-Flinger',                                      'Ammo Type': 'Normal',                      'Abbv': 'MF',                          'Effect': '1 inch Radius',       'To- Hit': '5 or 9', 'Dam': '2d / 1d',            'DP': '3',  'Cost': '2250',   'Weight': '275',  'Space': '3',            'Shots': '5',  'Shot Cost': '50',    'Shot Weight': '5'     ,'Loaded Cost': '2500',   'Loaded Weight': '300',  'Mag Cost': '300',   'Mag Weight': '40'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Mine-Flinger',                      'Drop-Down Name': 'Mine-Flinger - Anti-Ped',                           'Ammo Type': 'Anti-Ped' ,                   'Abbv': 'MF, Anti-Ped',                'Effect': '1 inch Radius',       'To- Hit': '5 or 9', 'Dam': '2d/1d/0',            'DP': '3',  'Cost': '2250',   'Weight': '275',  'Space': '3',            'Shots': '5',  'Shot Cost': '25',    'Shot Weight': '3'     ,'Loaded Cost': '2375',   'Loaded Weight': '290',  'Mag Cost': '175',   'Mag Weight': '30'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Mine-Flinger',                      'Drop-Down Name': 'Mine-Flinger - Beacon',                             'Ammo Type': 'Beacon' ,                     'Abbv': 'MF, Beacon',                  'Effect': '3 inch Radius',       'To- Hit': '5 or 9', 'Dam': '2d/1d',              'DP': '3',  'Cost': '2250',   'Weight': '275',  'Space': '3',            'Shots': '5',  'Shot Cost': '200',   'Shot Weight': '5'     ,'Loaded Cost': '3250',   'Loaded Weight': '300',  'Mag Cost': '1050',  'Mag Weight': '40'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Mine-Flinger',                      'Drop-Down Name': 'Mine-Flinger - Smoke',                              'Ammo Type': 'Smoke' ,                      'Abbv': 'MF, Smoke',                   'Effect': '1 x 1',               'To- Hit': '5 or 9', 'Dam': '0',                  'DP': '3',  'Cost': '2250',   'Weight': '275',  'Space': '3',            'Shots': '5',  'Shot Cost': '45',    'Shot Weight': '5'     ,'Loaded Cost': '2475',   'Loaded Weight': '300',  'Mag Cost': '275',   'Mag Weight': '40'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Mine-Flinger',                      'Drop-Down Name': 'Mine-Flinger - Hot Smoke',                          'Ammo Type': 'Hot Smoke' ,                  'Abbv': 'MF, Hot Smoke',               'Effect': '1 x 1',               'To- Hit': '5 or 9', 'Dam': '0',                  'DP': '3',  'Cost': '2250',   'Weight': '275',  'Space': '3',            'Shots': '5',  'Shot Cost': '55',    'Shot Weight': '5'     ,'Loaded Cost': '2525',   'Loaded Weight': '300',  'Mag Cost': '325',   'Mag Weight': '40'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Mine-Flinger',                      'Drop-Down Name': 'Mine-Flinger - Paint',                              'Ammo Type': 'Paint' ,                      'Abbv': 'MF, Paint',                   'Effect': '1 x 1',               'To- Hit': '5 or 9', 'Dam': '0',                  'DP': '3',  'Cost': '2250',   'Weight': '275',  'Space': '3',            'Shots': '5',  'Shot Cost': '45',    'Shot Weight': '5'     ,'Loaded Cost': '2475',   'Loaded Weight': '300',  'Mag Cost': '275',   'Mag Weight': '40'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Mine-Flinger',                      'Drop-Down Name': 'Mine-Flinger - Paint, Glow-in-the-dark',            'Ammo Type': 'Paint, Glow-in-the-dark',     'Abbv': 'MF, GLOW',                    'Effect': '1 x 1',               'To- Hit': '5 or 9', 'Dam': '0',                  'DP': '3',  'Cost': '2250',   'Weight': '275',  'Space': '3',            'Shots': '5',  'Shot Cost': '105',   'Shot Weight': '5'     ,'Loaded Cost': '2775',   'Loaded Weight': '300',  'Mag Cost': '575',   'Mag Weight': '40'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Mine-Flinger',                      'Drop-Down Name': 'Mine-Flinger - Flame Cloud',                        'Ammo Type': 'Flame Cloud' ,                'Abbv': 'MF, Flame Cloud',             'Effect': '1 x 1',               'To- Hit': '5 or 9', 'Dam': '1d-1 (3/1)',         'DP': '3',  'Cost': '2250',   'Weight': '275',  'Space': '3',            'Shots': '5',  'Shot Cost': '145',   'Shot Weight': '5'     ,'Loaded Cost': '2975',   'Loaded Weight': '300',  'Mag Cost': '775',   'Mag Weight': '40'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Mine-Flinger',                      'Drop-Down Name': 'Mine-Flinger - Tear Gas',                           'Ammo Type': 'Tear Gas' ,                   'Abbv': 'MF, Tear Gas',                'Effect': '1 x 1',               'To- Hit': '5 or 9', 'Dam': '0',                  'DP': '3',  'Cost': '2250',   'Weight': '275',  'Space': '3',            'Shots': '5',  'Shot Cost': '65',    'Shot Weight': '5'     ,'Loaded Cost': '2575',   'Loaded Weight': '300',  'Mag Cost': '375',   'Mag Weight': '40'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Mine-Flinger',                      'Drop-Down Name': 'Mine-Flinger - Toxin Gas',                          'Ammo Type': 'Toxin Gas',                   'Abbv': 'MF, Toxin Gas',               'Effect': '1 x 1',               'To- Hit': '5 or 9', 'Dam': '0',                  'DP': '3',  'Cost': '2250',   'Weight': '275',  'Space': '3',            'Shots': '5',  'Shot Cost': '4025',  'Shot Weight': '5'     ,'Loaded Cost': '22375',  'Loaded Weight': '300',  'Mag Cost': '20175', 'Mag Weight': '40'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Mine-Flinger',                      'Drop-Down Name': 'Mine-Flinger - Fake Mines',                         'Ammo Type': 'Fake Mines',                  'Abbv': 'MF, Fake Mines',              'Effect': '0',                   'To- Hit': '5 or 9', 'Dam': '0',                  'DP': '3',  'Cost': '2250',   'Weight': '275',  'Space': '3',            'Shots': '5',  'Shot Cost': '10',    'Shot Weight': '5'     ,'Loaded Cost': '2300',   'Loaded Weight': '300',  'Mag Cost': '100',   'Mag Weight': '40'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Mine-Flinger',                      'Drop-Down Name': 'Mine-Flinger - Floating Mines',                     'Ammo Type': 'Floating Mines',              'Abbv': 'MF, Floating',                'Effect': '1 inch Radius',       'To- Hit': '5 or 9', 'Dam': '2d/1d',              'DP': '3',  'Cost': '2250',   'Weight': '275',  'Space': '3',            'Shots': '5',  'Shot Cost': '100',   'Shot Weight': '5'     ,'Loaded Cost': '2750',   'Loaded Weight': '300',  'Mag Cost': '550',   'Mag Weight': '40'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Mine-Flinger',                      'Drop-Down Name': 'Mine-Flinger - Napalm',                             'Ammo Type': 'Napalm',                      'Abbv': 'MF, Napalm',                  'Effect': '1 inch Radius',       'To- Hit': '5 or 9', 'Dam': '1d (4/3)',           'DP': '3',  'Cost': '2250',   'Weight': '275',  'Space': '3',            'Shots': '5',  'Shot Cost': '60',    'Shot Weight': '5'     ,'Loaded Cost': '2550',   'Loaded Weight': '300',  'Mag Cost': '350',   'Mag Weight': '40'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Mine-Flinger',                      'Drop-Down Name': 'Mine-Flinger - StickyFoam Neutralizer',             'Ammo Type': 'StickyFoam Neutralizer',      'Abbv': 'MF, SF Neut',                 'Effect': '1 inch Radius',       'To- Hit': '5 or 9', 'Dam': '*',                  'DP': '3',  'Cost': '2250',   'Weight': '275',  'Space': '3',            'Shots': '5',  'Shot Cost': '250',   'Shot Weight': '5'     ,'Loaded Cost': '3500',   'Loaded Weight': '300',  'Mag Cost': '1300',  'Mag Weight': '40'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Oil/Paint Gun',                     'Drop-Down Name': 'Oil/Paint Gun',                                     'Ammo Type': 'Normal',                      'Abbv': 'OPG',                         'Effect': '1/2 inchx1/2 inch',   'To- Hit': '9',      'Dam': '0',                  'DP': '3',  'Cost': '1000',   'Weight': '250',  'Space': '3',            'Shots': '10', 'Shot Cost': '25',    'Shot Weight': '5'     ,'Loaded Cost': '1250',   'Loaded Weight': '300',  'Mag Cost': '300',   'Mag Weight': '65'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Oil/Paint Gun',                     'Drop-Down Name': 'Oil/Paint Gun - Flaming Oil',                       'Ammo Type': 'Flaming Oil',                 'Abbv': 'OPG/FLAME',                   'Effect': '1/2 inchx1/2 inch',   'To- Hit': '9',      'Dam': '1D-2 (3/2)',         'DP': '3',  'Cost': '1000',   'Weight': '250',  'Space': '3',            'Shots': '10', 'Shot Cost': '90',    'Shot Weight': '5'     ,'Loaded Cost': '1900',   'Loaded Weight': '300',  'Mag Cost': '950',   'Mag Weight': '65'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Oil/Paint Gun',                     'Drop-Down Name': 'Oil/Paint Gun - HT Flaming Oil',                    'Ammo Type': 'HT Flaming Oil',              'Abbv': 'OPG/HT FLAME',                'Effect': '1/2 inchx1/2 inch',   'To- Hit': '9',      'Dam': '1D (4/1)',           'DP': '3',  'Cost': '1000',   'Weight': '250',  'Space': '3',            'Shots': '10', 'Shot Cost': '360',   'Shot Weight': '7.5'   ,'Loaded Cost': '4600',   'Loaded Weight': '325',  'Mag Cost': '3650',  'Mag Weight': '90'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Oil/Paint Gun',                     'Drop-Down Name': 'Oil/Paint Gun - Glow-in-the-dark Paint',            'Ammo Type': 'Glow-in-the-dark Paint',      'Abbv': 'OPG/GLOW',                    'Effect': '1/2 inchx1/2 inch',   'To- Hit': '9',      'Dam': '0',                  'DP': '3',  'Cost': '1000',   'Weight': '250',  'Space': '3',            'Shots': '10', 'Shot Cost': '100',   'Shot Weight': '5'     ,'Loaded Cost': '2000',   'Loaded Weight': '300',  'Mag Cost': '1050',  'Mag Weight': '65'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Oil/Paint Gun',                     'Drop-Down Name': 'Oil/Paint Gun - Ice Ammo',                          'Ammo Type': 'Ice Ammo',                    'Abbv': 'OPG/Ice',                     'Effect': '1/2 inchx1/2 inch',   'To- Hit': '9',      'Dam': '0',                  'DP': '3',  'Cost': '1000',   'Weight': '250',  'Space': '3',            'Shots': '10', 'Shot Cost': '40',    'Shot Weight': '5'     ,'Loaded Cost': '1400',   'Loaded Weight': '300',  'Mag Cost': '450',   'Mag Weight': '65'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Oil/Paint Gun',                     'Drop-Down Name': 'Oil/Paint Gun - Sand Ammo',                         'Ammo Type': 'Sand Ammo',                   'Abbv': 'OPG/Sand',                    'Effect': '1/2 inchx1/2 inch',   'To- Hit': '9',      'Dam': '0',                  'DP': '3',  'Cost': '1000',   'Weight': '250',  'Space': '3',            'Shots': '10', 'Shot Cost': '10',    'Shot Weight': '5'     ,'Loaded Cost': '1100',   'Loaded Weight': '300',  'Mag Cost': '150',   'Mag Weight': '65'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Oil/Paint Gun',                     'Drop-Down Name': 'Oil/Paint Gun - Paint',                             'Ammo Type': 'Paint',                       'Abbv': 'OPG',                         'Effect': '1/2 inchx1/2 inch',   'To- Hit': '9',      'Dam': '0',                  'DP': '3',  'Cost': '1000',   'Weight': '250',  'Space': '3',            'Shots': '10', 'Shot Cost': '25',    'Shot Weight': '5'     ,'Loaded Cost': '1250',   'Loaded Weight': '300',  'Mag Cost': '300',   'Mag Weight': '65'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Oil/Paint Gun',                     'Drop-Down Name': 'Oil/Paint Gun - StickyFoam Neutralizer',            'Ammo Type': 'StickyFoam Neutralizer',      'Abbv': 'OPG/SF Neut',                 'Effect': '1/x1/2 inch',         'To- Hit': '9',      'Dam': '0',                  'DP': '3',  'Cost': '1000',   'Weight': '250',  'Space': '3',            'Shots': '10', 'Shot Cost': '125',   'Shot Weight': '5'     ,'Loaded Cost': '2250',   'Loaded Weight': '300',  'Mag Cost': '1300',  'Mag Weight': '65'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Spike Gun',                         'Drop-Down Name': 'Spike Gun',                                         'Ammo Type': 'Normal',                      'Abbv': 'SG',                          'Effect': '1/2 inchx1/2 inch',   'To- Hit': '7',      'Dam': '1D',                 'DP': '2',  'Cost': '750',    'Weight': '150',  'Space': '2',            'Shots': '10', 'Shot Cost': '40',    'Shot Weight': '10'    ,'Loaded Cost': '1150',   'Loaded Weight': '250',  'Mag Cost': '450',   'Mag Weight': '115'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Rapid Fire Tank Gun',              'Drop-Down Name': '*Rapid Fire Tank Gun',                              'Ammo Type': 'Normal',                      'Abbv': 'RFTG',                        'Effect': '2 inch Radius',       'To- Hit': '6',      'Dam': '6D',                 'DP': '8',  'Cost': '9500',   'Weight': '900',  'Space': '6',            'Shots': '10', 'Shot Cost': '25',    'Shot Weight': '10'    ,'Loaded Cost': '9750',   'Loaded Weight': '1000', 'Mag Cost': '300',   'Mag Weight': '115'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Rapid Fire Tank Gun',              'Drop-Down Name': '*Rapid Fire Tank Gun - HEAT Ammo',                  'Ammo Type': 'HEAT Ammo',                   'Abbv': 'RFTG w/HEAT',                 'Effect': '2 inch Radius',       'To- Hit': '6',      'Dam': '6D+6',               'DP': '8',  'Cost': '9500',   'Weight': '900',  'Space': '6',            'Shots': '10', 'Shot Cost': '38',    'Shot Weight': '10'    ,'Loaded Cost': '9875',   'Loaded Weight': '1000', 'Mag Cost': '440',   'Mag Weight': '115'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Rapid Fire Tank Gun',              'Drop-Down Name': '*Rapid Fire Tank Gun - HESH',                       'Ammo Type': 'HESH',                        'Abbv': 'RFTGw/HESH',                  'Effect': '2 inch Radius',       'To- Hit': '6',      'Dam': '6D*',                'DP': '8',  'Cost': '9500',   'Weight': '900',  'Space': '6',            'Shots': '10', 'Shot Cost': '38',    'Shot Weight': '10'    ,'Loaded Cost': '9875',   'Loaded Weight': '1000', 'Mag Cost': '440',   'Mag Weight': '115'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Rapid Fire Tank Gun',              'Drop-Down Name': '*Rapid Fire Tank Gun - APFSDS',                     'Ammo Type': 'APFSDS',                      'Abbv': 'RFTG w/APFSDS',               'Effect': '2 inch Radius',       'To- Hit': '6',      'Dam': '6D+12',              'DP': '8',  'Cost': '9500',   'Weight': '900',  'Space': '6',            'Shots': '10', 'Shot Cost': '50',    'Shot Weight': '15'    ,'Loaded Cost': '10000',  'Loaded Weight': '1050', 'Mag Cost': '550',   'Mag Weight': '165'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Rapid Fire Tank Gun',              'Drop-Down Name': '*Rapid Fire Tank Gun - DPU Ammo',                   'Ammo Type': 'DPU Ammo',                    'Abbv': 'RFTG w/DPU',                  'Effect': '2 inch Radius',       'To- Hit': '6',      'Dam': '36',                 'DP': '8',  'Cost': '9500',   'Weight': '900',  'Space': '6',            'Shots': '10', 'Shot Cost': '250',   'Shot Weight': '30'    ,'Loaded Cost': '12000',  'Loaded Weight': '1200', 'Mag Cost': '2550',  'Mag Weight': '315'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Blast Cannon',                      'Drop-Down Name': 'Blast Cannon',                                      'Ammo Type': 'Normal',                      'Abbv': 'BC',                          'Effect': '2 inch Radius',       'To- Hit': '7',      'Dam': '4D',                 'DP': '5',  'Cost': '4500',   'Weight': '500',  'Space': '4',            'Shots': '10', 'Shot Cost': '100',   'Shot Weight': '10'    ,'Loaded Cost': '5500',   'Loaded Weight': '600',  'Mag Cost': '1050',  'Mag Weight': '115'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Blast Cannon',                     'Drop-Down Name': '*Blast Cannon - HEAT',                              'Ammo Type': 'HEAT',                        'Abbv': 'BC w/HEAT',                   'Effect': '2 inch Radius',       'To- Hit': '7',      'Dam': '4D+4',               'DP': '5',  'Cost': '4500',   'Weight': '500',  'Space': '4',            'Shots': '10', 'Shot Cost': '150',   'Shot Weight': '10'    ,'Loaded Cost': '6000',   'Loaded Weight': '600',  'Mag Cost': '1550',  'Mag Weight': '115'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Blast Cannon',                      'Drop-Down Name': 'Blast Cannon - HESH',                               'Ammo Type': 'HESH',                        'Abbv': 'BC w/HESH',                   'Effect': '2 inch Radius',       'To- Hit': '7',      'Dam': '4D*',                'DP': '5',  'Cost': '4500',   'Weight': '500',  'Space': '4',            'Shots': '10', 'Shot Cost': '150',   'Shot Weight': '10'    ,'Loaded Cost': '6000',   'Loaded Weight': '600',  'Mag Cost': '1050',  'Mag Weight': '115'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Heavy Recoiless Rifle',            'Drop-Down Name': '*Heavy Recoiless Rifle',                            'Ammo Type': 'Normal',                      'Abbv': 'HRR',                         'Effect': '2 inch Radius',       'To- Hit': '7',      'Dam': '7D',                 'DP': '9',  'Cost': '9000',   'Weight': '1000', 'Space': '8',            'Shots': '10', 'Shot Cost': '150',   'Shot Weight': '15'    ,'Loaded Cost': '10500',  'Loaded Weight': '1150', 'Mag Cost': '1550',  'Mag Weight': '165'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Heavy Recoiless Rifle',            'Drop-Down Name': '*Heavy Recoiless Rifle - HEAT',                     'Ammo Type': 'HEAT',                        'Abbv': 'HRR w/HEAT',                  'Effect': '2 inch Radius',       'To- Hit': '7',      'Dam': '7D+7',               'DP': '9',  'Cost': '9000',   'Weight': '1000', 'Space': '8',            'Shots': '10', 'Shot Cost': '225',   'Shot Weight': '15'    ,'Loaded Cost': '11250',  'Loaded Weight': '1150', 'Mag Cost': '2300',  'Mag Weight': '165'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Heavy Recoiless Rifle',            'Drop-Down Name': '*Heavy Recoiless Rifle - HESH',                     'Ammo Type': 'HESH',                        'Abbv': 'HRR w/HESH',                  'Effect': '2 inch Radius',       'To- Hit': '7',      'Dam': '7D*',                'DP': '9',  'Cost': '9000',   'Weight': '1000', 'Space': '8',            'Shots': '10', 'Shot Cost': '225',   'Shot Weight': '15'    ,'Loaded Cost': '11250',  'Loaded Weight': '1150', 'Mag Cost': '2300',  'Mag Weight': '165'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Magnetic Cannon',                  'Drop-Down Name': '*Magnetic Cannon',                                  'Ammo Type': 'Normal',                      'Abbv': 'MC',                          'Effect': '0',                   'To- Hit': '7',      'Dam': '13D+26',             'DP': '10', 'Cost': '250000', 'Weight': '4000', 'Space': '12',           'Shots': '10', 'Shot Cost': '100',   'Shot Weight': '10'    ,'Loaded Cost': '251000', 'Loaded Weight': '4100', 'Mag Cost': '1050',  'Mag Weight': '115'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Anti-Tank Gun',                     'Drop-Down Name': 'Anti-Tank Gun',                                     'Ammo Type': 'Normal',                      'Abbv': 'ATG',                         'Effect': '2 inch Radius',       'To- Hit': '8',      'Dam': '3D',                 'DP': '5',  'Cost': '2000',   'Weight': '600',  'Space': '3',            'Shots': '10', 'Shot Cost': '50',    'Shot Weight': '10'    ,'Loaded Cost': '2500',   'Loaded Weight': '700',  'Mag Cost': '550',   'Mag Weight': '115'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Anti-Tank Gun',                     'Drop-Down Name': 'Anti-Tank Gun - HEAT',                              'Ammo Type': 'HEAT',                        'Abbv': 'ATG w/HEAT',                  'Effect': '0',                   'To- Hit': '8',      'Dam': '3D+3',               'DP': '5',  'Cost': '2000',   'Weight': '600',  'Space': '3',            'Shots': '10', 'Shot Cost': '75',    'Shot Weight': '10'    ,'Loaded Cost': '2750',   'Loaded Weight': '700',  'Mag Cost': '800',   'Mag Weight': '115'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Anti-Tank Gun',                     'Drop-Down Name': 'Anti-Tank Gun - HESH',                              'Ammo Type': 'HESH',                        'Abbv': 'ATG w/HESH',                  'Effect': '0',                   'To- Hit': '8',      'Dam': '3D',                 'DP': '5',  'Cost': '2000',   'Weight': '600',  'Space': '3',            'Shots': '10', 'Shot Cost': '75',    'Shot Weight': '10'    ,'Loaded Cost': '2750',   'Loaded Weight': '700',  'Mag Cost': '800',   'Mag Weight': '115'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Anti-Tank Gun',                     'Drop-Down Name': 'Anti-Tank Gun - APFSDS',                            'Ammo Type': 'APFSDS',                      'Abbv': 'ATG w/APFSDS',                'Effect': '0',                   'To- Hit': '8',      'Dam': '3D+6',               'DP': '5',  'Cost': '2000',   'Weight': '600',  'Space': '3',            'Shots': '10', 'Shot Cost': '100',   'Shot Weight': '15'    ,'Loaded Cost': '3000',   'Loaded Weight': '750',  'Mag Cost': '1050',  'Mag Weight': '165'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Anti-Tank Gun',                     'Drop-Down Name': 'Anti-Tank Gun - DPU Ammo',                          'Ammo Type': 'DPU Ammo',                    'Abbv': 'ATG w/DPU',                   'Effect': '0',                   'To- Hit': '8',      'Dam': '18',                 'DP': '5',  'Cost': '2000',   'Weight': '600',  'Space': '3',            'Shots': '10', 'Shot Cost': '500',   'Shot Weight': '30'    ,'Loaded Cost': '7000',   'Loaded Weight': '800',  'Mag Cost': '5050',  'Mag Weight': '215'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Tank Gun 75mm',                    'Drop-Down Name': '*Tank Gun 75mm',                                    'Ammo Type': 'Normal',                      'Abbv': 'TG',                          'Effect': '2 inch Radius',       'To- Hit': '7',      'Dam': '8D',                 'DP': '10', 'Cost': '10000',  'Weight': '1200', 'Space': '10',           'Shots': '10', 'Shot Cost': '100',   'Shot Weight': '20'    ,'Loaded Cost': '11000',  'Loaded Weight': '1400', 'Mag Cost': '1050',  'Mag Weight': '215'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Tank Gun 75mm',                    'Drop-Down Name': '*Tank Gun 75mm - HEAT',                             'Ammo Type': 'HEAT',                        'Abbv': 'TG w/HEAT',                   'Effect': '0',                   'To- Hit': '7',      'Dam': '8D+8',               'DP': '10', 'Cost': '10000',  'Weight': '1200', 'Space': '10',           'Shots': '10', 'Shot Cost': '150',   'Shot Weight': '20'    ,'Loaded Cost': '11500',  'Loaded Weight': '1400', 'Mag Cost': '1550',  'Mag Weight': '215'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Tank Gun 75mm',                    'Drop-Down Name': '*Tank Gun 75mm - HESH',                             'Ammo Type': 'HESH',                        'Abbv': 'TG w/HESH',                   'Effect': '0',                   'To- Hit': '7',      'Dam': '8D',                 'DP': '10', 'Cost': '10000',  'Weight': '1200', 'Space': '10',           'Shots': '10', 'Shot Cost': '150',   'Shot Weight': '20'    ,'Loaded Cost': '11500',  'Loaded Weight': '1400', 'Mag Cost': '1550',  'Mag Weight': '215'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Tank Gun 75mm',                    'Drop-Down Name': '*Tank Gun 75mm - APFSDS',                           'Ammo Type': 'APFSDS',                      'Abbv': 'TG w/APFSDS',                 'Effect': '0',                   'To- Hit': '7',      'Dam': '8D+16',              'DP': '10', 'Cost': '10000',  'Weight': '1200', 'Space': '10',           'Shots': '10', 'Shot Cost': '200',   'Shot Weight': '30'    ,'Loaded Cost': '12000',  'Loaded Weight': '1500', 'Mag Cost': '2050',  'Mag Weight': '315'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Tank Gun 75mm',                    'Drop-Down Name': '*Tank Gun 75mm - Beehive',                          'Ammo Type': 'Beehive',                     'Abbv': 'TG w/BEE',                    'Effect': '2" Path',             'To- Hit': '2',      'Dam': '4D',                 'DP': '10', 'Cost': '10000',  'Weight': '1200', 'Space': '10',           'Shots': '10', 'Shot Cost': '300',   'Shot Weight': '20'    ,'Loaded Cost': '12000',  'Loaded Weight': '1400', 'Mag Cost': '2050',  'Mag Weight': '215'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Tank Gun 75mm',                    'Drop-Down Name': '*Tank Gun 75mm - DPU Ammo',                         'Ammo Type': 'DPU Ammo',                    'Abbv': 'TG w/DPU',                    'Effect': '0',                   'To- Hit': '7',      'Dam': '48',                 'DP': '10', 'Cost': '10000',  'Weight': '1200', 'Space': '10',           'Shots': '10', 'Shot Cost': '1000',  'Shot Weight': '60'    ,'Loaded Cost': '20000',  'Loaded Weight': '1800', 'Mag Cost': '10050', 'Mag Weight': '615'}
        self.weapons_large_bore_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '',                                  'Drop-Down Name': 'GRENADE LAUNCHERS AND MAGAZINES',                   'Ammo Type': '',                            'Abbv': '',                            'Effect': '',                    'To- Hit': '',       'Dam': '',                   'DP': '',   'Cost': '',       'Weight': '',     'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_launchers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '',                                  'Drop-Down Name': '----Buy grenades seperately, below----',            'Ammo Type': '',                            'Abbv': '',                            'Effect': '',                    'To- Hit': '',       'Dam': '',                   'DP': '',   'Cost': '',       'Weight': '',     'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_launchers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Grenade Launcher',                  'Drop-Down Name': 'Grenade Launcher - Empty',                          'Ammo Type': 'Empty',                       'Abbv': 'GL',                          'Effect': 'Grenade',             'To- Hit': '7',      'Dam': 'Grenade',            'DP': '2',  'Cost': '1000',   'Weight': '200',  'Space': '2',            'Shots': '10', 'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '1000',   'Loaded Weight': '200',  'Mag Cost': '50',    'Mag Weight': '15'}
        self.weapons_grenade_launchers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Auto Grenade Launcher',            'Drop-Down Name': '*Auto Grenade Launcher - Empty',                    'Ammo Type': 'Empty',                       'Abbv': 'AGL',                         'Effect': 'Grenade',             'To- Hit': '7',      'Dam': 'Grenade',            'DP': '3',  'Cost': '5000',   'Weight': '250',  'Space': '2',            'Shots': '20', 'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '5000',   'Loaded Weight': '250',  'Mag Cost': '50',    'Mag Weight': '15'}
        self.weapons_grenade_launchers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '',                                  'Drop-Down Name': 'GRENADE AMMO - buy impact fuses seperately',        'Ammo Type': '',                            'Abbv': '',                            'Effect': '',                    'To- Hit': '',       'Dam': '',                   'DP': '',   'Cost': '',       'Weight': '',     'Space': '',             'Shots': '0',  'Shot Cost': '0',     'Shot Weight': ''      ,'Loaded Cost': '1000',   'Loaded Weight': '50',   'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_launchers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '',                                  'Drop-Down Name': '--Mix freely, buy extra mags with launchers--',     'Ammo Type': '',                            'Abbv': '',                            'Effect': '',                    'To- Hit': '',       'Dam': '',                   'DP': '',   'Cost': '',       'Weight': '',     'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Fuse',                              'Drop-Down Name': 'Impact Fuses, per grenade',                         'Ammo Type': 'Impact Fuse',                 'Abbv': '',                            'Effect': '',                    'To- Hit': '',       'Dam': '',                   'DP': '',   'Cost': '50',     'Weight': '0',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Grenade',                           'Drop-Down Name': 'Grenade - Chem-Laser',                              'Ammo Type': 'Chem-Laser',                  'Abbv': '',                            'Effect': '0',                   'To- Hit': '7',      'Dam': '1D+1',               'DP': '',   'Cost': '200',    'Weight': '4',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Grenade',                           'Drop-Down Name': 'Grenade - Concussion',                              'Ammo Type': 'Concussion',                  'Abbv': '',                            'Effect': '1 R / 2 R',           'To- Hit': '',       'Dam': '1 point',            'DP': '',   'Cost': '40',     'Weight': '4',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Grenade',                           'Drop-Down Name': 'Grenade - Explosive',                               'Ammo Type': 'Explosive',                   'Abbv': '',                            'Effect': '1/2 inch R / 2R',     'To- Hit': '',       'Dam': '1D',                 'DP': '',   'Cost': '25',     'Weight': '4',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Grenade',                           'Drop-Down Name': 'Grenade - Fake',                                    'Ammo Type': 'Fake',                        'Abbv': '',                            'Effect': 'fake',                'To- Hit': '',       'Dam': '0',                  'DP': '',   'Cost': '5',      'Weight': '4',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Grenade',                           'Drop-Down Name': 'Grenade - Flaming Oil',                             'Ammo Type': 'Flaming Oil',                 'Abbv': '',                            'Effect': '1/2 inch x 1/2 inch', 'To- Hit': '',       'Dam': '1d-2 (3/2)',         'DP': '',   'Cost': '75',     'Weight': '4',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Grenade',                           'Drop-Down Name': 'Grenade - Flash',                                   'Ammo Type': 'Flash',                       'Abbv': '',                            'Effect': '2 inch Radius',       'To- Hit': '',       'Dam': '',                   'DP': '',   'Cost': '150',    'Weight': '4',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Grenade',                           'Drop-Down Name': 'Grenade - Flechette',                               'Ammo Type': 'Flechette',                   'Abbv': '',                            'Effect': '2 Burst',             'To- Hit': '',       'Dam': '1d (peds)',          'DP': '',   'Cost': '20',     'Weight': '4',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Grenade',                           'Drop-Down Name': 'Grenade - Foam',                                    'Ammo Type': 'Foam',                        'Abbv': '',                            'Effect': '1/2 inch Radius',     'To- Hit': '',       'Dam': '',                   'DP': '',   'Cost': '30',     'Weight': '4',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Grenade',                           'Drop-Down Name': 'Grenade - HESH',                                    'Ammo Type': 'HESH',                        'Abbv': '',                            'Effect': '0',                   'To- Hit': '',       'Dam': '2D',                 'DP': '',   'Cost': '90',     'Weight': '4',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Grenade',                           'Drop-Down Name': 'Grenade - Net',                                     'Ammo Type': 'Net',                         'Abbv': '',                            'Effect': '1/2 inchx1/2 inch',   'To- Hit': '',       'Dam': '0',                  'DP': '',   'Cost': '100',    'Weight': '4',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Grenade',                           'Drop-Down Name': 'Grenade - Net, Det-Cord',                           'Ammo Type': 'Net, Det-Cord',               'Abbv': '',                            'Effect': '1/2 inchx1/2 inch',   'To- Hit': '',       'Dam': '1d-5',               'DP': '',   'Cost': '200',    'Weight': '4',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Grenade',                           'Drop-Down Name': 'Grenade - Paint',                                   'Ammo Type': 'Paint',                       'Abbv': '',                            'Effect': '1 x 1',               'To- Hit': '',       'Dam': '',                   'DP': '',   'Cost': '20',     'Weight': '4',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Grenade',                           'Drop-Down Name': 'Grenade - Smoke',                                   'Ammo Type': 'Smoke',                       'Abbv': '',                            'Effect': '1 x 1',               'To- Hit': '',       'Dam': '',                   'DP': '',   'Cost': '20',     'Weight': '4',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Grenade',                           'Drop-Down Name': 'Grenade - StickyFoam Neutralizer',                  'Ammo Type': 'StickyFoam Neutralizer',      'Abbv': '',                            'Effect': '1 x 1',               'To- Hit': '',       'Dam': '*',                  'DP': '',   'Cost': '125',    'Weight': '4',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Grenade',                           'Drop-Down Name': 'Grenade - Tear Gas',                                'Ammo Type': 'Tear Gas',                    'Abbv': '',                            'Effect': '1 x 1',               'To- Hit': '',       'Dam': '',                   'DP': '',   'Cost': '30',     'Weight': '4',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Grenade',                           'Drop-Down Name': 'Grenade - Thermite',                                'Ammo Type': 'Thermite',                    'Abbv': '',                            'Effect': '1/2 inch Radius',     'To- Hit': '',       'Dam': '1D',                 'DP': '',   'Cost': '100',    'Weight': '4',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Grenade',                           'Drop-Down Name': 'Grenade - White Phosphorus',                        'Ammo Type': 'White Phosphorus',            'Abbv': '',                            'Effect': '1/2 inch Radius',     'To- Hit': '',       'Dam': '1D',                 'DP': '',   'Cost': '75',     'Weight': '4',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Grenade',                          'Drop-Down Name': '*Grenade - Concussion, AGL',                        'Ammo Type': 'Concussion, AGL',             'Abbv': '',                            'Effect': '1 inch R / 2 inch R', 'To- Hit': '',       'Dam': '1 point',            'DP': '',   'Cost': '60',     'Weight': '5',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Grenade',                          'Drop-Down Name': '*Grenade - Explosive, AGL',                         'Ammo Type': 'Explosive, AGL',              'Abbv': '',                            'Effect': '1/2 inch R / 2R',     'To- Hit': '',       'Dam': '1D',                 'DP': '',   'Cost': '45',     'Weight': '5',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Grenade',                          'Drop-Down Name': '*Grenade - Fake, AGL',                              'Ammo Type': 'Fake, AGL',                   'Abbv': '',                            'Effect': 'fake',                'To- Hit': '',       'Dam': '0',                  'DP': '',   'Cost': '25',     'Weight': '5',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Grenade',                          'Drop-Down Name': '*Grenade - Flaming Oil, AGL',                       'Ammo Type': 'Flaming Oil, AGL',            'Abbv': '',                            'Effect': '1/2 inch x 1/2 inch', 'To- Hit': '',       'Dam': '1d-2 (3/2)',         'DP': '',   'Cost': '95',     'Weight': '5',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Grenade',                          'Drop-Down Name': '*Grenade - Flash, AGL',                             'Ammo Type': 'Flash, AGL',                  'Abbv': '',                            'Effect': '2 inch Radius',       'To- Hit': '',       'Dam': '',                   'DP': '',   'Cost': '170',    'Weight': '5',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Grenade',                          'Drop-Down Name': '*Grenade - Flechette, AGL',                         'Ammo Type': 'Flechette, AGL',              'Abbv': '',                            'Effect': '2 inch Burst',        'To- Hit': '',       'Dam': '1d (peds)',          'DP': '',   'Cost': '40',     'Weight': '5',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Grenade',                          'Drop-Down Name': '*Grenade - Foam, AGL',                              'Ammo Type': 'Foam, AGL',                   'Abbv': '',                            'Effect': '1/2 inch Radius',     'To- Hit': '',       'Dam': '',                   'DP': '',   'Cost': '50',     'Weight': '5',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Grenade',                          'Drop-Down Name': '*Grenade - HESH, AGL',                              'Ammo Type': 'HESH, AGL',                   'Abbv': '',                            'Effect': '0',                   'To- Hit': '',       'Dam': '2D',                 'DP': '',   'Cost': '110',    'Weight': '5',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Grenade',                          'Drop-Down Name': '*Grenade - Paint, AGL',                             'Ammo Type': 'Paint, AGL',                  'Abbv': '',                            'Effect': '1 x 1',               'To- Hit': '',       'Dam': '',                   'DP': '',   'Cost': '40',     'Weight': '5',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Grenade',                          'Drop-Down Name': '*Grenade - Smoke, AGL',                             'Ammo Type': 'Smoke, AGL',                  'Abbv': '',                            'Effect': '1 x 1',               'To- Hit': '',       'Dam': '',                   'DP': '',   'Cost': '40',     'Weight': '5',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Grenade',                          'Drop-Down Name': '*Grenade - StickyFoam Neutralizer, AGL',            'Ammo Type': 'StickyFoam Neutralizer, AGL', 'Abbv': '',                            'Effect': '1 x 1',               'To- Hit': '',       'Dam': '',                   'DP': '',   'Cost': '225',    'Weight': '5',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Grenade',                          'Drop-Down Name': '*Grenade - Tear Gas, AGL',                          'Ammo Type': 'Tear Gas, AGL',               'Abbv': '',                            'Effect': '1 x 1',               'To- Hit': '',       'Dam': '',                   'DP': '',   'Cost': '50',     'Weight': '5',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Grenade',                          'Drop-Down Name': '*Grenade - Thermite, AGL',                          'Ammo Type': 'Thermite, AGL',               'Abbv': '',                            'Effect': '1/2 inch Radius',     'To- Hit': '',       'Dam': '1D',                 'DP': '',   'Cost': '120',    'Weight': '5',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Grenade',                          'Drop-Down Name': '*Grenade - White Phosphorus, AGL',                  'Ammo Type': 'White Phosphorus, AGL',       'Abbv': '',                            'Effect': '1/2 inch Radius',     'To- Hit': '',       'Dam': '1D',                 'DP': '',   'Cost': '95',     'Weight': '5',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Grenade',                          'Drop-Down Name': '*Grenade - Concussion, HV AGL',                     'Ammo Type': 'Concussion, HV AGL',          'Abbv': '',                            'Effect': '1 R / 2 R',           'To- Hit': '',       'Dam': '1 point',            'DP': '',   'Cost': '90',     'Weight': '8',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Grenade',                          'Drop-Down Name': '*Grenade - Explosive, HV AGL',                      'Ammo Type': 'Explosive, HV AGL',           'Abbv': '',                            'Effect': '1/2 inch R / 2R',     'To- Hit': '',       'Dam': '1D',                 'DP': '',   'Cost': '75',     'Weight': '8',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Grenade',                          'Drop-Down Name': '*Grenade - Fake, HV AGL',                           'Ammo Type': 'Fake, HV AGL',                'Abbv': '',                            'Effect': 'fake',                'To- Hit': '',       'Dam': '0',                  'DP': '',   'Cost': '55',     'Weight': '8',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Grenade',                          'Drop-Down Name': '*Grenade - Flaming Oil, HV AGL',                    'Ammo Type': 'Flaming Oil, HV AGL',         'Abbv': '',                            'Effect': '1/2 inch x 1/2 inch', 'To- Hit': '',       'Dam': '1d-2 (3/2)',         'DP': '',   'Cost': '125',    'Weight': '8',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Grenade',                          'Drop-Down Name': '*Grenade - Flash, HV AGL',                          'Ammo Type': 'Flash, HV AGL',               'Abbv': '',                            'Effect': '2 inch Radius',       'To- Hit': '',       'Dam': '',                   'DP': '',   'Cost': '200',    'Weight': '8',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Grenade',                          'Drop-Down Name': '*Grenade - Flechette, HV AGL',                      'Ammo Type': 'Flechette, HV AGL',           'Abbv': '',                            'Effect': '2 inch Burst',        'To- Hit': '',       'Dam': '1d (peds)',          'DP': '',   'Cost': '70',     'Weight': '8',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Grenade',                          'Drop-Down Name': '*Grenade - Foam, HV AGL',                           'Ammo Type': 'Foam, HV AGL',                'Abbv': '',                            'Effect': '1/2 inch Radius',     'To- Hit': '',       'Dam': '',                   'DP': '',   'Cost': '80',     'Weight': '8',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Grenade',                          'Drop-Down Name': '*Grenade - Paint, HV AGL',                          'Ammo Type': 'Paint, HV AGL',               'Abbv': '',                            'Effect': '1 x 1',               'To- Hit': '',       'Dam': '',                   'DP': '',   'Cost': '70',     'Weight': '8',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Grenade',                          'Drop-Down Name': '*Grenade - Smoke, HV AGL',                          'Ammo Type': 'Smoke, HV AGL',               'Abbv': '',                            'Effect': '1 x 1',               'To- Hit': '',       'Dam': '',                   'DP': '',   'Cost': '70',     'Weight': '8',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Grenade',                          'Drop-Down Name': '*Grenade - Tear Gas, HV AGL',                       'Ammo Type': 'Tear Gas, HV AGL',            'Abbv': '',                            'Effect': '1 x 1',               'To- Hit': '',       'Dam': '',                   'DP': '',   'Cost': '80',     'Weight': '8',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Grenade',                          'Drop-Down Name': '*Grenade - Thermite, HV AGL',                       'Ammo Type': 'Thermite, HV AGL',            'Abbv': '',                            'Effect': '1/2 inch Radius',     'To- Hit': '',       'Dam': '1D',                 'DP': '',   'Cost': '150',    'Weight': '8',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Grenade',                          'Drop-Down Name': '*Grenade - White Phosphorus, HV AGL',               'Ammo Type': 'White Phosphorus, HV AGL',    'Abbv': '',                            'Effect': '1/2 inch Radius',     'To- Hit': '',       'Dam': '1D',                 'DP': '',   'Cost': '125',    'Weight': '8',    'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_grenade_ammo_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '',                                  'Drop-Down Name': 'ROCKETS',                                           'Ammo Type': '',                            'Abbv': '',                            'Effect': '',                    'To- Hit': '',       'Dam': '',                   'DP': '',   'Cost': '',       'Weight': '',     'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Mini Rocket',                       'Drop-Down Name': 'Mini Rocket',                                       'Ammo Type': 'Normal',                      'Abbv': 'MNR',                         'Effect': '1/2 inch Radius',     'To- Hit': '9',      'Dam': '1D-1',               'DP': '1',  'Cost': '50',     'Weight': '20',   'Space': '0.3333333333', 'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '50',     'Loaded Weight': '20',   'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Mini Rocket',                       'Drop-Down Name': 'Mini Rocket - Armor Piercing',                      'Ammo Type': 'Armor Piercing',              'Abbv': 'MNR- AP',                     'Effect': '',                    'To- Hit': '9',      'Dam': '1D',                 'DP': '1',  'Cost': '75',     'Weight': '20',   'Space': '0.3333333333', 'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '75',     'Loaded Weight': '20',   'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Mini Rocket',                       'Drop-Down Name': 'Mini Rocket - Incendiary',                          'Ammo Type': 'Incendiary',                  'Abbv': 'MNR-Incendiary',              'Effect': '1/2 inch Radius',     'To- Hit': '9',      'Dam': '1D* (1/0)',          'DP': '1',  'Cost': '100',    'Weight': '30',   'Space': '0.3333333333', 'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '100',    'Loaded Weight': '30',   'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Mini Rocket',                       'Drop-Down Name': 'Mini Rocket - Chaff',                               'Ammo Type': 'Chaff',                       'Abbv': 'MNR-Chaff',                   'Effect': '1/2 inch x 1',        'To- Hit': '9',      'Dam': '',                   'DP': '1',  'Cost': '45',     'Weight': '20',   'Space': '0.3333333333', 'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '45',     'Loaded Weight': '20',   'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Mini Rocket',                       'Drop-Down Name': 'Mini Rocket - Foam',                                'Ammo Type': 'Foam',                        'Abbv': 'MNR-Foam',                    'Effect': '1/2 inch x 1/2 inch', 'To- Hit': '9',      'Dam': '',                   'DP': '1',  'Cost': '25',     'Weight': '20',   'Space': '0.3333333333', 'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '25',     'Loaded Weight': '20',   'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Mini Rocket',                       'Drop-Down Name': 'Mini Rocket - Smoke',                               'Ammo Type': 'Smoke',                       'Abbv': 'MNR-Smoke',                   'Effect': '1/2 inch x 2',        'To- Hit': '9',      'Dam': '',                   'DP': '1',  'Cost': '50',     'Weight': '20',   'Space': '0.3333333333', 'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '50',     'Loaded Weight': '20',   'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Mini Rocket',                       'Drop-Down Name': 'Mini Rocket - Hot Smoke',                           'Ammo Type': 'Hot Smoke',                   'Abbv': 'MNR-Hot Smoke',               'Effect': '1/2 inch x 2',        'To- Hit': '9',      'Dam': '',                   'DP': '1',  'Cost': '50',     'Weight': '20',   'Space': '0.3333333333', 'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '50',     'Loaded Weight': '20',   'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Mini Rocket',                       'Drop-Down Name': 'Mini Rocket - Tear Gas',                            'Ammo Type': 'Tear Gas',                    'Abbv': 'MNR-Tear Gas',                'Effect': '1/2 inch x 2',        'To- Hit': '9',      'Dam': '',                   'DP': '1',  'Cost': '100',    'Weight': '20',   'Space': '0.3333333333', 'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '100',    'Loaded Weight': '20',   'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Light Rocket',                      'Drop-Down Name': 'Light Rocket',                                      'Ammo Type': 'Normal',                      'Abbv': 'LR',                          'Effect': '1 inch Radius',       'To- Hit': '9',      'Dam': '1D',                 'DP': '1',  'Cost': '75',     'Weight': '25',   'Space': '0.5',          'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '75',     'Loaded Weight': '25',   'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Light Rocket',                      'Drop-Down Name': 'Light Rocket - Armor Piercing',                     'Ammo Type': 'Armor Piercing',              'Abbv': 'LR-AP',                       'Effect': '',                    'To- Hit': '9',      'Dam': '1D+1',               'DP': '1',  'Cost': '112.5',  'Weight': '25',   'Space': '0.5',          'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '112.5',  'Loaded Weight': '25',   'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Light Rocket',                      'Drop-Down Name': 'Light Rocket - Incendiary',                         'Ammo Type': 'Incendiary',                  'Abbv': 'LR-Incendiary',               'Effect': '1 inch Radius',       'To- Hit': '9',      'Dam': '1D+1* (2/1)',        'DP': '1',  'Cost': '150',    'Weight': '37.5', 'Space': '0.5',          'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '150',    'Loaded Weight': '37.5', 'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Light Rocket',                      'Drop-Down Name': 'Light Rocket - Chaff',                              'Ammo Type': 'Chaff',                       'Abbv': 'LR-Chaff',                    'Effect': '1/2 inch x 1',        'To- Hit': '9',      'Dam': '',                   'DP': '1',  'Cost': '70',     'Weight': '25',   'Space': '0.5',          'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '70',     'Loaded Weight': '25',   'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Light Rocket',                      'Drop-Down Name': 'Light Rocket - Foam',                               'Ammo Type': 'Foam',                        'Abbv': 'LR-Foam',                     'Effect': '1/2 inch x 1/2 inch', 'To- Hit': '9',      'Dam': '',                   'DP': '1',  'Cost': '37.5',   'Weight': '25',   'Space': '0.5',          'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '37.5',   'Loaded Weight': '25',   'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Light Rocket',                      'Drop-Down Name': 'Light Rocket - Smoke',                              'Ammo Type': 'Smoke',                       'Abbv': 'LR-Smoke',                    'Effect': '1/2 inch x 2',        'To- Hit': '9',      'Dam': '',                   'DP': '1',  'Cost': '75',     'Weight': '25',   'Space': '0.5',          'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '75',     'Loaded Weight': '25',   'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Light Rocket',                      'Drop-Down Name': 'Light Rocket - Hot Smoke',                          'Ammo Type': 'Hot Smoke',                   'Abbv': 'LR-Hot Smoke',                'Effect': '1/2 inch x 2',        'To- Hit': '9',      'Dam': '',                   'DP': '1',  'Cost': '75',     'Weight': '25',   'Space': '0.5',          'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '75',     'Loaded Weight': '25',   'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Light Rocket',                      'Drop-Down Name': 'Light Rocket - Tear Gas',                           'Ammo Type': 'Tear Gas',                    'Abbv': 'LR-Tear Gas',                 'Effect': '1/2 inch x 2',        'To- Hit': '9',      'Dam': '',                   'DP': '1',  'Cost': '150',    'Weight': '25',   'Space': '0.5',          'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '150',    'Loaded Weight': '25',   'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Medium Rocket',                     'Drop-Down Name': 'Medium Rocket',                                     'Ammo Type': 'Normal',                      'Abbv': 'MR',                          'Effect': '1 inch Radius',       'To- Hit': '9',      'Dam': '2D',                 'DP': '2',  'Cost': '140',    'Weight': '50',   'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '140',    'Loaded Weight': '50',   'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Medium Rocket',                     'Drop-Down Name': 'Medium Rocket - Armor Piercing',                    'Ammo Type': 'Armor Piercing',              'Abbv': 'MR-AP',                       'Effect': '',                    'To- Hit': '9',      'Dam': '2D+2',               'DP': '2',  'Cost': '210',    'Weight': '50',   'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '210',    'Loaded Weight': '50',   'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Medium Rocket',                     'Drop-Down Name': 'Medium Rocket - Incendiary',                        'Ammo Type': 'Incendiary',                  'Abbv': 'MR-Incendiary',               'Effect': '1 inch Radius',       'To- Hit': '9',      'Dam': '2D+2* (3/2)',        'DP': '2',  'Cost': '280',    'Weight': '75',   'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '280',    'Loaded Weight': '75',   'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Medium Rocket',                     'Drop-Down Name': 'Medium Rocket - Chaff',                             'Ammo Type': 'Chaff',                       'Abbv': 'MR-Chaff',                    'Effect': '1 x 1',               'To- Hit': '9',      'Dam': '',                   'DP': '2',  'Cost': '135',    'Weight': '50',   'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '135',    'Loaded Weight': '50',   'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Medium Rocket',                     'Drop-Down Name': 'Medium Rocket - Foam',                              'Ammo Type': 'Foam',                        'Abbv': 'MR-Foam',                     'Effect': '1 x 1',               'To- Hit': '9',      'Dam': '',                   'DP': '2',  'Cost': '70',     'Weight': '50',   'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '70',     'Loaded Weight': '50',   'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Medium Rocket',                     'Drop-Down Name': 'Medium Rocket - Smoke',                             'Ammo Type': 'Smoke',                       'Abbv': 'MR-Smoke',                    'Effect': '1/2 inch x 4',        'To- Hit': '9',      'Dam': '',                   'DP': '2',  'Cost': '140',    'Weight': '50',   'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '140',    'Loaded Weight': '50',   'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Medium Rocket',                     'Drop-Down Name': 'Medium Rocket - Hot Smoke',                         'Ammo Type': 'Hot Smoke',                   'Abbv': 'MR-Hot Smoke',                'Effect': '1/2 inch x 4',        'To- Hit': '9',      'Dam': '',                   'DP': '2',  'Cost': '140',    'Weight': '50',   'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '140',    'Loaded Weight': '50',   'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Medium Rocket',                     'Drop-Down Name': 'Medium Rocket - Tear Gas',                          'Ammo Type': 'Tear Gas',                    'Abbv': 'MR-Tear Gas',                 'Effect': '1/2 inch x 4',        'To- Hit': '9',      'Dam': '',                   'DP': '2',  'Cost': '280',    'Weight': '50',   'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '280',    'Loaded Weight': '50',   'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Heavy Rocket',                      'Drop-Down Name': 'Heavy Rocket',                                      'Ammo Type': 'Normal',                      'Abbv': 'HR',                          'Effect': '2 inch Radius',       'To- Hit': '9',      'Dam': '3D',                 'DP': '2',  'Cost': '200',    'Weight': '100',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '200',    'Loaded Weight': '100',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Heavy Rocket',                      'Drop-Down Name': 'Heavy Rocket - Armor Piercing',                     'Ammo Type': 'Armor Piercing',              'Abbv': 'HR-AP',                       'Effect': '',                    'To- Hit': '9',      'Dam': '3D+3',               'DP': '2',  'Cost': '300',    'Weight': '100',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '300',    'Loaded Weight': '100',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Heavy Rocket',                      'Drop-Down Name': 'Heavy Rocket - Incendiary',                         'Ammo Type': 'Incendiary',                  'Abbv': 'HR-Incendiary',               'Effect': '2 inch Radius',       'To- Hit': '9',      'Dam': '3D+3* (4/3)',        'DP': '2',  'Cost': '400',    'Weight': '150',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '400',    'Loaded Weight': '150',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Heavy Rocket',                      'Drop-Down Name': 'Heavy Rocket - Chaff',                              'Ammo Type': 'Chaff',                       'Abbv': 'HR-Chaff',                    'Effect': '1 x 2',               'To- Hit': '9',      'Dam': '',                   'DP': '2',  'Cost': '175',    'Weight': '100',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '175',    'Loaded Weight': '100',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Heavy Rocket',                      'Drop-Down Name': 'Heavy Rocket - Foam',                               'Ammo Type': 'Foam',                        'Abbv': 'HR-Foam',                     'Effect': '1 x 2',               'To- Hit': '9',      'Dam': '',                   'DP': '2',  'Cost': '100',    'Weight': '100',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '100',    'Loaded Weight': '100',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Heavy Rocket',                      'Drop-Down Name': 'Heavy Rocket - Smoke',                              'Ammo Type': 'Smoke',                       'Abbv': 'HR-Smoke',                    'Effect': '1/2 inch x 6',        'To- Hit': '9',      'Dam': '',                   'DP': '2',  'Cost': '200',    'Weight': '100',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '200',    'Loaded Weight': '100',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Heavy Rocket',                      'Drop-Down Name': 'Heavy Rocket - Hot Smoke',                          'Ammo Type': 'Hot Smoke',                   'Abbv': 'HR-Hot Smoke',                'Effect': '1/2 inch x 6',        'To- Hit': '9',      'Dam': '',                   'DP': '2',  'Cost': '200',    'Weight': '100',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '200',    'Loaded Weight': '100',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Heavy Rocket',                      'Drop-Down Name': 'Heavy Rocket - Tear Gas',                           'Ammo Type': 'Tear Gas',                    'Abbv': 'HR-Tear Gas',                 'Effect': '1/2 inch x 6',        'To- Hit': '9',      'Dam': '',                   'DP': '2',  'Cost': '400',    'Weight': '100',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '400',    'Loaded Weight': '100',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Super Rocket',                     'Drop-Down Name': '*Super Rocket',                                     'Ammo Type': 'Normal',                      'Abbv': 'SR',                          'Effect': '2 inch Radius',       'To- Hit': '9',      'Dam': '9D',                 'DP': '2',  'Cost': '15000',  'Weight': '150',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '15000',  'Loaded Weight': '150',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Super Rocket',                     'Drop-Down Name': '*Super Rocket - Armor Piercing',                    'Ammo Type': 'Armor Piercing',              'Abbv': 'SR-AP',                       'Effect': '',                    'To- Hit': '9',      'Dam': '9D+9',               'DP': '2',  'Cost': '22500',  'Weight': '150',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '22500',  'Loaded Weight': '150',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Super Rocket',                     'Drop-Down Name': '*Super Rocket - Incendiary',                        'Ammo Type': 'Incendiary',                  'Abbv': 'SR-Incendiary',               'Effect': '2 inch Radius',       'To- Hit': '9',      'Dam': '9D+9* (4/3)',        'DP': '2',  'Cost': '30000',  'Weight': '225',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '30000',  'Loaded Weight': '225',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Super Rocket',                     'Drop-Down Name': '*Super Rocket - Chaff',                             'Ammo Type': 'Chaff',                       'Abbv': 'SR-Chaff',                    'Effect': '2 x 2',               'To- Hit': '9',      'Dam': '',                   'DP': '2',  'Cost': '7500',   'Weight': '150',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '7500',   'Loaded Weight': '150',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Super Rocket',                     'Drop-Down Name': '*Super Rocket - Foam',                              'Ammo Type': 'Foam',                        'Abbv': 'SR-Foam',                     'Effect': '1 x 2',               'To- Hit': '9',      'Dam': '',                   'DP': '2',  'Cost': '7500',   'Weight': '150',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '7500',   'Loaded Weight': '150',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Super Rocket',                     'Drop-Down Name': '*Super Rocket - Smoke',                             'Ammo Type': 'Smoke',                       'Abbv': 'SR-Smoke',                    'Effect': '1/2 inch x 18',       'To- Hit': '9',      'Dam': '',                   'DP': '2',  'Cost': '15000',  'Weight': '150',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '15000',  'Loaded Weight': '150',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Super Rocket',                     'Drop-Down Name': '*Super Rocket - Hot Smoke',                         'Ammo Type': 'Hot Smoke',                   'Abbv': 'SR-Hot Smoke',                'Effect': '1/2 inch x 18',       'To- Hit': '9',      'Dam': '',                   'DP': '2',  'Cost': '15000',  'Weight': '150',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '15000',  'Loaded Weight': '150',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Super Rocket',                     'Drop-Down Name': '*Super Rocket - Tear Gas',                          'Ammo Type': 'Tear Gas',                    'Abbv': 'SR-Tear Gas',                 'Effect': '1/2 inch x 18',       'To- Hit': '9',      'Dam': '',                   'DP': '2',  'Cost': '30000',  'Weight': '150',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '30000',  'Loaded Weight': '150',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Anti-Power Plant Rocket',           'Drop-Down Name': 'Anti-Power Plant Rocket',                           'Ammo Type': 'Normal',                      'Abbv': 'APPR',                        'Effect': '1 inch Radius',       'To- Hit': '9',      'Dam': '1D-1*',              'DP': '1',  'Cost': '500',    'Weight': '40',   'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '500',    'Loaded Weight': '40',   'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Micromissile Launcher',             'Drop-Down Name': 'Micromissile Launcher',                             'Ammo Type': 'Normal',                      'Abbv': 'MML',                         'Effect': '1 inch Radius',       'To- Hit': '8',      'Dam': '1D',                 'DP': '2',  'Cost': '750',    'Weight': '100',  'Space': '1',            'Shots': '10', 'Shot Cost': '20',    'Shot Weight': '2.5'   ,'Loaded Cost': '950',    'Loaded Weight': '125',  'Mag Cost': '250',   'Mag Weight': '40'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Micromissile Launcher',             'Drop-Down Name': 'Micromissile Launcher - Armor Piercing',            'Ammo Type': 'Armor Piercing',              'Abbv': 'MML-AP',                      'Effect': '',                    'To- Hit': '8',      'Dam': '1D+1',               'DP': '2',  'Cost': '750',    'Weight': '100',  'Space': '1',            'Shots': '10', 'Shot Cost': '30',    'Shot Weight': '2.5'   ,'Loaded Cost': '1050',   'Loaded Weight': '125',  'Mag Cost': '350',   'Mag Weight': '40'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Micromissile Launcher',             'Drop-Down Name': 'Micromissile Launcher - Incendiary',                'Ammo Type': 'Incendiary',                  'Abbv': 'MML-Incendiary',              'Effect': '1 inch Radius',       'To- Hit': '8',      'Dam': '1D+1* (2/1)',        'DP': '2',  'Cost': '750',    'Weight': '100',  'Space': '1',            'Shots': '10', 'Shot Cost': '35',    'Shot Weight': '6'     ,'Loaded Cost': '1100',   'Loaded Weight': '160',  'Mag Cost': '400',   'Mag Weight': '75'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Micromissile Launcher',             'Drop-Down Name': 'Micromissile Launcher - Chaff',                     'Ammo Type': 'Chaff',                       'Abbv': 'MML-Chaff',                   'Effect': '1/2 inch x 1',        'To- Hit': '8',      'Dam': '',                   'DP': '2',  'Cost': '750',    'Weight': '100',  'Space': '1',            'Shots': '10', 'Shot Cost': '15',    'Shot Weight': '2.5'   ,'Loaded Cost': '900',    'Loaded Weight': '125',  'Mag Cost': '200',   'Mag Weight': '40'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Micromissile Launcher',             'Drop-Down Name': 'Micromissile Launcher - Foam',                      'Ammo Type': 'Foam',                        'Abbv': 'MML-Foam',                    'Effect': '1/2 inch x 1/2 inch', 'To- Hit': '8',      'Dam': '',                   'DP': '2',  'Cost': '750',    'Weight': '100',  'Space': '1',            'Shots': '10', 'Shot Cost': '10',    'Shot Weight': '2.5'   ,'Loaded Cost': '850',    'Loaded Weight': '125',  'Mag Cost': '150',   'Mag Weight': '40'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Micromissile Launcher',             'Drop-Down Name': 'Micromissile Launcher - Smoke',                     'Ammo Type': 'Smoke',                       'Abbv': 'MML-Smoke',                   'Effect': '1/2 inch x 2',        'To- Hit': '8',      'Dam': '',                   'DP': '2',  'Cost': '750',    'Weight': '100',  'Space': '1',            'Shots': '10', 'Shot Cost': '20',    'Shot Weight': '2.5'   ,'Loaded Cost': '950',    'Loaded Weight': '125',  'Mag Cost': '250',   'Mag Weight': '40'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Micromissile Launcher',             'Drop-Down Name': 'Micromissile Launcher - Hot Smoke',                 'Ammo Type': 'Hot Smoke',                   'Abbv': 'MML-Hot Smoke',               'Effect': '1/2 inch x 2',        'To- Hit': '8',      'Dam': '',                   'DP': '2',  'Cost': '750',    'Weight': '100',  'Space': '1',            'Shots': '10', 'Shot Cost': '20',    'Shot Weight': '2.5'   ,'Loaded Cost': '950',    'Loaded Weight': '125',  'Mag Cost': '250',   'Mag Weight': '40'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Micromissile Launcher',             'Drop-Down Name': 'Micromissile Launcher - Tear Gas',                  'Ammo Type': 'Tear Gas',                    'Abbv': 'MML-Tear Gas',                'Effect': '1/2 inch x 2',        'To- Hit': '8',      'Dam': '',                   'DP': '2',  'Cost': '1500',   'Weight': '100',  'Space': '1',            'Shots': '10', 'Shot Cost': '40',    'Shot Weight': '2.5'   ,'Loaded Cost': '1900',   'Loaded Weight': '125',  'Mag Cost': '450',   'Mag Weight': '40'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Rocket Launcher',                   'Drop-Down Name': 'Rocket Launcher',                                   'Ammo Type': 'Normal',                      'Abbv': 'RL',                          'Effect': '2 inch Radius',       'To- Hit': '8',      'Dam': '2D',                 'DP': '2',  'Cost': '1000',   'Weight': '200',  'Space': '2',            'Shots': '10', 'Shot Cost': '35',    'Shot Weight': '5'     ,'Loaded Cost': '1350',   'Loaded Weight': '250',  'Mag Cost': '400',   'Mag Weight': '65'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Rocket Launcher',                   'Drop-Down Name': 'Rocket Launcher - Armor Piercing',                  'Ammo Type': 'Armor Piercing',              'Abbv': 'RL-AP',                       'Effect': '',                    'To- Hit': '8',      'Dam': '2D+2',               'DP': '2',  'Cost': '1000',   'Weight': '200',  'Space': '2',            'Shots': '10', 'Shot Cost': '53',    'Shot Weight': '5'     ,'Loaded Cost': '1525',   'Loaded Weight': '250',  'Mag Cost': '575',   'Mag Weight': '65'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Rocket Launcher',                   'Drop-Down Name': 'Rocket Launcher - Incendiary',                      'Ammo Type': 'Incendiary',                  'Abbv': 'RL-Incendiary',               'Effect': '2 inch Radius',       'To- Hit': '8',      'Dam': '2D+2* (3/2)',        'DP': '2',  'Cost': '1000',   'Weight': '200',  'Space': '2',            'Shots': '10', 'Shot Cost': '60',    'Shot Weight': '11'    ,'Loaded Cost': '1600',   'Loaded Weight': '310',  'Mag Cost': '650',   'Mag Weight': '125'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Rocket Launcher',                   'Drop-Down Name': 'Rocket Launcher - Chaff',                           'Ammo Type': 'Chaff',                       'Abbv': 'RL-Chaff',                    'Effect': '1 x 1',               'To- Hit': '8',      'Dam': '',                   'DP': '2',  'Cost': '1000',   'Weight': '200',  'Space': '2',            'Shots': '10', 'Shot Cost': '30',    'Shot Weight': '5'     ,'Loaded Cost': '1300',   'Loaded Weight': '250',  'Mag Cost': '350',   'Mag Weight': '65'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Rocket Launcher',                   'Drop-Down Name': 'Rocket Launcher - Foam',                            'Ammo Type': 'Foam',                        'Abbv': 'RL-Foam',                     'Effect': '1 x 1',               'To- Hit': '8',      'Dam': '',                   'DP': '2',  'Cost': '1000',   'Weight': '200',  'Space': '2',            'Shots': '10', 'Shot Cost': '18',    'Shot Weight': '5'     ,'Loaded Cost': '1175',   'Loaded Weight': '250',  'Mag Cost': '225',   'Mag Weight': '65'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Rocket Launcher',                   'Drop-Down Name': 'Rocket Launcher - Smoke',                           'Ammo Type': 'Smoke',                       'Abbv': 'RL-Smoke',                    'Effect': '1/2 inch x 4',        'To- Hit': '8',      'Dam': '',                   'DP': '2',  'Cost': '1000',   'Weight': '200',  'Space': '2',            'Shots': '10', 'Shot Cost': '35',    'Shot Weight': '5'     ,'Loaded Cost': '1350',   'Loaded Weight': '250',  'Mag Cost': '400',   'Mag Weight': '65'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Rocket Launcher',                   'Drop-Down Name': 'Rocket Launcher - Hot Smoke',                       'Ammo Type': 'Hot Smoke',                   'Abbv': 'RL-Hot Smoke',                'Effect': '1/2 inch x 4',        'To- Hit': '8',      'Dam': '',                   'DP': '2',  'Cost': '1000',   'Weight': '200',  'Space': '2',            'Shots': '10', 'Shot Cost': '35',    'Shot Weight': '5'     ,'Loaded Cost': '1350',   'Loaded Weight': '250',  'Mag Cost': '400',   'Mag Weight': '65'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Rocket Launcher',                   'Drop-Down Name': 'Rocket Launcher - Tear Gas',                        'Ammo Type': 'Tear Gas',                    'Abbv': 'RL-Tear Gas',                 'Effect': '1/2 inch x 4',        'To- Hit': '8',      'Dam': '',                   'DP': '2',  'Cost': '1000',   'Weight': '200',  'Space': '2',            'Shots': '10', 'Shot Cost': '70',    'Shot Weight': '5'     ,'Loaded Cost': '1700',   'Loaded Weight': '250',  'Mag Cost': '750',   'Mag Weight': '65'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Rocket Launcher',                   'Drop-Down Name': 'Rocket Launcher - Flare Round',                     'Ammo Type': 'Flare Round',                 'Abbv': 'RL w/Flare',                  'Effect': '0',                   'To- Hit': '10',     'Dam': '1D-2',               'DP': '2',  'Cost': '1000',   'Weight': '200',  'Space': '2',            'Shots': '10', 'Shot Cost': '20',    'Shot Weight': '5'     ,'Loaded Cost': '1200',   'Loaded Weight': '250',  'Mag Cost': '250',   'Mag Weight': '65'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Multi-Fire Rocket Pod',             'Drop-Down Name': 'Multi-Fire Rocket Pod',                             'Ammo Type': 'Normal',                      'Abbv': 'MFR',                         'Effect': '2 inch Radius',       'To- Hit': '9',      'Dam': '1D/rocket (6)',      'DP': '3',  'Cost': '450',    'Weight': '150',  'Space': '2',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '450',    'Loaded Weight': '150',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Multi-Fire Rocket Pod',             'Drop-Down Name': 'Multi-Fire Rocket Pod - Armor Piercing',            'Ammo Type': 'Armor Piercing',              'Abbv': 'MFR-AP',                      'Effect': '',                    'To- Hit': '9',      'Dam': '1D+1/rocket (6D+6)', 'DP': '3',  'Cost': '675',    'Weight': '150',  'Space': '2',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '675',    'Loaded Weight': '150',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Multi-Fire Rocket Pod',             'Drop-Down Name': 'Multi-Fire Rocket Pod - Foam',                      'Ammo Type': 'Foam',                        'Abbv': 'MFR-Foam',                    'Effect': '1/2 inch x 1/2 inch', 'To- Hit': '9',      'Dam': '',                   'DP': '3',  'Cost': '225',    'Weight': '150',  'Space': '2',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '225',    'Loaded Weight': '150',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Multi-Fire Rocket Pod',             'Drop-Down Name': 'Multi-Fire Rocket Pod - Smoke',                     'Ammo Type': 'Smoke',                       'Abbv': 'MFR-Smoke',                   'Effect': '1/2 inch x 2',        'To- Hit': '9',      'Dam': '',                   'DP': '3',  'Cost': '450',    'Weight': '150',  'Space': '2',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '450',    'Loaded Weight': '150',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Multi-Fire Rocket Pod',             'Drop-Down Name': 'Multi-Fire Rocket Pod - Hot Smoke',                 'Ammo Type': 'Hot Smoke',                   'Abbv': 'MFR-Hot Smoke',               'Effect': '1/2 inch x 2',        'To- Hit': '9',      'Dam': '',                   'DP': '3',  'Cost': '450',    'Weight': '150',  'Space': '2',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '450',    'Loaded Weight': '150',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Multi-Fire Rocket Pod',             'Drop-Down Name': 'Multi-Fire Rocket Pod - Tear Gas',                  'Ammo Type': 'Tear Gas',                    'Abbv': 'MFR-Tear Gas',                'Effect': '1/2 inch x 2',        'To- Hit': '9',      'Dam': '',                   'DP': '3',  'Cost': '900',    'Weight': '150',  'Space': '2',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '900',    'Loaded Weight': '150',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Variable-Fire Rocket Pod',          'Drop-Down Name': 'Variable-Fire Rocket Pod',                          'Ammo Type': 'Normal',                      'Abbv': 'VFRP',                        'Effect': '2 inch Radius',       'To- Hit': '9',      'Dam': '1D per rocket',      'DP': '5',  'Cost': '2000',   'Weight': '200',  'Space': '3',            'Shots': '30', 'Shot Cost': '35',    'Shot Weight': '7.5'   ,'Loaded Cost': '3050',   'Loaded Weight': '425',  'Mag Cost': '1100',  'Mag Weight': '240'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Variable-Fire Rocket Pod',          'Drop-Down Name': 'Variable-Fire Rocket Pod - Armor Piercing',         'Ammo Type': 'Armor Piercing',              'Abbv': 'VFRP-AP',                     'Effect': '',                    'To- Hit': '9',      'Dam': '1D+1 per rocket',    'DP': '5',  'Cost': '2000',   'Weight': '200',  'Space': '3',            'Shots': '30', 'Shot Cost': '53',    'Shot Weight': '7.5'   ,'Loaded Cost': '3575',   'Loaded Weight': '425',  'Mag Cost': '1625',  'Mag Weight': '240'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Variable-Fire Rocket Pod',          'Drop-Down Name': 'Variable-Fire Rocket Pod - Chaff',                  'Ammo Type': 'Chaff',                       'Abbv': 'VFRP-Chaff',                  'Effect': '1/2 inch x 1',        'To- Hit': '9',      'Dam': '',                   'DP': '5',  'Cost': '2000',   'Weight': '200',  'Space': '3',            'Shots': '30', 'Shot Cost': '30',    'Shot Weight': '7.5'   ,'Loaded Cost': '2900',   'Loaded Weight': '425',  'Mag Cost': '950',   'Mag Weight': '240'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Variable-Fire Rocket Pod',          'Drop-Down Name': 'Variable-Fire Rocket Pod - Foam',                   'Ammo Type': 'Foam',                        'Abbv': 'VFRP-Foam',                   'Effect': '1/2 inch x 1/2 inch', 'To- Hit': '9',      'Dam': '',                   'DP': '5',  'Cost': '2000',   'Weight': '200',  'Space': '3',            'Shots': '30', 'Shot Cost': '18',    'Shot Weight': '7.5'   ,'Loaded Cost': '2525',   'Loaded Weight': '425',  'Mag Cost': '575',   'Mag Weight': '240'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Variable-Fire Rocket Pod',          'Drop-Down Name': 'Variable-Fire Rocket Pod - Smoke',                  'Ammo Type': 'Smoke',                       'Abbv': 'VFRP-Smoke',                  'Effect': '1/2 inch x 2',        'To- Hit': '9',      'Dam': '',                   'DP': '5',  'Cost': '2000',   'Weight': '200',  'Space': '3',            'Shots': '30', 'Shot Cost': '35',    'Shot Weight': '7.5'   ,'Loaded Cost': '3050',   'Loaded Weight': '425',  'Mag Cost': '1100',  'Mag Weight': '240'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Variable-Fire Rocket Pod',          'Drop-Down Name': 'Variable-Fire Rocket Pod - Hot Smoke',              'Ammo Type': 'Hot Smoke',                   'Abbv': 'VFRP-Hot Smoke',              'Effect': '1/2 inch x 2',        'To- Hit': '9',      'Dam': '',                   'DP': '5',  'Cost': '2000',   'Weight': '200',  'Space': '3',            'Shots': '30', 'Shot Cost': '35',    'Shot Weight': '7.5'   ,'Loaded Cost': '3050',   'Loaded Weight': '425',  'Mag Cost': '1100',  'Mag Weight': '240'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Variable-Fire Rocket Pod',          'Drop-Down Name': 'Variable-Fire Rocket Pod - Tear Gas',               'Ammo Type': 'Tear Gas',                    'Abbv': 'VFRP-Tear Gas',               'Effect': '1/2 inch x 2',        'To- Hit': '9',      'Dam': '',                   'DP': '5',  'Cost': '2000',   'Weight': '200',  'Space': '3',            'Shots': '30', 'Shot Cost': '70',    'Shot Weight': '7.5'   ,'Loaded Cost': '4100',   'Loaded Weight': '425',  'Mag Cost': '2150',  'Mag Weight': '240'}
        self.weapons_rockets_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '',                                  'Drop-Down Name': 'MISSILES',                                          'Ammo Type': '',                            'Abbv': '',                            'Effect': '',                    'To- Hit': '',       'Dam': '',                   'DP': '',   'Cost': '',       'Weight': '',     'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_missiles_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Surface-to-Air Missile',            'Drop-Down Name': 'Surface-to-Air Missile',                            'Ammo Type': 'Normal',                      'Abbv': 'SAM',                         'Effect': '2 inch Radius',       'To- Hit': '6/11',   'Dam': '4D',                 'DP': '3',  'Cost': '500',    'Weight': '150',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '500',    'Loaded Weight': '150',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_missiles_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Surface-to-Air Missile',            'Drop-Down Name': 'Surface-to-Air Missile - Armor Piercing',           'Ammo Type': 'Armor Piercing',              'Abbv': 'SAM-AP',                      'Effect': '2 inch Radius',       'To- Hit': '6/11',   'Dam': '4D+4',               'DP': '3',  'Cost': '750',    'Weight': '150',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '750',    'Loaded Weight': '150',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_missiles_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Surface-to-Air Missile',            'Drop-Down Name': 'Surface-to-Air Missile - HARM',                     'Ammo Type': 'HARM',                        'Abbv': 'SAM-HARM',                    'Effect': '2 inch Radius',       'To- Hit': '6/11',   'Dam': '4D',                 'DP': '3',  'Cost': '600',    'Weight': '150',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '600',    'Loaded Weight': '150',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_missiles_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Surface-to-Air Missile',            'Drop-Down Name': 'Surface-to-Air Missile - AP HARM',                  'Ammo Type': 'AP HARM',                     'Abbv': 'SAM-AP HARM',                 'Effect': '2 inch Radius',       'To- Hit': '6/11',   'Dam': '4D+4',               'DP': '3',  'Cost': '850',    'Weight': '150',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '850',    'Loaded Weight': '150',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_missiles_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Surface-to-Air Missile',            'Drop-Down Name': 'Surface-to-Air Missile - Stealth',                  'Ammo Type': 'Stealth',                     'Abbv': 'SAM Stealth',                 'Effect': '2 inch Radius',       'To- Hit': '6/11',   'Dam': '4D',                 'DP': '3',  'Cost': '500',    'Weight': '150',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '500',    'Loaded Weight': '150',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_missiles_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Surface-to-Air Missile',            'Drop-Down Name': 'Surface-to-Air Missile - AP Stealth',               'Ammo Type': 'AP Stealth',                  'Abbv': 'SAM-AP Stealth',              'Effect': '2 inch Radius',       'To- Hit': '6/11',   'Dam': '4D+4',               'DP': '3',  'Cost': '750',    'Weight': '150',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '750',    'Loaded Weight': '150',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_missiles_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Surface-to-Air Missile',            'Drop-Down Name': 'Surface-to-Air Missile - HARM Stealth',             'Ammo Type': 'HARM Stealth',                'Abbv': 'SAM-HARM Stealth',            'Effect': '2 inch Radius',       'To- Hit': '6/11',   'Dam': '4D',                 'DP': '3',  'Cost': '600',    'Weight': '150',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '600',    'Loaded Weight': '150',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_missiles_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Surface-to-Air Missile',            'Drop-Down Name': 'Surface-to-Air Missile - AP HARM Stealth',          'Ammo Type': 'AP HARM Stealth',             'Abbv': 'SAM-AP HARM Stealth',         'Effect': '2 inch Radius',       'To- Hit': '6/11',   'Dam': '4D+4',               'DP': '3',  'Cost': '850',    'Weight': '150',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '850',    'Loaded Weight': '150',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_missiles_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Wire-Guided Missile',               'Drop-Down Name': 'Wire-Guided Missile',                               'Ammo Type': 'Normal',                      'Abbv': 'WGM',                         'Effect': '2 inch Radius',       'To- Hit': '6',      'Dam': '3D',                 'DP': '2',  'Cost': '2000',   'Weight': '100',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '2000',   'Loaded Weight': '100',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_missiles_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Wire-Guided Missile',               'Drop-Down Name': 'Wire-Guided Missile - Armor Piercing',              'Ammo Type': 'Armor Piercing',              'Abbv': 'WGM-AP',                      'Effect': '',                    'To- Hit': '6',      'Dam': '3D+3',               'DP': '2',  'Cost': '3000',   'Weight': '100',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '3000',   'Loaded Weight': '100',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_missiles_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Wire-Guided Missile',               'Drop-Down Name': 'Wire-Guided Missile - HARM',                        'Ammo Type': 'HARM',                        'Abbv': 'WGM-HARM',                    'Effect': '2 inch Radius',       'To- Hit': '6',      'Dam': '3D',                 'DP': '2',  'Cost': '2100',   'Weight': '100',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '2100',   'Loaded Weight': '100',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_missiles_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Wire-Guided Missile',               'Drop-Down Name': 'Wire-Guided Missile - Long Range',                  'Ammo Type': 'Long Range',                  'Abbv': 'WGM-LR',                      'Effect': '2 inch Radius',       'To- Hit': '6',      'Dam': '3D',                 'DP': '2',  'Cost': '4000',   'Weight': '200',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '4000',   'Loaded Weight': '200',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_missiles_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Wire-Guided Missile',               'Drop-Down Name': 'Wire-Guided Missile - Long Range High Speed',       'Ammo Type': 'Long Range High Speed',       'Abbv': 'WGM-LRHS',                    'Effect': '2 inch Radius',       'To- Hit': '6',      'Dam': '3D',                 'DP': '2',  'Cost': '8000',   'Weight': '200',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '8000',   'Loaded Weight': '200',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_missiles_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Wire-Guided Missile',               'Drop-Down Name': 'Wire-Guided Missile - AP HARM',                     'Ammo Type': 'AP HARM',                     'Abbv': 'WGM-AP HARM',                 'Effect': '',                    'To- Hit': '6',      'Dam': '3D+3',               'DP': '2',  'Cost': '3100',   'Weight': '100',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '3100',   'Loaded Weight': '100',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_missiles_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Wire-Guided Missile',               'Drop-Down Name': 'Wire-Guided Missile - AP LR',                       'Ammo Type': 'AP LR',                       'Abbv': 'WGM-AP LR',                   'Effect': '',                    'To- Hit': '6',      'Dam': '3D+3',               'DP': '2',  'Cost': '6000',   'Weight': '200',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '6000',   'Loaded Weight': '200',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_missiles_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Wire-Guided Missile',               'Drop-Down Name': 'Wire-Guided Missile - AP LRHS',                     'Ammo Type': 'AP LRHS',                     'Abbv': 'WGM-AP LRHS',                 'Effect': '',                    'To- Hit': '6',      'Dam': '3D+3',               'DP': '2',  'Cost': '12000',  'Weight': '200',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '12000',  'Loaded Weight': '2000', 'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_missiles_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Wire-Guided Missile',               'Drop-Down Name': 'Wire-Guided Missile - AP HARM LR',                  'Ammo Type': 'AP HARM LR',                  'Abbv': 'WGM-AP HARM LR',              'Effect': '',                    'To- Hit': '6',      'Dam': '3D+3',               'DP': '2',  'Cost': '6100',   'Weight': '200',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '6100',   'Loaded Weight': '200',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_missiles_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Wire-Guided Missile',               'Drop-Down Name': 'Wire-Guided Missile - AP HARM LRHS',                'Ammo Type': 'AP HARM LRHS',                'Abbv': 'WGM-AP HARM LRHS',            'Effect': '',                    'To- Hit': '6',      'Dam': '3D+3',               'DP': '2',  'Cost': '12100',  'Weight': '200',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '12100',  'Loaded Weight': '2000', 'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_missiles_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Wire-Guided Missile',               'Drop-Down Name': 'Wire-Guided Missile - Stealth',                     'Ammo Type': 'Stealth',                     'Abbv': 'WGM-Stealth',                 'Effect': '2 inch Radius',       'To- Hit': '6',      'Dam': '3D',                 'DP': '2',  'Cost': '5000',   'Weight': '100',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '5000',   'Loaded Weight': '100',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_missiles_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Wire-Guided Missile',               'Drop-Down Name': 'Wire-Guided Missile - Stealth AP',                  'Ammo Type': 'Stealth AP',                  'Abbv': 'WGM-Stealth AP',              'Effect': '',                    'To- Hit': '6',      'Dam': '3D+3',               'DP': '2',  'Cost': '7500',   'Weight': '100',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '7500',   'Loaded Weight': '100',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_missiles_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Wire-Guided Missile',               'Drop-Down Name': 'Wire-Guided Missile - Stealth HARM',                'Ammo Type': 'Stealth HARM',                'Abbv': 'WGM-Stealth HARM',            'Effect': '2 inch Radius',       'To- Hit': '6',      'Dam': '3D',                 'DP': '2',  'Cost': '5100',   'Weight': '100',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '5100',   'Loaded Weight': '100',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_missiles_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Wire-Guided Missile',               'Drop-Down Name': 'Wire-Guided Missile - Stealth LR',                  'Ammo Type': 'Stealth LR',                  'Abbv': 'WGM-Stealth LR',              'Effect': '2 inch Radius',       'To- Hit': '6',      'Dam': '3D',                 'DP': '2',  'Cost': '10000',  'Weight': '200',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '10000',  'Loaded Weight': '200',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_missiles_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Wire-Guided Missile',               'Drop-Down Name': 'Wire-Guided Missile - Stealth LRHS',                'Ammo Type': 'Stealth LRHS',                'Abbv': 'WGM-Stealth LRHS',            'Effect': '2 inch Radius',       'To- Hit': '6',      'Dam': '3D',                 'DP': '2',  'Cost': '20000',  'Weight': '200',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '20000',  'Loaded Weight': '200',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_missiles_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Wire-Guided Missile',               'Drop-Down Name': 'Wire-Guided Missile - Stealth AP HARM',             'Ammo Type': 'Stealth AP HARM',             'Abbv': 'WGM-Stealth AP HARM',         'Effect': '',                    'To- Hit': '6',      'Dam': '3D+3',               'DP': '2',  'Cost': '7600',   'Weight': '100',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '7600',   'Loaded Weight': '100',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_missiles_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Wire-Guided Missile',               'Drop-Down Name': 'Wire-Guided Missile - Stealth AP LR',               'Ammo Type': 'Stealth AP LR',               'Abbv': 'WGM-Stealth AP LR',           'Effect': '',                    'To- Hit': '6',      'Dam': '3D+3',               'DP': '2',  'Cost': '15000',  'Weight': '200',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '15000',  'Loaded Weight': '200',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_missiles_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Wire-Guided Missile',               'Drop-Down Name': 'Wire-Guided Missile - Stealth AP LRHS',             'Ammo Type': 'Stealth AP LRHS',             'Abbv': 'WGM-Stealth AP LRHS',         'Effect': '',                    'To- Hit': '6',      'Dam': '3D+3',               'DP': '2',  'Cost': '30000',  'Weight': '200',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '30000',  'Loaded Weight': '2000', 'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_missiles_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Wire-Guided Missile',               'Drop-Down Name': 'Wire-Guided Missile - Stealth AP HARM LR',          'Ammo Type': 'Stealth AP HARM LR',          'Abbv': 'WGM-Stealth AP HARM LR',      'Effect': '',                    'To- Hit': '6',      'Dam': '3D+3',               'DP': '2',  'Cost': '15100',  'Weight': '200',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '15100',  'Loaded Weight': '200',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_missiles_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Wire-Guided Missile',               'Drop-Down Name': 'Wire-Guided Missile - Stealth AP HARM LRHS',        'Ammo Type': 'Stealth AP HARM LRHS',        'Abbv': 'WGM-Stealth AP HARM LRHS',    'Effect': '',                    'To- Hit': '6',      'Dam': '3D+3',               'DP': '2',  'Cost': '30100',  'Weight': '200',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '30100',  'Loaded Weight': '2000', 'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_missiles_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '',                                  'Drop-Down Name': 'ENERGY WEAPONS',                                    'Ammo Type': '',                            'Abbv': '',                            'Effect': '',                    'To- Hit': '',       'Dam': '',                   'DP': '',   'Cost': '',       'Weight': '',     'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Targeting Laser',                   'Drop-Down Name': 'Targeting Laser',                                   'Ammo Type': 'Normal',                      'Abbv': 'TL',                          'Effect': '0',                   'To- Hit': '6',      'Dam': '0',                  'DP': '1',  'Cost': '1000',   'Weight': '50',   'Space': '0',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '1000',   'Loaded Weight': '50',   'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Targeting Laser',                   'Drop-Down Name': 'Targeting Laser - Infared',                         'Ammo Type': 'Infared',                     'Abbv': 'IR-TL',                       'Effect': '0',                   'To- Hit': '6',      'Dam': '0',                  'DP': '1',  'Cost': '2000',   'Weight': '50',   'Space': '0',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '2000',   'Loaded Weight': '50',   'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Targeting Laser',                   'Drop-Down Name': 'Targeting Laser - Blue-Green',                      'Ammo Type': 'Blue-Green',                  'Abbv': 'BG-TL',                       'Effect': '0',                   'To- Hit': '6',      'Dam': '0',                  'DP': '1',  'Cost': '1250',   'Weight': '50',   'Space': '0',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '1250',   'Loaded Weight': '50',   'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Targeting Laser',                   'Drop-Down Name': 'Targeting Laser - Pulse',                           'Ammo Type': 'Pulse',                       'Abbv': 'Pulse-TL',                    'Effect': '0',                   'To- Hit': '6',      'Dam': '0',                  'DP': '1',  'Cost': '1500',   'Weight': '50',   'Space': '0',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '1500',   'Loaded Weight': '50',   'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Military Targeting Laser',         'Drop-Down Name': '*Military Targeting Laser',                         'Ammo Type': 'Normal',                      'Abbv': 'MTL',                         'Effect': '0',                   'To- Hit': '6',      'Dam': '0',                  'DP': '1',  'Cost': '15000',  'Weight': '50',   'Space': '0',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '15000',  'Loaded Weight': '50',   'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Military Targeting Laser',         'Drop-Down Name': '*Military Targeting Laser - Infared',               'Ammo Type': 'Infared',                     'Abbv': 'IR-MTL',                      'Effect': '0',                   'To- Hit': '6',      'Dam': '0',                  'DP': '1',  'Cost': '30000',  'Weight': '50',   'Space': '0',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '30000',  'Loaded Weight': '50',   'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Military Targeting Laser',         'Drop-Down Name': '*Military Targeting Laser - Blue-Green',            'Ammo Type': 'Blue-Green',                  'Abbv': 'BG-MTL',                      'Effect': '0',                   'To- Hit': '6',      'Dam': '0',                  'DP': '1',  'Cost': '18750',  'Weight': '50',   'Space': '0',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '18750',  'Loaded Weight': '50',   'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Military Targeting Laser',         'Drop-Down Name': '*Military Targeting Laser - Pulse',                 'Ammo Type': 'Pulse',                       'Abbv': 'Pulse-MTL',                   'Effect': '0',                   'To- Hit': '6',      'Dam': '0',                  'DP': '1',  'Cost': '22500',  'Weight': '50',   'Space': '0',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '22500',  'Loaded Weight': '50',   'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Light Laser',                       'Drop-Down Name': 'Light Laser',                                       'Ammo Type': 'Normal',                      'Abbv': 'LL',                          'Effect': 'Area',                'To- Hit': '6',      'Dam': '1D (0/0)',           'DP': '2',  'Cost': '3000',   'Weight': '200',  'Space': '1',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '3000',   'Loaded Weight': '200',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Light Laser',                       'Drop-Down Name': 'Light Laser - Infared',                             'Ammo Type': 'Infared',                     'Abbv': 'IR-LL',                       'Effect': 'Area',                'To- Hit': '6',      'Dam': '1D* (0/0)',          'DP': '2',  'Cost': '6000',   'Weight': '200',  'Space': '1',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '6000',   'Loaded Weight': '200',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Light Laser',                       'Drop-Down Name': 'Light Laser - Blue-Green',                          'Ammo Type': 'Blue-Green',                  'Abbv': 'BG-LL',                       'Effect': 'Area',                'To- Hit': '6',      'Dam': '1D (0/0)',           'DP': '2',  'Cost': '3750',   'Weight': '200',  'Space': '1',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '3750',   'Loaded Weight': '200',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Light Laser',                       'Drop-Down Name': 'Light Laser - Pulse',                               'Ammo Type': 'Pulse',                       'Abbv': 'Pulse-LL',                    'Effect': 'Area',                'To- Hit': '6',      'Dam': '1D+1 (0/0)',         'DP': '2',  'Cost': '4500',   'Weight': '200',  'Space': '1',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '4500',   'Loaded Weight': '200',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Medium Laser',                      'Drop-Down Name': 'Medium Laser',                                      'Ammo Type': 'Normal',                      'Abbv': 'ML',                          'Effect': 'Area',                'To- Hit': '6',      'Dam': '2D (1/0)',           'DP': '2',  'Cost': '5500',   'Weight': '350',  'Space': '2',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '5500',   'Loaded Weight': '350',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Medium Laser',                      'Drop-Down Name': 'Medium Laser - Infared',                            'Ammo Type': 'Infared',                     'Abbv': 'IR-ML',                       'Effect': 'Area',                'To- Hit': '6',      'Dam': '2D* (1/0)',          'DP': '2',  'Cost': '11000',  'Weight': '350',  'Space': '2',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '11000',  'Loaded Weight': '350',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Medium Laser',                      'Drop-Down Name': 'Medium Laser - Blue-Green',                         'Ammo Type': 'Blue-Green',                  'Abbv': 'BG-ML',                       'Effect': 'Area',                'To- Hit': '6',      'Dam': '2D (1/0)',           'DP': '2',  'Cost': '6875',   'Weight': '350',  'Space': '2',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '6875',   'Loaded Weight': '350',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Medium Laser',                      'Drop-Down Name': 'Medium Laser - Pulse',                              'Ammo Type': 'Pulse',                       'Abbv': 'Pulse-ML',                    'Effect': 'Area',                'To- Hit': '6',      'Dam': '2D+2 (1/0)',         'DP': '2',  'Cost': '8250',   'Weight': '350',  'Space': '2',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '8250',   'Loaded Weight': '350',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Laser',                             'Drop-Down Name': 'Laser',                                             'Ammo Type': 'Normal',                      'Abbv': 'L',                           'Effect': 'Area',                'To- Hit': '6',      'Dam': '3D (1/0)',           'DP': '2',  'Cost': '8000',   'Weight': '500',  'Space': '2',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '8000',   'Loaded Weight': '500',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Laser',                             'Drop-Down Name': 'Laser - Infared',                                   'Ammo Type': 'Infared',                     'Abbv': 'IR-L',                        'Effect': 'Area',                'To- Hit': '6',      'Dam': '3D* (1/0)',          'DP': '2',  'Cost': '16000',  'Weight': '500',  'Space': '2',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '16000',  'Loaded Weight': '500',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Laser',                             'Drop-Down Name': 'Laser - Blue-Green',                                'Ammo Type': 'Blue-Green',                  'Abbv': 'BG-L',                        'Effect': 'Area',                'To- Hit': '6',      'Dam': '3D (1/0)',           'DP': '2',  'Cost': '10000',  'Weight': '500',  'Space': '2',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '10000',  'Loaded Weight': '500',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Laser',                             'Drop-Down Name': 'Laser - Pulse',                                     'Ammo Type': 'Pulse',                       'Abbv': 'Pulse-L',                     'Effect': 'Area',                'To- Hit': '6',      'Dam': '3D+3 (1/0)',         'DP': '2',  'Cost': '12000',  'Weight': '500',  'Space': '2',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '12000',  'Loaded Weight': '500',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Twin Laser',                        'Drop-Down Name': 'Twin Laser',                                        'Ammo Type': 'Normal',                      'Abbv': 'TwL',                         'Effect': 'Area',                'To- Hit': '6',      'Dam': '2D+6 (1/0)',         'DP': '3',  'Cost': '10000',  'Weight': '750',  'Space': '2',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '10000',  'Loaded Weight': '750',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Twin Laser',                        'Drop-Down Name': 'Twin Laser - Infared',                              'Ammo Type': 'Infared',                     'Abbv': 'IR-TwL',                      'Effect': 'Area',                'To- Hit': '6',      'Dam': '2D+6* (1/0)',        'DP': '3',  'Cost': '20000',  'Weight': '750',  'Space': '2',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '20000',  'Loaded Weight': '750',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Twin Laser',                        'Drop-Down Name': 'Twin Laser - Blue-Green',                           'Ammo Type': 'Blue-Green',                  'Abbv': 'BG-TwL',                      'Effect': 'Area',                'To- Hit': '6',      'Dam': '2D+6 (1/0)',         'DP': '3',  'Cost': '12500',  'Weight': '750',  'Space': '2',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '12500',  'Loaded Weight': '750',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Twin Laser',                        'Drop-Down Name': 'Twin Laser - Pulse',                                'Ammo Type': 'Pulse',                       'Abbv': 'Pulse-TwL',                   'Effect': 'Area',                'To- Hit': '6',      'Dam': '2D+8 (1/0)',         'DP': '3',  'Cost': '15000',  'Weight': '750',  'Space': '2',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '15000',  'Loaded Weight': '750',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Heavy Laser',                       'Drop-Down Name': 'Heavy Laser',                                       'Ammo Type': 'Normal',                      'Abbv': 'HL',                          'Effect': 'Area',                'To- Hit': '6',      'Dam': '4D (2/0)',           'DP': '2',  'Cost': '12000',  'Weight': '1000', 'Space': '3',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '12000',  'Loaded Weight': '1000', 'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Heavy Laser',                       'Drop-Down Name': 'Heavy Laser - Infared',                             'Ammo Type': 'Infared',                     'Abbv': 'IR-HL',                       'Effect': 'Area',                'To- Hit': '6',      'Dam': '4D* (2/0)',          'DP': '2',  'Cost': '24000',  'Weight': '1000', 'Space': '3',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '24000',  'Loaded Weight': '1000', 'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Heavy Laser',                       'Drop-Down Name': 'Heavy Laser - Blue-Green',                          'Ammo Type': 'Blue-Green',                  'Abbv': 'BG-HL',                       'Effect': 'Area',                'To- Hit': '6',      'Dam': '4D* (2/0)',          'DP': '2',  'Cost': '15000',  'Weight': '1000', 'Space': '3',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '15000',  'Loaded Weight': '1000', 'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Heavy Laser',                       'Drop-Down Name': 'Heavy Laser - Pulse',                               'Ammo Type': 'Pulse',                       'Abbv': 'Pulse-HL',                    'Effect': 'Area',                'To- Hit': '6',      'Dam': '4D+4 (2/0)',         'DP': '2',  'Cost': '18000',  'Weight': '1000', 'Space': '3',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '18000',  'Loaded Weight': '1000', 'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'X-Ray Laser',                       'Drop-Down Name': 'X-Ray Laser',                                       'Ammo Type': 'Normal',                      'Abbv': 'XL',                          'Effect': 'Area',                'To- Hit': '7',      'Dam': '4D',                 'DP': '3',  'Cost': '15000',  'Weight': '750',  'Space': '3',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '15000',  'Loaded Weight': '750',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'X-Ray Laser',                       'Drop-Down Name': 'X-Ray Laser - Pulse',                               'Ammo Type': 'Pulse',                       'Abbv': 'Pulse-XL',                    'Effect': 'Area',                'To- Hit': '7',      'Dam': '4D+4',               'DP': '3',  'Cost': '22500',  'Weight': '750',  'Space': '3',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '22500',  'Loaded Weight': '750',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Heavy X-Ray Laser',                 'Drop-Down Name': 'Heavy X-Ray Laser',                                 'Ammo Type': 'Normal',                      'Abbv': 'HXL',                         'Effect': 'Area',                'To- Hit': '7',      'Dam': '5D',                 'DP': '3',  'Cost': '20000',  'Weight': '1500', 'Space': '5',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '20000',  'Loaded Weight': '1500', 'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Heavy X-Ray Laser',                 'Drop-Down Name': 'Heavy X-Ray Laser - Pulse',                         'Ammo Type': 'Pulse',                       'Abbv': 'Pulse-HXL',                   'Effect': 'Area',                'To- Hit': '7',      'Dam': '5D+5',               'DP': '3',  'Cost': '30000',  'Weight': '1500', 'Space': '5',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '30000',  'Loaded Weight': '1500', 'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Sonic Cannon',                      'Drop-Down Name': 'Sonic Cannon - Light',                              'Ammo Type': 'Light',                       'Abbv': 'LSC',                         'Effect': 'Area',                'To- Hit': '6',      'Dam': '1D',                 'DP': '2',  'Cost': '3500',   'Weight': '450',  'Space': '1',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '3500',   'Loaded Weight': '450',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Sonic Cannon',                      'Drop-Down Name': 'Sonic Cannon',                                      'Ammo Type': 'Normal',                      'Abbv': 'SC',                          'Effect': 'Area',                'To- Hit': '6',      'Dam': '2D',                 'DP': '3',  'Cost': '6100',   'Weight': '800',  'Space': '3',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '6100',   'Loaded Weight': '800',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Sonic Cannon',                      'Drop-Down Name': 'Sonic Cannon - Heavy',                              'Ammo Type': 'Heavy',                       'Abbv': 'HSC',                         'Effect': 'Area',                'To- Hit': '6',      'Dam': '3D',                 'DP': '4',  'Cost': '9600',   'Weight': '1100', 'Space': '5',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '9600',   'Loaded Weight': '1100', 'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Sonic Cannon',                     'Drop-Down Name': '*Sonic Cannon - Military',                          'Ammo Type': 'Military',                    'Abbv': 'MSC',                         'Effect': 'Area',                'To- Hit': '6',      'Dam': '6D',                 'DP': '6',  'Cost': '22000',  'Weight': '2000', 'Space': '8',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '22000',  'Loaded Weight': '2000', 'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Tight Beam Sonic Cannon',           'Drop-Down Name': 'Tight Beam Sonic Cannon - Light',                   'Ammo Type': 'Light',                       'Abbv': 'TBMLSC',                      'Effect': 'Area',                'To- Hit': '6',      'Dam': '1D',                 'DP': '2',  'Cost': '7000',   'Weight': '450',  'Space': '1',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '3500',   'Loaded Weight': '450',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Tight Beam Sonic Cannon',           'Drop-Down Name': 'Tight Beam Sonic Cannon',                           'Ammo Type': 'Normal',                      'Abbv': 'TBMSC',                       'Effect': 'Area',                'To- Hit': '6',      'Dam': '2D',                 'DP': '3',  'Cost': '12200',  'Weight': '800',  'Space': '3',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '6100',   'Loaded Weight': '800',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Tight Beam Sonic Cannon',           'Drop-Down Name': 'Tight Beam Sonic Cannon - Heavy',                   'Ammo Type': 'Heavy',                       'Abbv': 'TBMHSC',                      'Effect': 'Area',                'To- Hit': '6',      'Dam': '3D',                 'DP': '4',  'Cost': '19200',  'Weight': '1100', 'Space': '5',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '9600',   'Loaded Weight': '1100', 'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Tight Beam Sonic Cannon',          'Drop-Down Name': '*Tight Beam Sonic Cannon - Military',               'Ammo Type': 'Military',                    'Abbv': 'TBMMSC',                      'Effect': 'Area',                'To- Hit': '6',      'Dam': '6D',                 'DP': '6',  'Cost': '44000',  'Weight': '2000', 'Space': '8',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '22000',  'Loaded Weight': '2000', 'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_energy_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '',                                  'Drop-Down Name': 'FLAMETHROWERS',                                     'Ammo Type': '',                            'Abbv': '',                            'Effect': '',                    'To- Hit': '',       'Dam': '',                   'DP': '',   'Cost': '',       'Weight': '',     'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_flamethrower_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Light Flamethrower',                'Drop-Down Name': 'Light Flamethrower',                                'Ammo Type': 'Normal',                      'Abbv': 'LFT',                         'Effect': 'Area;Max 5',          'To- Hit': '6',      'Dam': '1D-2 (2/3)',         'DP': '1',  'Cost': '350',    'Weight': '250',  'Space': '1',            'Shots': '10', 'Shot Cost': '15',    'Shot Weight': '3'     ,'Loaded Cost': '500',    'Loaded Weight': '280',  'Mag Cost': '200',   'Mag Weight': '45'}
        self.weapons_flamethrower_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Light Flamethrower',                'Drop-Down Name': 'Light Flamethrower - High-Temp',                    'Ammo Type': 'High-Temp',                   'Abbv': 'LFT w/Hi-Temp',               'Effect': 'Area;Max 5',          'To- Hit': '6',      'Dam': '1D (3/1)',           'DP': '1',  'Cost': '350',    'Weight': '250',  'Space': '1',            'Shots': '10', 'Shot Cost': '60',    'Shot Weight': '4.5'   ,'Loaded Cost': '950',    'Loaded Weight': '295',  'Mag Cost': '500',   'Mag Weight': '60'}
        self.weapons_flamethrower_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Flamethrower',                      'Drop-Down Name': 'Flamethrower',                                      'Ammo Type': 'Normal',                      'Abbv': 'FT',                          'Effect': 'Area;Max 10',         'To- Hit': '6',      'Dam': '1D (4/3)',           'DP': '2',  'Cost': '500',    'Weight': '450',  'Space': '2',            'Shots': '10', 'Shot Cost': '25',    'Shot Weight': '5'     ,'Loaded Cost': '750',    'Loaded Weight': '500',  'Mag Cost': '300',   'Mag Weight': '65'}
        self.weapons_flamethrower_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Flamethrower',                      'Drop-Down Name': 'Flamethrower - High-Temp',                          'Ammo Type': 'High-Temp',                   'Abbv': 'FT w/Hi-Temp',                'Effect': 'Area;Max 10',         'To- Hit': '6',      'Dam': '1D+2 (5/1)',         'DP': '2',  'Cost': '500',    'Weight': '450',  'Space': '2',            'Shots': '10', 'Shot Cost': '100',   'Shot Weight': '7.5'   ,'Loaded Cost': '1500',   'Loaded Weight': '525',  'Mag Cost': '550',   'Mag Weight': '90'}
        self.weapons_flamethrower_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'HD Flamethrower',                   'Drop-Down Name': 'HD Flamethrower',                                   'Ammo Type': 'Normal',                      'Abbv': 'HDFT',                        'Effect': 'Area;Mac 15',         'To- Hit': '6',      'Dam': '2D (5/3)',           'DP': '3',  'Cost': '1250',   'Weight': '650',  'Space': '3',            'Shots': '10', 'Shot Cost': '50',    'Shot Weight': '10'    ,'Loaded Cost': '1750',   'Loaded Weight': '750',  'Mag Cost': '550',   'Mag Weight': '115'}
        self.weapons_flamethrower_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'HD Flamethrower',                   'Drop-Down Name': 'HD Flamethrower - High-Temp',                       'Ammo Type': 'High-Temp',                   'Abbv': 'HDFT w/Hi-Temp',              'Effect': 'Area;Mac 15',         'To- Hit': '6',      'Dam': '2D+4 (6/1)',         'DP': '3',  'Cost': '1250',   'Weight': '650',  'Space': '3',            'Shots': '10', 'Shot Cost': '200',   'Shot Weight': '15'    ,'Loaded Cost': '3250',   'Loaded Weight': '800',  'Mag Cost': '2050',  'Mag Weight': '165'}
        self.weapons_flamethrower_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Military Flamethrower',            'Drop-Down Name': '*Military Flamethrower',                            'Ammo Type': 'Normal',                      'Abbv': 'MFT',                         'Effect': 'Area;Mac 30',         'To- Hit': '6',      'Dam': '3D',                 'DP': '5',  'Cost': '2000',   'Weight': '1000', 'Space': '5',            'Shots': '10', 'Shot Cost': '100',   'Shot Weight': '15'    ,'Loaded Cost': '3000',   'Loaded Weight': '1150', 'Mag Cost': '1050',  'Mag Weight': '165'}
        self.weapons_flamethrower_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Military Flamethrower',            'Drop-Down Name': '*Military Flamethrower - High-Temp',                'Ammo Type': 'High-Temp',                   'Abbv': 'MFT w/Hi-Temp',               'Effect': 'Area;Mac 30',         'To- Hit': '6',      'Dam': '3D+6',               'DP': '5',  'Cost': '2000',   'Weight': '1000', 'Space': '5',            'Shots': '10', 'Shot Cost': '400',   'Shot Weight': '22.5'  ,'Loaded Cost': '6000',   'Loaded Weight': '1225', 'Mag Cost': '4050',  'Mag Weight': '240'}
        self.weapons_flamethrower_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '',                                  'Drop-Down Name': 'DROPPED GASSES',                                    'Ammo Type': '',                            'Abbv': '',                            'Effect': '',                    'To- Hit': '',       'Dam': '',                   'DP': '',   'Cost': '',       'Weight': '',     'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_dropped_gas_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'SmokeScreen',                       'Drop-Down Name': 'SmokeScreen',                                       'Ammo Type': 'Normal',                      'Abbv': 'SS',                          'Effect': '1/2 inchx1',          'To- Hit': '0',      'Dam': '0',                  'DP': '4',  'Cost': '250',    'Weight': '25',   'Space': '1',            'Shots': '10', 'Shot Cost': '10',    'Shot Weight': '5'     ,'Loaded Cost': '350',    'Loaded Weight': '75',   'Mag Cost': '150',   'Mag Weight': '65'}
        self.weapons_dropped_gas_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'SmokeScreen',                       'Drop-Down Name': 'SmokeScreen - HotSmoke',                            'Ammo Type': 'HotSmoke',                    'Abbv': 'SSw/HotSmoke',                'Effect': '1/2 inchx1',          'To- Hit': '0',      'Dam': '0',                  'DP': '4',  'Cost': '250',    'Weight': '25',   'Space': '1',            'Shots': '10', 'Shot Cost': '15',    'Shot Weight': '5'     ,'Loaded Cost': '400',    'Loaded Weight': '75',   'Mag Cost': '200',   'Mag Weight': '65'}
        self.weapons_dropped_gas_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'SmokeScreen',                       'Drop-Down Name': 'SmokeScreen - Tear Gas',                            'Ammo Type': 'Tear Gas',                    'Abbv': 'SS w/Tear Gas',               'Effect': '1/2 inchx1',          'To- Hit': '0',      'Dam': '*',                  'DP': '4',  'Cost': '250',    'Weight': '25',   'Space': '1',            'Shots': '10', 'Shot Cost': '20',    'Shot Weight': '5'     ,'Loaded Cost': '450',    'Loaded Weight': '75',   'Mag Cost': '250',   'Mag Weight': '65'}
        self.weapons_dropped_gas_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Paint Spray',                       'Drop-Down Name': 'Paint Spray',                                       'Ammo Type': 'Normal',                      'Abbv': 'PS',                          'Effect': '1/2 inchx1',          'To- Hit': '0',      'Dam': '0',                  'DP': '2',  'Cost': '400',    'Weight': '25',   'Space': '1',            'Shots': '25', 'Shot Cost': '10',    'Shot Weight': '2'     ,'Loaded Cost': '650',    'Loaded Weight': '75',   'Mag Cost': '300',   'Mag Weight': '65'}
        self.weapons_dropped_gas_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Paint Spray',                       'Drop-Down Name': 'Paint Spray - StickyFoam Neutralizer',              'Ammo Type': 'StickyFoam Neutralizer',      'Abbv': 'PS, SF Neut.',                'Effect': '1/2 inchx1',          'To- Hit': '0',      'Dam': '0',                  'DP': '2',  'Cost': '400',    'Weight': '25',   'Space': '1',            'Shots': '25', 'Shot Cost': '50',    'Shot Weight': '2'     ,'Loaded Cost': '1650',   'Loaded Weight': '75',   'Mag Cost': '1250',  'Mag Weight': '65'}
        self.weapons_dropped_gas_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Gas Streamer',                      'Drop-Down Name': 'Gas Streamer - Smoke',                              'Ammo Type': 'Smoke',                       'Abbv': 'GS W/Smoke',                  'Effect': '1/2 inchx5',          'To- Hit': '0',      'Dam': '0',                  'DP': '1',  'Cost': '100',    'Weight': '50',   'Space': '1',            'Shots': '2',  'Shot Cost': '50',    'Shot Weight': '25'    ,'Loaded Cost': '200',    'Loaded Weight': '100',  'Mag Cost': '150',   'Mag Weight': '65'}
        self.weapons_dropped_gas_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Gas Streamer',                      'Drop-Down Name': 'Gas Streamer - Hot Smoke',                          'Ammo Type': 'Hot Smoke',                   'Abbv': 'GS W/Hot Smoke',              'Effect': '1/2 inchx5',          'To- Hit': '0',      'Dam': '0',                  'DP': '1',  'Cost': '100',    'Weight': '50',   'Space': '1',            'Shots': '2',  'Shot Cost': '75',    'Shot Weight': '25'    ,'Loaded Cost': '250',    'Loaded Weight': '100',  'Mag Cost': '200',   'Mag Weight': '65'}
        self.weapons_dropped_gas_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Gas Streamer',                      'Drop-Down Name': 'Gas Streamer - Paint',                              'Ammo Type': 'Paint',                       'Abbv': 'GS w/Paint',                  'Effect': '1/2 inchx5',          'To- Hit': '0',      'Dam': '0',                  'DP': '1',  'Cost': '100',    'Weight': '50',   'Space': '1',            'Shots': '2',  'Shot Cost': '50',    'Shot Weight': '10'    ,'Loaded Cost': '200',    'Loaded Weight': '70',   'Mag Cost': '150',   'Mag Weight': '35'}
        self.weapons_dropped_gas_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Gas Streamer',                      'Drop-Down Name': 'Gas Streamer - StickyFoam Neutralizer',             'Ammo Type': 'StickyFoam Neutralizer',      'Abbv': 'GS w/SF Neut.',               'Effect': '1/2 inchx5',          'To- Hit': '0',      'Dam': '0',                  'DP': '1',  'Cost': '100',    'Weight': '50',   'Space': '1',            'Shots': '2',  'Shot Cost': '250',   'Shot Weight': '10'    ,'Loaded Cost': '600',    'Loaded Weight': '70',   'Mag Cost': '650',   'Mag Weight': '35'}
        self.weapons_dropped_gas_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Gas Streamer',                      'Drop-Down Name': 'Gas Streamer - Tear Gas',                           'Ammo Type': 'Tear Gas',                    'Abbv': 'GS w/Tear Gas',               'Effect': '1/2 inchx5',          'To- Hit': '0',      'Dam': '*',                  'DP': '1',  'Cost': '100',    'Weight': '50',   'Space': '1',            'Shots': '2',  'Shot Cost': '100',   'Shot Weight': '25'    ,'Loaded Cost': '300',    'Loaded Weight': '100',  'Mag Cost': '250',   'Mag Weight': '65'}
        self.weapons_dropped_gas_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Gas Streamer',                     'Drop-Down Name': '*Gas Streamer - Toxin Gas',                         'Ammo Type': 'Toxin Gas',                   'Abbv': 'GS w/Toxin Gas',              'Effect': '1/2 inchx5',          'To- Hit': '0',      'Dam': '*',                  'DP': '1',  'Cost': '100',    'Weight': '50',   'Space': '1',            'Shots': '2',  'Shot Cost': '10000', 'Shot Weight': '25'    ,'Loaded Cost': '20100',  'Loaded Weight': '100',  'Mag Cost': '20050', 'Mag Weight': '65'}
        self.weapons_dropped_gas_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Flame Cloud Ejector',               'Drop-Down Name': 'Flame Cloud Ejector',                               'Ammo Type': 'Normal',                      'Abbv': 'FCE',                         'Effect': '1/2 inchx1',          'To- Hit': '0',      'Dam': '1D-1 (3/1)',         'DP': '1',  'Cost': '500',    'Weight': '50',   'Space': '2',            'Shots': '10', 'Shot Cost': '60',    'Shot Weight': '5'     ,'Loaded Cost': '1100',   'Loaded Weight': '100',  'Mag Cost': '650',   'Mag Weight': '65'}
        self.weapons_dropped_gas_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Flame Cloud Streamer',              'Drop-Down Name': 'Flame Cloud Streamer',                              'Ammo Type': 'Normal',                      'Abbv': 'FCGS',                        'Effect': '1/2 inchx5',          'To- Hit': '0',      'Dam': '1D-1 (3/1)',         'DP': '1',  'Cost': '200',    'Weight': '100',  'Space': '2',            'Shots': '2',  'Shot Cost': '300',   'Shot Weight': '25'    ,'Loaded Cost': '800',    'Loaded Weight': '150',  'Mag Cost': '650',   'Mag Weight': '65'}
        self.weapons_dropped_gas_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Cloud Bomb',                        'Drop-Down Name': 'Cloud Bomb',                                        'Ammo Type': 'Normal',                      'Abbv': 'CBSS',                        'Effect': '2 inch Radius',       'To- Hit': '6',      'Dam': '*',                  'DP': '1',  'Cost': '1000',   'Weight': '100',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '1000',   'Loaded Weight': '100',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_dropped_gas_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Toxin Gas',                        'Drop-Down Name': '*Toxin Gas',                                        'Ammo Type': 'Normal',                      'Abbv': 'TXG',                         'Effect': '1/2 inchx1',          'To- Hit': '0',      'Dam': '*',                  'DP': '3',  'Cost': '500',    'Weight': '25',   'Space': '1',            'Shots': '10', 'Shot Cost': '2000',  'Shot Weight': '5'     ,'Loaded Cost': '20500',  'Loaded Weight': '75',   'Mag Cost': '20050', 'Mag Weight': '65'}
        self.weapons_dropped_gas_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Toxic Gas',                        'Drop-Down Name': '*Toxic Gas - Super Acid',                           'Ammo Type': 'Super Acid',                  'Abbv': 'TXG',                         'Effect': '1/2 inchx1',          'To- Hit': '0',      'Dam': '*',                  'DP': '3',  'Cost': '500',    'Weight': '25',   'Space': '1',            'Shots': '10', 'Shot Cost': '2000',  'Shot Weight': '5'     ,'Loaded Cost': '20500',  'Loaded Weight': '75',   'Mag Cost': '20500', 'Mag Weight': '65'}
        self.weapons_dropped_gas_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'HD Smokescreen',                    'Drop-Down Name': 'HD Smokescreen',                                    'Ammo Type': 'Normal',                      'Abbv': 'HDSS',                        'Effect': '1x2',                 'To- Hit': '0',      'Dam': '0',                  'DP': '4',  'Cost': '500',    'Weight': '50',   'Space': '2',            'Shots': '10', 'Shot Cost': '40',    'Shot Weight': '20'    ,'Loaded Cost': '900',    'Loaded Weight': '250',  'Mag Cost': '450',   'Mag Weight': '215'}
        self.weapons_dropped_gas_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'HD Smokescreen',                    'Drop-Down Name': 'HD Smokescreen - Hot Smoke',                        'Ammo Type': 'Hot Smoke',                   'Abbv': 'HDSS w/ Hot',                 'Effect': '1x2',                 'To- Hit': '0',      'Dam': '0',                  'DP': '4',  'Cost': '500',    'Weight': '50',   'Space': '2',            'Shots': '10', 'Shot Cost': '60',    'Shot Weight': '20'    ,'Loaded Cost': '1100',   'Loaded Weight': '250',  'Mag Cost': '650',   'Mag Weight': '215'}
        self.weapons_dropped_gas_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'HD Smokescreen',                    'Drop-Down Name': 'HD Smokescreen - Tear Gas',                         'Ammo Type': 'Tear Gas',                    'Abbv': 'HDSS w/Tear Gas',             'Effect': '1x2',                 'To- Hit': '0',      'Dam': '*',                  'DP': '4',  'Cost': '500',    'Weight': '50',   'Space': '2',            'Shots': '10', 'Shot Cost': '80',    'Shot Weight': '20'    ,'Loaded Cost': '1300',   'Loaded Weight': '250',  'Mag Cost': '850',   'Mag Weight': '215'}
        self.weapons_dropped_gas_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'HD Paint Spray',                    'Drop-Down Name': 'HD Paint Spray',                                    'Ammo Type': 'Normal',                      'Abbv': 'HDPS',                        'Effect': '1x2',                 'To- Hit': '0',      'Dam': '0',                  'DP': '3',  'Cost': '800',    'Weight': '50',   'Space': '2',            'Shots': '10', 'Shot Cost': '40',    'Shot Weight': '8'     ,'Loaded Cost': '1200',   'Loaded Weight': '130',  'Mag Cost': '450',   'Mag Weight': '95'}
        self.weapons_dropped_gas_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'HD Paint Spray',                    'Drop-Down Name': 'HD Paint Spray - StickyFoam Neutralizer',           'Ammo Type': 'StickyFoam Neutralizer',      'Abbv': 'HDPS w/SF Neut',              'Effect': '1x2',                 'To- Hit': '0',      'Dam': '0',                  'DP': '3',  'Cost': '800',    'Weight': '50',   'Space': '2',            'Shots': '10', 'Shot Cost': '200',   'Shot Weight': '8'     ,'Loaded Cost': '2800',   'Loaded Weight': '130',  'Mag Cost': '2050',  'Mag Weight': '95'}
        self.weapons_dropped_gas_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'HD Flame Cloud Ejector',            'Drop-Down Name': 'HD Flame Cloud Ejector',                            'Ammo Type': 'Normal',                      'Abbv': 'HDFCE',                       'Effect': '1x2',                 'To- Hit': '0',      'Dam': '1D-1 (3/1)',         'DP': '2',  'Cost': '1000',   'Weight': '100',  'Space': '3',            'Shots': '10', 'Shot Cost': '240',   'Shot Weight': '20'    ,'Loaded Cost': '3400',   'Loaded Weight': '300',  'Mag Cost': '2450',  'Mag Weight': '215'}
        self.weapons_dropped_gas_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*HD Toxin Gas Ejector',             'Drop-Down Name': '*HD Toxin Gas Ejector',                             'Ammo Type': 'Normal',                      'Abbv': 'HDTXG',                       'Effect': '1x2',                 'To- Hit': '0',      'Dam': '*',                  'DP': '3',  'Cost': '1000',   'Weight': '50',   'Space': '2',            'Shots': '10', 'Shot Cost': '8000',  'Shot Weight': '20'    ,'Loaded Cost': '81000',  'Loaded Weight': '250',  'Mag Cost': '80050', 'Mag Weight': '215'}
        self.weapons_dropped_gas_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*HD Toxin Gas Ejector',             'Drop-Down Name': '*HD Toxin Gas Ejector - Super Acid',                'Ammo Type': 'Super Acid',                  'Abbv': 'HDTXG',                       'Effect': '1x2',                 'To- Hit': '0',      'Dam': '*',                  'DP': '3',  'Cost': '1000',   'Weight': '50',   'Space': '2',            'Shots': '10', 'Shot Cost': '8000',  'Shot Weight': '20'    ,'Loaded Cost': '81000',  'Loaded Weight': '250',  'Mag Cost': '80050', 'Mag Weight': '215'}
        self.weapons_dropped_gas_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '',                                  'Drop-Down Name': 'DROPPED LIQUIDS',                                   'Ammo Type': '',                            'Abbv': '',                            'Effect': '',                    'To- Hit': '',       'Dam': '',                   'DP': '',   'Cost': '',       'Weight': '',     'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_dropped_liquid_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'StickyFoam Sprayer',                'Drop-Down Name': 'StickyFoam Sprayer',                                'Ammo Type': 'Normal',                      'Abbv': 'SfS',                         'Effect': '1x1/2 inch',          'To- Hit': '0',      'Dam': '*',                  'DP': '3',  'Cost': '750',    'Weight': '25',   'Space': '2',            'Shots': '25', 'Shot Cost': '30',    'Shot Weight': '2'     ,'Loaded Cost': '1500',   'Loaded Weight': '75',   'Mag Cost': '350',   'Mag Weight': '65'}
        self.weapons_dropped_liquid_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Oil Jet',                           'Drop-Down Name': 'Oil Jet',                                           'Ammo Type': 'Normal',                      'Abbv': 'OJ',                          'Effect': '1/2 inchx1',          'To- Hit': '0',      'Dam': '0',                  'DP': '3',  'Cost': '250',    'Weight': '25',   'Space': '2',            'Shots': '25', 'Shot Cost': '10',    'Shot Weight': '2'     ,'Loaded Cost': '500',    'Loaded Weight': '75',   'Mag Cost': '300',   'Mag Weight': '65'}
        self.weapons_dropped_liquid_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Oil Jet',                           'Drop-Down Name': 'Oil Jet - Pyrophoric',                              'Ammo Type': 'Pyrophoric',                  'Abbv': 'POJ',                         'Effect': '1/2 inchx1',          'To- Hit': '0',      'Dam': '1D-2 (3/2)',         'DP': '3',  'Cost': '250',    'Weight': '25',   'Space': '2',            'Shots': '25', 'Shot Cost': '50',    'Shot Weight': '2'     ,'Loaded Cost': '1500',   'Loaded Weight': '75',   'Mag Cost': '1300',  'Mag Weight': '65'}
        self.weapons_dropped_liquid_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'HD Oil Jet',                        'Drop-Down Name': 'HD Oil Jet',                                        'Ammo Type': 'Normal',                      'Abbv': 'HDOJ',                        'Effect': '1x2',                 'To- Hit': '0',      'Dam': '0',                  'DP': '4',  'Cost': '500',    'Weight': '50',   'Space': '3',            'Shots': '10', 'Shot Cost': '40',    'Shot Weight': '8'     ,'Loaded Cost': '900',    'Loaded Weight': '130',  'Mag Cost': '450',   'Mag Weight': '95'}
        self.weapons_dropped_liquid_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'HD Oil Jet',                        'Drop-Down Name': 'HD Oil Jet - Pyrophoric',                           'Ammo Type': 'Pyrophoric',                  'Abbv': 'HDPOJ',                       'Effect': '1x2',                 'To- Hit': '0',      'Dam': '1D-2 (3/2)',         'DP': '4',  'Cost': '500',    'Weight': '50',   'Space': '3',            'Shots': '10', 'Shot Cost': '200',   'Shot Weight': '8'     ,'Loaded Cost': '2500',   'Loaded Weight': '130',  'Mag Cost': '2050',  'Mag Weight': '95'}
        self.weapons_dropped_liquid_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Flaming Oil Jet',                   'Drop-Down Name': 'Flaming Oil Jet',                                   'Ammo Type': 'Normal',                      'Abbv': 'FOJ',                         'Effect': '1/2 inchx1',          'To- Hit': '0',      'Dam': '1D-2 (3/2)',         'DP': '3',  'Cost': '300',    'Weight': '30',   'Space': '2',            'Shots': '25', 'Shot Cost': '35',    'Shot Weight': '2'     ,'Loaded Cost': '1175',   'Loaded Weight': '80',   'Mag Cost': '925',   'Mag Weight': '65'}
        self.weapons_dropped_liquid_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Flaming Oil Jet',                   'Drop-Down Name': 'Flaming Oil Jet - High-Temp Fuel',                  'Ammo Type': 'High-Temp Fuel',              'Abbv': 'FOJ-HT',                      'Effect': '1/2 inchx1',          'To- Hit': '0',      'Dam': '1d (4/1)',           'DP': '3',  'Cost': '300',    'Weight': '30',   'Space': '2',            'Shots': '25', 'Shot Cost': '140',   'Shot Weight': '3'     ,'Loaded Cost': '3800',   'Loaded Weight': '105',  'Mag Cost': '3550',  'Mag Weight': '90'}
        self.weapons_dropped_liquid_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'HD Flaming Oil Jet',                'Drop-Down Name': 'HD Flaming Oil Jet',                                'Ammo Type': 'Normal',                      'Abbv': 'HDFOJ',                       'Effect': '1x2',                 'To- Hit': '0',      'Dam': '1D-2 (3/2)',         'DP': '4',  'Cost': '550',    'Weight': '60',   'Space': '3',            'Shots': '10', 'Shot Cost': '140',   'Shot Weight': '8'     ,'Loaded Cost': '1950',   'Loaded Weight': '140',  'Mag Cost': '1450',  'Mag Weight': '95'}
        self.weapons_dropped_liquid_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'HD Flaming Oil Jet',                'Drop-Down Name': 'HD Flaming Oil Jet - High-Temp Fuel',               'Ammo Type': 'High-Temp Fuel',              'Abbv': 'HDFOJ-HT',                    'Effect': '1x2',                 'To- Hit': '0',      'Dam': '1D (4/1)',           'DP': '4',  'Cost': '550',    'Weight': '60',   'Space': '3',            'Shots': '10', 'Shot Cost': '560',   'Shot Weight': '12'    ,'Loaded Cost': '6150',   'Loaded Weight': '180',  'Mag Cost': '5650',  'Mag Weight': '135'}
        self.weapons_dropped_liquid_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Ice Dropper',                       'Drop-Down Name': 'Ice Dropper',                                       'Ammo Type': 'Normal',                      'Abbv': 'ID',                          'Effect': '1/2 inchx1',          'To- Hit': '0',      'Dam': '0',                  'DP': '3',  'Cost': '750',    'Weight': '50',   'Space': '2',            'Shots': '25', 'Shot Cost': '20',    'Shot Weight': '2'     ,'Loaded Cost': '1250',   'Loaded Weight': '100',  'Mag Cost': '550',   'Mag Weight': '65'}
        self.weapons_dropped_liquid_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Heavy Duty Ice Dropper',            'Drop-Down Name': 'Heavy Duty Ice Dropper',                            'Ammo Type': 'Normal',                      'Abbv': 'HDID',                        'Effect': '1x2',                 'To- Hit': '0',      'Dam': '0',                  'DP': '4',  'Cost': '1000',   'Weight': '100',  'Space': '3',            'Shots': '10', 'Shot Cost': '100',   'Shot Weight': '10'    ,'Loaded Cost': '2000',   'Loaded Weight': '200',  'Mag Cost': '1050',  'Mag Weight': '115'}
        self.weapons_dropped_liquid_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '',                                  'Drop-Down Name': 'DROPPED SOLIDS',                                    'Ammo Type': '',                            'Abbv': '',                            'Effect': '',                    'To- Hit': '',       'Dam': '',                   'DP': '',   'Cost': '',       'Weight': '',     'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_dropped_solid_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Chaff Dispenser',                   'Drop-Down Name': 'Chaff Dispenser',                                   'Ammo Type': 'Normal',                      'Abbv': 'CD',                          'Effect': '1/2 inchx1',          'To- Hit': '0',      'Dam': '0',                  'DP': '2',  'Cost': '300',    'Weight': '25',   'Space': '1',            'Shots': '10', 'Shot Cost': '10',    'Shot Weight': '2'     ,'Loaded Cost': '400',    'Loaded Weight': '45',   'Mag Cost': '150',   'Mag Weight': '35'}
        self.weapons_dropped_solid_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'HD Chaff Dispenser',                'Drop-Down Name': 'HD Chaff Dispenser',                                'Ammo Type': 'Normal',                      'Abbv': 'HDCD',                        'Effect': '1x2',                 'To- Hit': '0',      'Dam': '0',                  'DP': '2',  'Cost': '600',    'Weight': '50',   'Space': '2',            'Shots': '10', 'Shot Cost': '40',    'Shot Weight': '8'     ,'Loaded Cost': '1000',   'Loaded Weight': '130',  'Mag Cost': '450',   'Mag Weight': '95'}
        self.weapons_dropped_solid_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Depth Charge',                      'Drop-Down Name': 'Depth Charge',                                      'Ammo Type': 'Normal',                      'Abbv': 'DC',                          'Effect': '*',                   'To- Hit': '0',      'Dam': '1D+3*',              'DP': '5',  'Cost': '250',    'Weight': '100',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '250',    'Loaded Weight': '100',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_dropped_solid_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Large Depth Charge',                'Drop-Down Name': 'Large Depth Charge',                                'Ammo Type': 'Normal',                      'Abbv': 'LDC',                         'Effect': '*',                   'To- Hit': '0',      'Dam': '10D*',               'DP': '8',  'Cost': '500',    'Weight': '250',  'Space': '2',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '500',    'Loaded Weight': '250',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_dropped_solid_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Spike Dropper',                     'Drop-Down Name': 'Spike Dropper',                                     'Ammo Type': 'Normal',                      'Abbv': 'SD',                          'Effect': '1/2 inchx1/2 inch',   'To- Hit': '0',      'Dam': '1D',                 'DP': '4',  'Cost': '100',    'Weight': '25',   'Space': '1',            'Shots': '10', 'Shot Cost': '20',    'Shot Weight': '5'     ,'Loaded Cost': '300',    'Loaded Weight': '75',   'Mag Cost': '250',   'Mag Weight': '65'}
        self.weapons_dropped_solid_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Spike Dropper',                     'Drop-Down Name': 'Spike Dropper - Catalytic Spikes',                  'Ammo Type': 'Catalytic Spikes',            'Abbv': 'SD',                          'Effect': '1/2 inchx1/2 inch',   'To- Hit': '0',      'Dam': '1d*',                'DP': '4',  'Cost': '100',    'Weight': '25',   'Space': '1',            'Shots': '10', 'Shot Cost': '60',    'Shot Weight': '5'     ,'Loaded Cost': '700',    'Loaded Weight': '75',   'Mag Cost': '650',   'Mag Weight': '65'}
        self.weapons_dropped_solid_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Spike Dropper',                     'Drop-Down Name': 'Spike Dropper - Crystal Spikes',                    'Ammo Type': 'Crystal Spikes',              'Abbv': 'SD',                          'Effect': '1/2 inchx1/2 inch',   'To- Hit': '0',      'Dam': '1D',                 'DP': '4',  'Cost': '100',    'Weight': '25',   'Space': '1',            'Shots': '10', 'Shot Cost': '30',    'Shot Weight': '4'     ,'Loaded Cost': '400',    'Loaded Weight': '65',   'Mag Cost': '350',   'Mag Weight': '45'}
        self.weapons_dropped_solid_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Spike Dropper',                     'Drop-Down Name': 'Spike Dropper - Explosive Spikes',                  'Ammo Type': 'Explosive Spikes',            'Abbv': 'SD,EXP',                      'Effect': '1/2 inchx1/2 inch',   'To- Hit': '0',      'Dam': '1d+1(1d-1)',         'DP': '4',  'Cost': '100',    'Weight': '25',   'Space': '1',            'Shots': '10', 'Shot Cost': '50',    'Shot Weight': '5'     ,'Loaded Cost': '600',    'Loaded Weight': '75',   'Mag Cost': '550',   'Mag Weight': '65'}
        self.weapons_dropped_solid_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Spike Dropper',                     'Drop-Down Name': 'Spike Dropper - Incendiary Spikes',                 'Ammo Type': 'Incendiary Spikes',           'Abbv': 'SD,INC',                      'Effect': '1/2 inchx1/2 inch',   'To- Hit': '0',      'Dam': '1d-1* (2/2)',        'DP': '4',  'Cost': '100',    'Weight': '25',   'Space': '1',            'Shots': '10', 'Shot Cost': '50',    'Shot Weight': '5'     ,'Loaded Cost': '600',    'Loaded Weight': '75',   'Mag Cost': '550',   'Mag Weight': '65'}
        self.weapons_dropped_solid_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Drop-Spike Plate',                  'Drop-Down Name': 'Drop-Spike Plate',                                  'Ammo Type': 'Normal',                      'Abbv': 'DSP',                         'Effect': '1/2 inchx1/2 inch',   'To- Hit': '0',      'Dam': '2d(1d)',             'DP': '4',  'Cost': '200',    'Weight': '50',   'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '200',    'Loaded Weight': '50',   'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_dropped_solid_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Drop-Spike Plate',                  'Drop-Down Name': 'Drop-Spike Plate - Radio',                          'Ammo Type': 'Radio',                       'Abbv': 'RDSP',                        'Effect': '1/2 inchx1/2 inch',   'To- Hit': '0',      'Dam': '2d(1d)',             'DP': '4',  'Cost': '400',    'Weight': '50',   'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '200',    'Loaded Weight': '50',   'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_dropped_solid_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Large Drop-Spike Plate',            'Drop-Down Name': 'Large Drop-Spike Plate',                            'Ammo Type': 'Normal',                      'Abbv': 'LDSP',                        'Effect': '1/2 inchx1',          'To- Hit': '0',      'Dam': '2d(1d)',             'DP': '6',  'Cost': '350',    'Weight': '100',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '350',    'Loaded Weight': '100',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_dropped_solid_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Large Drop-Spike Plate',            'Drop-Down Name': 'Large Drop-Spike Plate - Radio',                    'Ammo Type': 'Radio',                       'Abbv': 'RLDSP',                       'Effect': '1/2 inchx1',          'To- Hit': '0',      'Dam': '2d(1d)',             'DP': '6',  'Cost': '700',    'Weight': '100',  'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '350',    'Loaded Weight': '100',  'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_dropped_solid_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Fake Drop Spike Plate',             'Drop-Down Name': 'Fake Drop Spike Plate',                             'Ammo Type': 'Normal',                      'Abbv': 'FDSP',                        'Effect': '1/2 inchx1/2 inch',   'To- Hit': '0',      'Dam': '0',                  'DP': '1',  'Cost': '50',     'Weight': '10',   'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '50',     'Loaded Weight': '10',   'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_dropped_solid_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Fake Drop Spike Plate',             'Drop-Down Name': 'Fake Drop Spike Plate - Large',                     'Ammo Type': 'Large',                       'Abbv': 'FLDSP',                       'Effect': '1/2 inchx1',          'To- Hit': '0',      'Dam': '0',                  'DP': '1',  'Cost': '75',     'Weight': '10',   'Space': '1',            'Shots': '1',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '75',     'Loaded Weight': '10',   'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_dropped_solid_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Junk Dropper',                      'Drop-Down Name': 'Junk Dropper',                                      'Ammo Type': 'Normal',                      'Abbv': 'JD',                          'Effect': '1/2 inchx1/2 inch',   'To- Hit': '0',      'Dam': '1d-3',               'DP': '4',  'Cost': '50',     'Weight': '25',   'Space': '1',            'Shots': '10', 'Shot Cost': '0',     'Shot Weight': '10'    ,'Loaded Cost': '50',     'Loaded Weight': '125',  'Mag Cost': '50',    'Mag Weight': '115'}
        self.weapons_dropped_solid_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Junk Dropper',                      'Drop-Down Name': 'Junk Dropper - Sand Ammo',                          'Ammo Type': 'Sand Ammo',                   'Abbv': 'JD-S',                        'Effect': '1/2 inchx1',          'To- Hit': '0',      'Dam': '',                   'DP': '4',  'Cost': '50',     'Weight': '25',   'Space': '1',            'Shots': '10', 'Shot Cost': '0',     'Shot Weight': '10'    ,'Loaded Cost': '50',     'Loaded Weight': '125',  'Mag Cost': '50',    'Mag Weight': '115'}
        self.weapons_dropped_solid_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '',                                  'Drop-Down Name': 'MINEDROPPERS',                                      'Ammo Type': '',                            'Abbv': '',                            'Effect': '',                    'To- Hit': '',       'Dam': '',                   'DP': '',   'Cost': '',       'Weight': '',     'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_minedroppers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Minedropper',                       'Drop-Down Name': 'Minedropper',                                       'Ammo Type': 'Normal',                      'Abbv': 'MD',                          'Effect': '1/2 inchx1/2 inch',   'To- Hit': '0',      'Dam': '1d/2d',              'DP': '2',  'Cost': '500',    'Weight': '150',  'Space': '2',            'Shots': '10', 'Shot Cost': '50',    'Shot Weight': '5'     ,'Loaded Cost': '1000',   'Loaded Weight': '200',  'Mag Cost': '550',   'Mag Weight': '65'}
        self.weapons_minedroppers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Minedropper',                       'Drop-Down Name': 'Minedropper - Anti-Ped',                            'Ammo Type': 'Anti-Ped',                    'Abbv': 'MD, Anti-Ped',                'Effect': '1 inch Radius',       'To- Hit': '0',      'Dam': '2d/1d/0',            'DP': '2',  'Cost': '500',    'Weight': '150',  'Space': '2',            'Shots': '10', 'Shot Cost': '25',    'Shot Weight': '3'     ,'Loaded Cost': '750',    'Loaded Weight': '180',  'Mag Cost': '300',   'Mag Weight': '45'}
        self.weapons_minedroppers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Minedropper',                       'Drop-Down Name': 'Minedropper - Beacon',                              'Ammo Type': 'Beacon',                      'Abbv': 'MD, Beacon',                  'Effect': '1 x 1',               'To- Hit': '0',      'Dam': '0',                  'DP': '2',  'Cost': '500',    'Weight': '150',  'Space': '2',            'Shots': '10', 'Shot Cost': '200',   'Shot Weight': '5'     ,'Loaded Cost': '2500',   'Loaded Weight': '200',  'Mag Cost': '2050',  'Mag Weight': '65'}
        self.weapons_minedroppers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Minedropper',                       'Drop-Down Name': 'Minedropper - Smoke',                               'Ammo Type': 'Smoke',                       'Abbv': 'MD, Smoke',                   'Effect': '1 x 1',               'To- Hit': '0',      'Dam': '0',                  'DP': '2',  'Cost': '500',    'Weight': '150',  'Space': '2',            'Shots': '10', 'Shot Cost': '45',    'Shot Weight': '5'     ,'Loaded Cost': '950',    'Loaded Weight': '200',  'Mag Cost': '500',   'Mag Weight': '65'}
        self.weapons_minedroppers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Minedropper',                       'Drop-Down Name': 'Minedropper - Hot Smoke',                           'Ammo Type': 'Hot Smoke',                   'Abbv': 'MD, Hot Smoke',               'Effect': '1 x 1',               'To- Hit': '0',      'Dam': '0',                  'DP': '2',  'Cost': '500',    'Weight': '150',  'Space': '2',            'Shots': '10', 'Shot Cost': '55',    'Shot Weight': '5'     ,'Loaded Cost': '1050',   'Loaded Weight': '200',  'Mag Cost': '600',   'Mag Weight': '65'}
        self.weapons_minedroppers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Minedropper',                       'Drop-Down Name': 'Minedropper - Paint',                               'Ammo Type': 'Paint',                       'Abbv': 'MD, Paint',                   'Effect': '1 x 1',               'To- Hit': '0',      'Dam': '0',                  'DP': '2',  'Cost': '500',    'Weight': '150',  'Space': '2',            'Shots': '10', 'Shot Cost': '45',    'Shot Weight': '5'     ,'Loaded Cost': '950',    'Loaded Weight': '200',  'Mag Cost': '500',   'Mag Weight': '65'}
        self.weapons_minedroppers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Minedropper',                       'Drop-Down Name': 'Minedropper - Paint, Glow-in-the-dark',             'Ammo Type': 'Paint, Glow-in-the-dark',     'Abbv': 'MD, Paint, Glow-in-the-dark', 'Effect': '1 x 1',               'To- Hit': '0',      'Dam': '0',                  'DP': '2',  'Cost': '500',    'Weight': '150',  'Space': '2',            'Shots': '10', 'Shot Cost': '105',   'Shot Weight': '5'     ,'Loaded Cost': '1550',   'Loaded Weight': '200',  'Mag Cost': '1100',  'Mag Weight': '65'}
        self.weapons_minedroppers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Minedropper',                       'Drop-Down Name': 'Minedropper - Flame Cloud',                         'Ammo Type': 'Flame Cloud',                 'Abbv': 'MD, Flame Cloud',             'Effect': '1 x 1',               'To- Hit': '0',      'Dam': '1d-1 (3/1)',         'DP': '2',  'Cost': '500',    'Weight': '150',  'Space': '2',            'Shots': '10', 'Shot Cost': '145',   'Shot Weight': '5'     ,'Loaded Cost': '1950',   'Loaded Weight': '200',  'Mag Cost': '1500',  'Mag Weight': '65'}
        self.weapons_minedroppers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Minedropper',                       'Drop-Down Name': 'Minedropper - StickyFoam Neutralizer',              'Ammo Type': 'StickyFoam Neutralizer',      'Abbv': 'MD, SF Neut.',                'Effect': '1 x 1',               'To- Hit': '0',      'Dam': '*',                  'DP': '2',  'Cost': '500',    'Weight': '150',  'Space': '2',            'Shots': '10', 'Shot Cost': '250',   'Shot Weight': '5'     ,'Loaded Cost': '3000',   'Loaded Weight': '200',  'Mag Cost': '2550',  'Mag Weight': '65'}
        self.weapons_minedroppers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Minedropper',                       'Drop-Down Name': 'Minedropper - Tear Gas',                            'Ammo Type': 'Tear Gas',                    'Abbv': 'MD, Tear Gas',                'Effect': '1 x 1',               'To- Hit': '0',      'Dam': '0',                  'DP': '2',  'Cost': '500',    'Weight': '150',  'Space': '2',            'Shots': '10', 'Shot Cost': '65',    'Shot Weight': '5'     ,'Loaded Cost': '1150',   'Loaded Weight': '200',  'Mag Cost': '700',   'Mag Weight': '65'}
        self.weapons_minedroppers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Minedropper',                      'Drop-Down Name': '*Minedropper - Toxin Gas',                          'Ammo Type': 'Toxin Gas',                   'Abbv': 'MD, Toxin Gas',               'Effect': '1 x 1',               'To- Hit': '0',      'Dam': '0',                  'DP': '2',  'Cost': '500',    'Weight': '150',  'Space': '2',            'Shots': '10', 'Shot Cost': '4025',  'Shot Weight': '5'     ,'Loaded Cost': '40750',  'Loaded Weight': '200',  'Mag Cost': '40300', 'Mag Weight': '65'}
        self.weapons_minedroppers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Minedropper',                       'Drop-Down Name': 'Minedropper - Fake Mines',                          'Ammo Type': 'Fake Mines',                  'Abbv': 'MD, Fake Mines',              'Effect': '0',                   'To- Hit': '0',      'Dam': '0',                  'DP': '2',  'Cost': '500',    'Weight': '150',  'Space': '2',            'Shots': '10', 'Shot Cost': '10',    'Shot Weight': '5'     ,'Loaded Cost': '600',    'Loaded Weight': '200',  'Mag Cost': '150',   'Mag Weight': '65'}
        self.weapons_minedroppers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Minedropper',                       'Drop-Down Name': 'Minedropper - Floating',                            'Ammo Type': 'Floating',                    'Abbv': 'MD, Floating',                'Effect': '1/2 inchx1/2 inch',   'To- Hit': '0',      'Dam': '1d*',                'DP': '2',  'Cost': '500',    'Weight': '150',  'Space': '2',            'Shots': '10', 'Shot Cost': '120',   'Shot Weight': '5'     ,'Loaded Cost': '1700',   'Loaded Weight': '200',  'Mag Cost': '1750',  'Mag Weight': '215'}
        self.weapons_minedroppers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Minedropper',                       'Drop-Down Name': 'Minedropper - Napalm',                              'Ammo Type': 'Napalm',                      'Abbv': 'MD, Napalm',                  'Effect': '1/2 inchx1/2 inch',   'To- Hit': '0',      'Dam': '1d* (4/3)',          'DP': '2',  'Cost': '500',    'Weight': '150',  'Space': '2',            'Shots': '10', 'Shot Cost': '60',    'Shot Weight': '5'     ,'Loaded Cost': '1100',   'Loaded Weight': '200',  'Mag Cost': '1150',  'Mag Weight': '215'}
        self.weapons_minedroppers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Spear 1000 MD',                     'Drop-Down Name': 'Spear 1000 MD',                                     'Ammo Type': 'Normal',                      'Abbv': 'SMD',                         'Effect': '1/2 inchx1/2 inch',   'To- Hit': '0',      'Dam': '1d-3/2d+3',          'DP': '2',  'Cost': '750',    'Weight': '150',  'Space': '2',            'Shots': '5',  'Shot Cost': '100',   'Shot Weight': '10'    ,'Loaded Cost': '1250',   'Loaded Weight': '200',  'Mag Cost': '550',   'Mag Weight': '65'}
        self.weapons_minedroppers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Spear 1000 MD',                     'Drop-Down Name': 'Spear 1000 MD - TDX',                               'Ammo Type': 'TDX',                         'Abbv': 'SMD, TDX',                    'Effect': '1/2 inchx1/2 inch',   'To- Hit': '0',      'Dam': '1d+3/1d-2',          'DP': '2',  'Cost': '750',    'Weight': '150',  'Space': '2',            'Shots': '5',  'Shot Cost': '100',   'Shot Weight': '10'    ,'Loaded Cost': '1250',   'Loaded Weight': '200',  'Mag Cost': '550',   'Mag Weight': '65'}
        self.weapons_minedroppers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Spear 1000 MD',                     'Drop-Down Name': 'Spear 1000 MD - Napalm',                            'Ammo Type': 'Napalm',                      'Abbv': 'SMD, Napalm',                 'Effect': '1/2 inchx1/2 inch',   'To- Hit': '0',      'Dam': '1d/2d*',             'DP': '2',  'Cost': '750',    'Weight': '150',  'Space': '2',            'Shots': '5',  'Shot Cost': '150',   'Shot Weight': '10'    ,'Loaded Cost': '1500',   'Loaded Weight': '200',  'Mag Cost': '800',   'Mag Weight': '65'}
        self.weapons_minedroppers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Spear 1000 MD',                     'Drop-Down Name': 'Spear 1000 MD - Spider Mine',                       'Ammo Type': 'Spider Mine',                 'Abbv': 'SMD,Spider',                  'Effect': '1/2 inchx1/2 inch',   'To- Hit': '0',      'Dam': '1d/2d',              'DP': '2',  'Cost': '750',    'Weight': '150',  'Space': '2',            'Shots': '5',  'Shot Cost': '150',   'Shot Weight': '10'    ,'Loaded Cost': '1500',   'Loaded Weight': '200',  'Mag Cost': '800',   'Mag Weight': '65'}
        self.weapons_minedroppers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Heavy Mine Dropper',               'Drop-Down Name': '*Heavy Mine Dropper',                               'Ammo Type': 'Normal',                      'Abbv': 'HMD',                         'Effect': '1',                   'To- Hit': '0',      'Dam': '3D/2D',              'DP': '3',  'Cost': '1500',   'Weight': '250',  'Space': '4',            'Shots': '10', 'Shot Cost': '200',   'Shot Weight': '20'    ,'Loaded Cost': '3500',   'Loaded Weight': '450',  'Mag Cost': '2050',  'Mag Weight': '215'}
        self.weapons_minedroppers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '*Heavy Mine Dropper',               'Drop-Down Name': '*Heavy Mine Dropper - Spider Mine',                 'Ammo Type': 'Spider Mine',                 'Abbv': 'HMD, Spider',                 'Effect': '1',                   'To- Hit': '0',      'Dam': '2d+1/1d+1',          'DP': '3',  'Cost': '1500',   'Weight': '250',  'Space': '4',            'Shots': '10', 'Shot Cost': '300',   'Shot Weight': '20'    ,'Loaded Cost': '4500',   'Loaded Weight': '450',  'Mag Cost': '3050',  'Mag Weight': '215'}
        self.weapons_minedroppers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': '',                                  'Drop-Down Name': 'DISCHARGERS',                                       'Ammo Type': '',                            'Abbv': '',                            'Effect': '',                    'To- Hit': '',       'Dam': '',                   'DP': '',   'Cost': '',       'Weight': '',     'Space': '',             'Shots': '',   'Shot Cost': '',      'Shot Weight': ''      ,'Loaded Cost': '',       'Loaded Weight': '',     'Mag Cost': '',      'Mag Weight': ''}
        self.weapons_dischargers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Chaff Discharger',                  'Drop-Down Name': 'Chaff Discharger',                                  'Ammo Type': 'Normal',                      'Abbv': 'ChD',                         'Effect': '1/2 inchx1',          'To- Hit': '0',      'Dam': '0',                  'DP': '0',  'Cost': '50',     'Weight': '5',    'Space': '0',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '0',      'Loaded Weight': '0',    'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_dischargers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Fake Discharger',                   'Drop-Down Name': 'Fake Discharger',                                   'Ammo Type': 'Normal',                      'Abbv': 'FkD',                         'Effect': '0',                   'To- Hit': '0',      'Dam': '0',                  'DP': '0',  'Cost': '5',      'Weight': '5',    'Space': '0',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '0',      'Loaded Weight': '0',    'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_dischargers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Flame Cloud Discharger',            'Drop-Down Name': 'Flame Cloud Discharger',                            'Ammo Type': 'Normal',                      'Abbv': 'FCD',                         'Effect': '1/2 inchx1',          'To- Hit': '0',      'Dam': '1d-1 (3/1)',         'DP': '0',  'Cost': '150',    'Weight': '5',    'Space': '0',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '0',      'Loaded Weight': '0',    'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_dischargers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Flaming Oil Discharger',            'Drop-Down Name': 'Flaming Oil Discharger',                            'Ammo Type': 'Normal',                      'Abbv': 'FOD',                         'Effect': '1/2 inchx1',          'To- Hit': '0',      'Dam': '1d-2 (3/2)',         'DP': '0',  'Cost': '100',    'Weight': '5',    'Space': '0',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '0',      'Loaded Weight': '0',    'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_dischargers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Flechette Discharger',              'Drop-Down Name': 'Flechette Discharger',                              'Ammo Type': 'Normal',                      'Abbv': 'FD',                          'Effect': '1/2 inchx1',          'To- Hit': '0',      'Dam': '0 (1d)',             'DP': '0',  'Cost': '50',     'Weight': '5',    'Space': '0',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '0',      'Loaded Weight': '0',    'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_dischargers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Foam Discharger',                   'Drop-Down Name': 'Foam Discharger',                                   'Ammo Type': 'Normal',                      'Abbv': 'FmD',                         'Effect': '1/2 inchx1/2 inch',   'To- Hit': '0',      'Dam': '*',                  'DP': '0',  'Cost': '25',     'Weight': '5',    'Space': '0',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '0',      'Loaded Weight': '0',    'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_dischargers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Hot Smoke Discharger',              'Drop-Down Name': 'Hot Smoke Discharger',                              'Ammo Type': 'Normal',                      'Abbv': 'HsD',                         'Effect': '1/2 inchx1',          'To- Hit': '0',      'Dam': '0',                  'DP': '0',  'Cost': '65',     'Weight': '5',    'Space': '0',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '0',      'Loaded Weight': '0',    'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_dischargers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Ice Discharger',                    'Drop-Down Name': 'Ice Discharger',                                    'Ammo Type': 'Normal',                      'Abbv': 'IcD',                         'Effect': '1/2 inchx1',          'To- Hit': '0',      'Dam': '',                   'DP': '0',  'Cost': '75',     'Weight': '5',    'Space': '0',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '0',      'Loaded Weight': '0',    'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_dischargers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Oil Dscharger',                     'Drop-Down Name': 'Oil Dscharger',                                     'Ammo Type': 'Normal',                      'Abbv': 'OD',                          'Effect': '1/2 inchx1',          'To- Hit': '0',      'Dam': '',                   'DP': '0',  'Cost': '50',     'Weight': '5',    'Space': '0',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '0',      'Loaded Weight': '0',    'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_dischargers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Paint Discharger',                  'Drop-Down Name': 'Paint Discharger',                                  'Ammo Type': 'Normal',                      'Abbv': 'PD',                          'Effect': '1/2 inchx1',          'To- Hit': '0',      'Dam': '',                   'DP': '0',  'Cost': '40',     'Weight': '5',    'Space': '0',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '0',      'Loaded Weight': '0',    'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_dischargers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Paint Discharger',                  'Drop-Down Name': 'Paint Discharger - Glow-in-the-dark',               'Ammo Type': 'Glow-in-the-dark',            'Abbv': 'PD/glow',                     'Effect': '1/2 inchx1',          'To- Hit': '0',      'Dam': '',                   'DP': '0',  'Cost': '160',    'Weight': '5',    'Space': '0',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '0',      'Loaded Weight': '0',    'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_dischargers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Point-Defense Discharger',          'Drop-Down Name': 'Point-Defense Discharger',                 'Ammo Type': 'Normal',                      'Abbv': 'PDG',                         'Effect': '1 inch Radius',       'To- Hit': '0',      'Dam': '1/2 inch (1d)',      'DP': '0',  'Cost': '100',    'Weight': '5',    'Space': '0',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '0',      'Loaded Weight': '0',    'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_dischargers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Pyrophoric Oil Discharger',         'Drop-Down Name': 'Pyrophoric Oil Discharger',                'Ammo Type': 'Normal',                      'Abbv': 'POD',                         'Effect': '1/2 inchx1',          'To- Hit': '0',      'Dam': '1D-2 (3/2)',         'DP': '0',  'Cost': '250',    'Weight': '5',    'Space': '0',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '0',      'Loaded Weight': '0',    'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_dischargers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Sand Discharger',                   'Drop-Down Name': 'Sand Discharger',                                   'Ammo Type': 'Normal',                      'Abbv': 'SaD',                         'Effect': '1/2 inchx1',          'To- Hit': '0',      'Dam': '0',                  'DP': '0',  'Cost': '25',     'Weight': '5',    'Space': '0',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '0',      'Loaded Weight': '0',    'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_dischargers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Smoke Discharger',                  'Drop-Down Name': 'Smoke Discharger',                                  'Ammo Type': 'Normal',                      'Abbv': 'SkD',                         'Effect': '1/2 inchx1',          'To- Hit': '0',      'Dam': '0',                  'DP': '0',  'Cost': '50',     'Weight': '5',    'Space': '0',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '0',      'Loaded Weight': '0',    'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_dischargers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'StickyFoam Discharger',             'Drop-Down Name': 'StickyFoam Discharger',                             'Ammo Type': 'Normal',                      'Abbv': 'SfD',                         'Effect': '1/2 inchx1',          'To- Hit': '0',      'Dam': '0',                  'DP': '0',  'Cost': '75',     'Weight': '5',    'Space': '0',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '0',      'Loaded Weight': '0',    'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_dischargers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'StickyFoam Neutralizer Discharger', 'Drop-Down Name': 'StickyFoam Neutralizer Discharger',                 'Ammo Type': 'Normal',                      'Abbv': 'SfND',                        'Effect': '1/2 inchx1',          'To- Hit': '0',      'Dam': '0',                  'DP': '0',  'Cost': '200',    'Weight': '5',    'Space': '0',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '0',      'Loaded Weight': '0',    'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_dischargers_list.append(entry_dict)
        entry_dict: dict = {'Weapon Name': 'Tear Gas Discharger',               'Drop-Down Name': 'Tear Gas Discharger',                               'Ammo Type': 'Normal',                      'Abbv': 'TGD',                         'Effect': '1/2 inchx1',          'To- Hit': '0',      'Dam': '',                   'DP': '0',  'Cost': '75',     'Weight': '5',    'Space': '0',            'Shots': '0',  'Shot Cost': '0',     'Shot Weight': '0'     ,'Loaded Cost': '0',      'Loaded Weight': '0',    'Mag Cost': '0',     'Mag Weight': '0'}
        self.weapons_dischargers_list.append(entry_dict)

    def add_to_sub_weapon_row_1(self, entry: dict):
        drop_down_name:       str = entry.get("Drop-Down Name")
        weapon_name:          str = entry.get("Weapon Name") # 'Weapon Name'  # 'Drop-Down Name'
        weapon_ammo_type:     str = entry.get("Ammo Type") # 'Ammo Type'
        weapon_abbv:          str = entry.get("Abbv") # 'Abbv'
        weapon_effect:        str = entry.get("Effect") # 'Effect'
        weapon_to_hit:        str = entry.get("To- Hit") # 'To- Hit'
        weapon_damage:        str = entry.get("Dam") # 'Dam'
        weapon_dp:            str = entry.get("DP") # 'DP'
        weapon_cost:          str = entry.get("Cost") # 'Cost'
        weapon_weight:        str = entry.get("Weight") # 'Weight'
        weapon_space:         str = entry.get("Space") # 'Space'
        weapon_shots:         str = entry.get("Shots") # 'Shots'
        weapon_shot_cost:     str = entry.get("Shot Cost") # 'Shot Cost'
        weapon_shot_weight:   str = entry.get("Shot Weight") # 'Shot Weight'
        weapon_loaded_cost:   str = entry.get("Loaded Cost") # 'Loaded Cost'
        weapon_loaded_weight: str = entry.get("Loaded Weight") # 'Loaded Weight'
        weapon_mag_cost:      str = entry.get("Mag Cost") # 'Mag Cost'
        weapon_mag_weight:    str = entry.get("Mag Weight") # 'Mag Weight'

        self.label_hidden_sub_weapon_1_name.configure(text=str(weapon_name))
        self.label_hidden_sub_weapon_1_drop_down_name.configure(text=str(drop_down_name))
        self.label_hidden_sub_weapon_1_ammo_type.configure(text=str(weapon_ammo_type))
        self.label_hidden_sub_weapon_1_abbv.configure(text=str(weapon_abbv))
        self.label_hidden_sub_weapon_1_effect.configure(text=str(weapon_effect))
        self.label_hidden_sub_weapon_1_to_hit.configure(text=str(weapon_to_hit))
        self.label_hidden_sub_weapon_1_damage.configure(text=str(weapon_damage))
        self.label_hidden_sub_weapon_1_dp.configure(text=str(weapon_dp))
        self.label_hidden_sub_weapon_1_cost.configure(text=str(weapon_cost))
        self.label_hidden_sub_weapon_1_weight.configure(text=str(weapon_weight))
        self.label_hidden_sub_weapon_1_space.configure(text=str(weapon_space))
        self.label_hidden_sub_weapon_1_shots.configure(text=str(weapon_shots))
        self.label_hidden_sub_weapon_1_ammo_cost.configure(text=str(weapon_shot_cost))
        self.label_hidden_sub_weapon_1_ammo_weight.configure(text=str(weapon_shot_weight))
        self.label_hidden_sub_weapon_1_loaded_cost.configure(text=str(weapon_loaded_cost))
        self.label_hidden_sub_weapon_1_loaded_weight.configure(text=str(weapon_loaded_weight))
        self.label_hidden_sub_weapon_1_mag_cost.configure(text=str(weapon_mag_cost))
        self.label_hidden_sub_weapon_1_mag_weight.configure(text=str(weapon_mag_weight))
        self.label_sub_weapon_1_shots.configure(text=str(weapon_shots))
        self.label_sub_weapon_1_ammo_cost.configure(text=str(weapon_shot_cost*self.var_sub_weapon_1_qty.get()))
        self.label_sub_weapon_1_ammo_weight.configure(text=str(weapon_shot_weight*self.var_sub_weapon_1_qty.get()))
        self.label_sub_weapon_1_tohit.configure(text=str(weapon_to_hit))
        self.label_sub_weapon_1_damage.configure(text=str(weapon_damage))
        self.on_update_sub_weapon_1_qty()
        #self.recalculate()

    ######################################################################
    # Weapon Row 1 processing here                                       #
    ######################################################################

    def add_labels_buttons_weapon_header(self, canvas_type):
        tk.Label(canvas_type, text="Weapons",     anchor="w").grid(column=self.grid_col_item,                 row=self.grid_row_weapon_alt_1, sticky="w")
        tk.Label(canvas_type, text="Ammo Qty",    anchor="w").grid(column=self.grid_right_qty,                row=self.grid_row_weapon_alt_1, sticky="w", columnspan=3)
        tk.Label(canvas_type, text="Extra Mags",  anchor="w").grid(column=self.grid_col_extra_mag_entry,      row=self.grid_row_weapon_alt_1, sticky="w", columnspan=3)
        tk.Label(canvas_type, text="Shots",       anchor="w").grid(column=self.grid_col_max_weight,           row=self.grid_row_weapon_alt_1, sticky="w")
        tk.Label(canvas_type, text="Ammo Cost",   anchor="w").grid(column=self.grid_col_power_factors,        row=self.grid_row_weapon_alt_1, sticky="w")
        tk.Label(canvas_type, text="Ammo Weight", anchor="w").grid(column=self.grid_col_base_mpg,             row=self.grid_row_weapon_alt_1, sticky="w")
        tk.Label(canvas_type, text="Facing",      anchor="w").grid(column=self.grid_col_test_track,           row=self.grid_row_weapon_alt_1, sticky="w")
        tk.Label(canvas_type, text="To Hit",      anchor="w").grid(column=self.grid_col_test_track_numbers,   row=self.grid_row_weapon_alt_1, sticky="w")
        tk.Label(canvas_type, text="Damage",      anchor="w").grid(column=self.grid_col_last_column,          row=self.grid_row_weapon_alt_1, sticky="w")

    def add_labels_buttons_weapon_row_1(self, canvas_type):
        up_arrow = "\u2191"
        down_arrow = "\u2193"
        self.label_hidden_weapon_1_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_1_drop_down_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_1_ammo_type = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_1_abbv = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_1_effect = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_1_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_1_damage = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_1_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_1_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_1_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_1_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_1_shots = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_1_ammo_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_1_ammo_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_1_loaded_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_1_loaded_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_1_mag_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_1_mag_weight = tk.Label(canvas_type, text="0", anchor="w")

        self.label_hidden_sub_weapon_1_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_1_drop_down_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_1_ammo_type = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_1_abbv = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_1_effect = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_1_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_1_damage = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_1_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_1_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_1_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_1_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_1_shots = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_1_ammo_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_1_ammo_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_1_loaded_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_1_loaded_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_1_mag_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_1_mag_weight = tk.Label(canvas_type, text="0", anchor="w")

        self.label_sub_weapon_1_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_1_cost.grid(column=self.grid_col_cost,row=self.grid_row_sub_weapon_alt_1, sticky="w")
        self.label_sub_weapon_1_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_1_weight.grid(column=self.grid_col_weight ,row=self.grid_row_sub_weapon_alt_1, sticky="w")
        self.label_sub_weapon_1_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_1_space.grid(column=self.grid_col_spaces,row=self.grid_row_sub_weapon_alt_1, sticky="w")
        self.label_sub_weapon_1_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_1_dp.grid(column=self.grid_col_dp,row=self.grid_row_sub_weapon_alt_1, sticky="w")
        self.label_sub_weapon_1_shots = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_1_shots.grid(column=self.grid_col_max_weight, row=self.grid_row_sub_weapon_alt_1, sticky="w")
        self.label_sub_weapon_1_ammo_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_1_ammo_cost.grid(column=self.grid_col_power_factors,row=self.grid_row_sub_weapon_alt_1, sticky="w")
        self.label_sub_weapon_1_ammo_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_1_ammo_weight.grid(column=self.grid_col_base_mpg,row=self.grid_row_sub_weapon_alt_1, sticky="w")
        self.label_sub_weapon_1_tohit = tk.Label(canvas_type, text="", anchor="w")
        self.label_sub_weapon_1_tohit.grid(column=self.grid_col_test_track_numbers, row = self.grid_row_sub_weapon_alt_1, sticky="w")
        self.label_sub_weapon_1_damage = tk.Label(canvas_type, text="", anchor="w")
        self.label_sub_weapon_1_damage.grid(column=self.grid_col_last_column, row = self.grid_row_sub_weapon_alt_1, sticky="w")

        self.var_sub_weapon_1_qty = tk.IntVar()
        self.entry_sub_weapon_1_qty = ttk.Entry(canvas_type, textvariable=self.var_sub_weapon_1_qty, width=3)
        self.entry_sub_weapon_1_qty.grid(column=self.grid_col_qty,row=self.grid_row_sub_weapon_alt_1, sticky="w")
        self.var_sub_weapon_1_qty.trace_add("write", self.on_update_sub_weapon_1_qty)
        self.var_sub_weapon_ammo_1_qty = tk.IntVar()
        self.entry_sub_weapon_ammo_1_qty = ttk.Entry(canvas_type, textvariable=self.var_sub_weapon_ammo_1_qty, width=3)
        self.entry_sub_weapon_ammo_1_qty.grid(column=self.grid_right_qty,row=self.grid_row_sub_weapon_alt_1, sticky="w")
        self.var_sub_weapon_ammo_1_qty.trace_add("write", self.on_update_sub_weapon_ammo_1_qty)

        self.button_sub_weapon_1_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_sub_weapon_1_qty_up)
        self.button_sub_weapon_1_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_sub_weapon_alt_1, sticky="w")
        self.button_sub_weapon_1_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_sub_weapon_1_qty_down)
        self.button_sub_weapon_1_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_sub_weapon_alt_1, sticky="w")
        self.button_sub_weapon_1_ammo_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_sub_weapon_1_ammo_qty_up)
        self.button_sub_weapon_1_ammo_qty_up.grid(column=self.grid_right_up_button,row=self.grid_row_sub_weapon_alt_1, sticky="w")
        self.button_sub_weapon_1_ammo_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_sub_weapon_1_ammo_qty_down)
        self.button_sub_weapon_1_ammo_qty_down.grid(column=self.grid_right_down_button,row=self.grid_row_sub_weapon_alt_1, sticky="w")

        self.var_sub_weapon_extra_mags_1_qty = tk.IntVar()
        self.entry_sub_weapon_extra_mags_1_qty = ttk.Entry(canvas_type, textvariable=self.var_sub_weapon_extra_mags_1_qty, width=3)
        self.entry_sub_weapon_extra_mags_1_qty.grid(column=self.grid_col_extra_mag_entry,row=self.grid_row_sub_weapon_alt_1, sticky="w")
        self.var_sub_weapon_extra_mags_1_qty.trace_add("write", self.on_update_sub_weapon_extra_mags_1_qty)
        self.button_sub_weapon_extra_mags_1_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_sub_weapon_extra_mags_1_qty_up)
        self.button_sub_weapon_extra_mags_1_qty_up.grid(column=self.grid_col_extra_mag_qty_up,row=self.grid_row_sub_weapon_alt_1, sticky="w")
        self.button_sub_weapon_extra_mags_1_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_sub_weapon_extra_mags_1_qty_down)
        self.button_sub_weapon_extra_mags_1_qty_down.grid(column=self.grid_col_extra_mag_qty_down,row=self.grid_row_sub_weapon_alt_1, sticky="w")

    def add_dropdown_weapons(self, canvas_type):
        self.add_dropdown_weapon_alt_1_canvas(canvas_type=canvas_type)
        self.add_dropdown_weapon_alt_2_canvas(canvas_type=canvas_type)
        self.add_dropdown_weapon_alt_3_canvas(canvas_type=canvas_type)
        self.add_dropdown_weapon_alt_4_canvas(canvas_type=canvas_type)
        self.add_dropdown_weapon_alt_5_canvas(canvas_type=canvas_type)
        self.add_dropdown_weapon_alt_6_canvas(canvas_type=canvas_type)
        self.add_dropdown_weapon_alt_7_canvas(canvas_type=canvas_type)
        self.add_dropdown_weapon_alt_8_canvas(canvas_type=canvas_type)
        self.add_dropdown_weapon_alt_9_canvas(canvas_type=canvas_type)
        self.add_dropdown_weapon_alt_10_canvas(canvas_type=canvas_type)
        self.weapon_armor_facing_1, self.weapon_armor_facing_1_dropdown = self.add_weapon_facing_dropdown(
                                        canvas_type=canvas_type
                                      , column_val = self.grid_col_test_track
                                      , row_val = self.grid_row_sub_weapon_alt_1)
        self.weapon_armor_facing_2, self.weapon_armor_facing_2_dropdown = self.add_weapon_facing_dropdown(
                                        canvas_type=canvas_type
                                      , column_val = self.grid_col_test_track
                                      , row_val = self.grid_row_sub_weapon_alt_2)
        self.weapon_armor_facing_3, self.weapon_armor_facing_3_dropdown = self.add_weapon_facing_dropdown(
                                        canvas_type=canvas_type
                                      , column_val = self.grid_col_test_track
                                      , row_val = self.grid_row_sub_weapon_alt_3)
        self.weapon_armor_facing_4, self.weapon_armor_facing_4_dropdown = self.add_weapon_facing_dropdown(
                                        canvas_type=canvas_type
                                      , column_val = self.grid_col_test_track
                                      , row_val = self.grid_row_sub_weapon_alt_4)
        self.weapon_armor_facing_5, self.weapon_armor_facing_5_dropdown = self.add_weapon_facing_dropdown(
                                        canvas_type=canvas_type
                                      , column_val = self.grid_col_test_track
                                      , row_val = self.grid_row_sub_weapon_alt_5)
        self.weapon_armor_facing_6, self.weapon_armor_facing_6_dropdown = self.add_weapon_facing_dropdown(
                                        canvas_type=canvas_type
                                      , column_val = self.grid_col_test_track
                                      , row_val = self.grid_row_sub_weapon_alt_6)
        self.weapon_armor_facing_7, self.weapon_armor_facing_7_dropdown = self.add_weapon_facing_dropdown(
                                        canvas_type=canvas_type
                                      , column_val = self.grid_col_test_track
                                      , row_val = self.grid_row_sub_weapon_alt_7)
        self.weapon_armor_facing_8, self.weapon_armor_facing_8_dropdown = self.add_weapon_facing_dropdown(
                                        canvas_type=canvas_type
                                      , column_val = self.grid_col_test_track
                                      , row_val = self.grid_row_sub_weapon_alt_8)
        self.weapon_armor_facing_9, self.weapon_armor_facing_9_dropdown = self.add_weapon_facing_dropdown(
                                        canvas_type=canvas_type
                                      , column_val = self.grid_col_test_track
                                      , row_val = self.grid_row_sub_weapon_alt_9)
        self.weapon_armor_facing_10, self.weapon_armor_facing_10_dropdown = self.add_weapon_facing_dropdown(
                                        canvas_type=canvas_type
                                      , column_val = self.grid_col_test_track
                                      , row_val = self.grid_row_sub_weapon_alt_10)

    def add_weapon_facing_dropdown(self, canvas_type, column_val, row_val):
        """ Generic function to create facings for weapon rows"""
        facing = tk.StringVar()
        facing.set("Facing")
        options = ["Facing", "Front", "Back", "Left", "Right", "Top", "Underbody"]
        # Create the dropdown widget
        dropdown = ttk.OptionMenu(canvas_type, facing, "Facing", *options) #filled elsewhere
        dropdown.grid(column=column_val, row=row_val, sticky="w")
        return facing, dropdown

    def add_dropdown_weapon_alt_1_canvas(self, canvas_type):
        self.selected_weapon_alt_1 = tk.StringVar()
        self.selected_weapon_alt_1.set("Weapon")
        options = self.get_weapon_options_alt()
        # Create the dropdown widget
        self.weapon_alt_1_dropdown = ttk.OptionMenu(canvas_type, self.selected_weapon_alt_1, "Weapon", *options) #filled elsewhere
        self.weapon_alt_1_dropdown.grid(column=self.grid_col_item, row=self.grid_row_weapon_alt_1, sticky="w")
        self.selected_weapon_alt_1.trace_add("write", self.on_select_weapon_alt_1_canvas)

    def add_dropdown_sub_weapon_1_canvas(self, row_number: int):
        if self.selected_sub_weapon_1_canvas is not None:
            self.selected_sub_weapon_1_canvas = None
        if self.sub_weapon_dropdown_1_canvas is not None:
            self.sub_weapon_dropdown_1_canvas.grid_forget() #remove it from the screen
            self.sub_weapon_dropdown_1_canvas = None
        self.selected_sub_weapon_1_canvas = tk.StringVar()
        self.selected_sub_weapon_1_canvas.set("Weapon")
        options = self.get_weapon_options_sub_list(input_list=self.temp_dropdown_list)
        self.sub_weapon_dropdown_1_canvas = ttk.OptionMenu(self.canvas_type, self.selected_sub_weapon_1_canvas, "Weapon", *options) #filled elsewhere
        self.sub_weapon_dropdown_1_canvas.grid(column=self.grid_col_item, row=row_number, sticky="w")
        self.selected_sub_weapon_1_canvas.trace_add("write", self.on_select_sub_weapon_alt_1_canvas)

    def on_select_weapon_alt_1_canvas(self, *args):
        selected_value = self.selected_weapon_alt_1.get()
        row_number: int = self.grid_row_sub_weapon_alt_1
        match selected_value:
            case "SMALL BORE WEAPONS":
                self.temp_dropdown_list = self.weapons_small_bore_list
            case "LARGE BORE WEAPONS":
                self.temp_dropdown_list = self.weapons_large_bore_list
            case "GRENADE LAUNCHERS":
                self.temp_dropdown_list = self.weapons_grenade_launchers_list
            case "GRENADE AMMO":
                self.temp_dropdown_list = self.weapons_grenade_ammo_list
            case "ROCKETS":
                self.temp_dropdown_list = self.weapons_rockets_list
            case "ENERGY WEAPONS":
                self.temp_dropdown_list = self.weapons_energy_list
            case "FLAMETHROWERS":
                self.temp_dropdown_list = self.weapons_flamethrower_list
            case "DROPPED GASSES":
                self.temp_dropdown_list = self.weapons_dropped_gas_list
            case "DROPPED LIQUIDS":
                self.temp_dropdown_list = self.weapons_dropped_liquid_list
            case "DROPPED SOLIDS":
                self.temp_dropdown_list = self.weapons_dropped_solid_list
            case "MINEDROPPERS":
                self.temp_dropdown_list = self.weapons_minedroppers_list
            case "DISCHARGERS":
                self.temp_dropdown_list = self.weapons_dischargers_list
        self.add_dropdown_sub_weapon_1_canvas(row_number = row_number)

    def on_button_sub_weapon_1_qty_up(self, *args):
        sub_weapon_1_qty = self.var_sub_weapon_1_qty.get()
        sub_weapon_1_qty = sub_weapon_1_qty + 1
        self.var_sub_weapon_1_qty.set(value=sub_weapon_1_qty)
        self.on_update_sub_weapon_1_qty()

    def on_button_sub_weapon_1_qty_down(self, *args):
        sub_weapon_1_qty = self.var_sub_weapon_1_qty.get()
        sub_weapon_1_qty = max(sub_weapon_1_qty - 1, 0)
        self.var_sub_weapon_1_qty.set(value=sub_weapon_1_qty)
        self.on_update_sub_weapon_1_qty()

    def on_button_sub_weapon_1_ammo_qty_up(self, *args):
        sub_weapon_1_ammo_qty = self.var_sub_weapon_ammo_1_qty.get()
        sub_weapon_1_ammo_qty = sub_weapon_1_ammo_qty + 1
        self.var_sub_weapon_ammo_1_qty.set(value=sub_weapon_1_ammo_qty)
        self.on_update_sub_weapon_ammo_1_qty()

    def on_button_sub_weapon_1_ammo_qty_down(self, *args):
        sub_weapon_1_ammo_qty = self.var_sub_weapon_ammo_1_qty.get()
        sub_weapon_1_ammo_qty = max(sub_weapon_1_ammo_qty - 1, 0)
        self.var_sub_weapon_ammo_1_qty.set(value=sub_weapon_1_ammo_qty)
        self.on_update_sub_weapon_ammo_1_qty()

    def on_button_sub_weapon_extra_mags_1_qty_up(self, *args):
        sub_weapon_extra_mags_1_qty = self.var_sub_weapon_extra_mags_1_qty.get()
        sub_weapon_extra_mags_1_qty = sub_weapon_extra_mags_1_qty + 1
        self.var_sub_weapon_extra_mags_1_qty.set(value=sub_weapon_extra_mags_1_qty)
        self.on_update_sub_weapon_extra_mags_1_qty()

    def on_button_sub_weapon_extra_mags_1_qty_down(self, *args):
        sub_weapon_extra_mags_1_qty = self.var_sub_weapon_extra_mags_1_qty.get()
        sub_weapon_extra_mags_1_qty = max(sub_weapon_extra_mags_1_qty - 1, 0)
        self.var_sub_weapon_extra_mags_1_qty.set(value=sub_weapon_extra_mags_1_qty)
        self.on_update_sub_weapon_extra_mags_1_qty()

    def on_update_sub_weapon_1_qty(self, *args):
        sub_weapon_1_qty = self.var_sub_weapon_1_qty.get()
        sub_weapon_1_cost   = int(self.label_hidden_sub_weapon_1_cost.cget("text"))
        sub_weapon_1_weight = int(self.label_hidden_sub_weapon_1_weight.cget("text"))
        sub_weapon_1_space  = float(self.label_hidden_sub_weapon_1_space.cget("text"))
        self.label_sub_weapon_1_cost.configure(text=self.float_to_str(sub_weapon_1_cost * sub_weapon_1_qty))
        self.label_sub_weapon_1_weight.configure(text=self.float_to_str(sub_weapon_1_weight * sub_weapon_1_qty))
        self.label_sub_weapon_1_space.configure(text=self.float_to_str(sub_weapon_1_space * sub_weapon_1_qty))
        self.recalculate()

    def on_update_sub_weapon_ammo_1_qty(self, *args):
        sub_weapon_1_ammo_qty = self.var_sub_weapon_ammo_1_qty.get()
        sub_weapon_1_ammo_cost   = float(self.label_hidden_sub_weapon_1_ammo_cost.cget("text"))
        sub_weapon_1_ammo_weight = float(self.label_hidden_sub_weapon_1_ammo_weight.cget("text"))
        self.label_sub_weapon_1_ammo_cost.configure(text=str(sub_weapon_1_ammo_cost * sub_weapon_1_ammo_qty))
        self.label_sub_weapon_1_ammo_weight.configure(text=str(sub_weapon_1_ammo_weight * sub_weapon_1_ammo_qty))
        self.recalculate()

    def on_update_sub_weapon_extra_mags_1_qty(self, *args):
        sub_weapon_extra_mags_1_qty = self.var_sub_weapon_extra_mags_1_qty.get()
        sub_weapon_1_qty    = self.var_sub_weapon_1_qty.get()
        sub_weapon_1_cost   = int(self.label_hidden_sub_weapon_1_cost.cget("text"))
        sub_weapon_1_weight = int(self.label_hidden_sub_weapon_1_weight.cget("text"))
        sub_weapon_1_space  = float(self.label_hidden_sub_weapon_1_space.cget("text"))
        sub_weapon_1_cost   = sub_weapon_1_cost   * sub_weapon_1_qty + (50 * sub_weapon_extra_mags_1_qty)
        sub_weapon_1_weight = sub_weapon_1_weight * sub_weapon_1_qty + (15 * sub_weapon_extra_mags_1_qty)
        sub_weapon_1_space  = sub_weapon_1_space  * sub_weapon_1_qty + sub_weapon_extra_mags_1_qty
        self.label_sub_weapon_1_cost.configure(text=self.float_to_str(sub_weapon_1_cost))
        self.label_sub_weapon_1_weight.configure(text=self.float_to_str(sub_weapon_1_weight))
        self.label_sub_weapon_1_space.configure(text=self.float_to_str(sub_weapon_1_space))
        self.recalculate()

    ######################################################################
    # Weapon Row 2 processing here                                       #
    ######################################################################

    def add_labels_buttons_weapon_row_2(self, canvas_type):
        up_arrow = "\u2191"
        down_arrow = "\u2193"
        self.label_hidden_weapon_2_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_2_drop_down_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_2_ammo_type = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_2_abbv = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_2_effect = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_2_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_2_damage = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_2_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_2_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_2_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_2_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_2_shots = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_2_ammo_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_2_ammo_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_2_loaded_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_2_loaded_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_2_mag_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_2_mag_weight = tk.Label(canvas_type, text="0", anchor="w")

        self.label_hidden_sub_weapon_2_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_2_drop_down_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_2_ammo_type = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_2_abbv = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_2_effect = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_2_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_2_damage = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_2_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_2_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_2_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_2_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_2_shots = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_2_ammo_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_2_ammo_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_2_loaded_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_2_loaded_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_2_mag_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_2_mag_weight = tk.Label(canvas_type, text="0", anchor="w")

        self.label_sub_weapon_2_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_2_cost.grid(column=self.grid_col_cost,row=self.grid_row_sub_weapon_alt_2, sticky="w")
        self.label_sub_weapon_2_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_2_weight.grid(column=self.grid_col_weight ,row=self.grid_row_sub_weapon_alt_2, sticky="w")
        self.label_sub_weapon_2_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_2_space.grid(column=self.grid_col_spaces,row=self.grid_row_sub_weapon_alt_2, sticky="w")
        self.label_sub_weapon_2_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_2_dp.grid(column=self.grid_col_dp,row=self.grid_row_sub_weapon_alt_2, sticky="w")
        self.label_sub_weapon_2_shots = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_2_shots.grid(column=self.grid_col_max_weight, row=self.grid_row_sub_weapon_alt_2, sticky="w")
        self.label_sub_weapon_2_ammo_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_2_ammo_cost.grid(column=self.grid_col_power_factors,row=self.grid_row_sub_weapon_alt_2, sticky="w")
        self.label_sub_weapon_2_ammo_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_2_ammo_weight.grid(column=self.grid_col_base_mpg,row=self.grid_row_sub_weapon_alt_2, sticky="w")
        self.label_sub_weapon_2_tohit = tk.Label(canvas_type, text="", anchor="w")
        self.label_sub_weapon_2_tohit.grid(column=self.grid_col_test_track_numbers, row = self.grid_row_sub_weapon_alt_2, sticky="w")
        self.label_sub_weapon_2_damage = tk.Label(canvas_type, text="", anchor="w")
        self.label_sub_weapon_2_damage.grid(column=self.grid_col_last_column, row = self.grid_row_sub_weapon_alt_2, sticky="w")

        self.var_sub_weapon_2_qty = tk.IntVar()
        self.entry_sub_weapon_2_qty = ttk.Entry(canvas_type, textvariable=self.var_sub_weapon_2_qty, width=3)
        self.entry_sub_weapon_2_qty.grid(column=self.grid_col_qty,row=self.grid_row_sub_weapon_alt_2, sticky="w")
        self.var_sub_weapon_2_qty.trace_add("write", self.on_update_sub_weapon_2_qty)
        self.var_sub_weapon_ammo_2_qty = tk.IntVar()
        self.entry_sub_weapon_ammo_2_qty = ttk.Entry(canvas_type, textvariable=self.var_sub_weapon_ammo_2_qty, width=3)
        self.entry_sub_weapon_ammo_2_qty.grid(column=self.grid_right_qty,row=self.grid_row_sub_weapon_alt_2, sticky="w")
        self.var_sub_weapon_ammo_2_qty.trace_add("write", self.on_update_sub_weapon_ammo_2_qty)
        
        self.button_sub_weapon_2_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_sub_weapon_2_qty_up)
        self.button_sub_weapon_2_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_sub_weapon_alt_2, sticky="w")
        self.button_sub_weapon_2_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_sub_weapon_2_qty_down)
        self.button_sub_weapon_2_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_sub_weapon_alt_2, sticky="w")
        self.button_sub_weapon_2_ammo_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_sub_weapon_2_ammo_qty_up)
        self.button_sub_weapon_2_ammo_qty_up.grid(column=self.grid_right_up_button,row=self.grid_row_sub_weapon_alt_2, sticky="w")
        self.button_sub_weapon_2_ammo_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_sub_weapon_2_ammo_qty_down)
        self.button_sub_weapon_2_ammo_qty_down.grid(column=self.grid_right_down_button,row=self.grid_row_sub_weapon_alt_2, sticky="w")

        self.var_sub_weapon_extra_mags_2_qty = tk.IntVar()
        self.entry_sub_weapon_extra_mags_2_qty = ttk.Entry(canvas_type, textvariable=self.var_sub_weapon_extra_mags_2_qty, width=3)
        self.entry_sub_weapon_extra_mags_2_qty.grid(column=self.grid_col_extra_mag_entry,row=self.grid_row_sub_weapon_alt_2, sticky="w")
        self.var_sub_weapon_extra_mags_2_qty.trace_add("write", self.on_update_sub_weapon_extra_mags_2_qty)
        self.button_sub_weapon_extra_mags_2_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_sub_weapon_extra_mags_2_qty_up)
        self.button_sub_weapon_extra_mags_2_qty_up.grid(column=self.grid_col_extra_mag_qty_up,row=self.grid_row_sub_weapon_alt_2, sticky="w")
        self.button_sub_weapon_extra_mags_2_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_sub_weapon_extra_mags_2_qty_down)
        self.button_sub_weapon_extra_mags_2_qty_down.grid(column=self.grid_col_extra_mag_qty_down,row=self.grid_row_sub_weapon_alt_2, sticky="w")

    def add_dropdown_weapon_alt_2_canvas(self, canvas_type):
        self.selected_weapon_alt_2 = tk.StringVar()
        self.selected_weapon_alt_2.set("Weapon")
        options = self.get_weapon_options_alt()
        # Create the dropdown widget
        self.weapon_alt_2_dropdown = ttk.OptionMenu(canvas_type, self.selected_weapon_alt_2, "Weapon", *options) #filled elsewhere
        self.weapon_alt_2_dropdown.grid(column=self.grid_col_item, row=self.grid_row_weapon_alt_2, sticky="w")
        self.selected_weapon_alt_2.trace_add("write", self.on_select_weapon_alt_2_canvas)

    def add_dropdown_sub_weapon_2_canvas(self, row_number: int):
        if self.selected_sub_weapon_2_canvas is not None:
            self.selected_sub_weapon_2_canvas = None
        if self.sub_weapon_dropdown_2_canvas is not None:
            self.sub_weapon_dropdown_2_canvas.grid_forget() #remove it from the screen
            self.sub_weapon_dropdown_2_canvas = None
        self.selected_sub_weapon_2_canvas = tk.StringVar()
        self.selected_sub_weapon_2_canvas.set("Weapon")
        options = self.get_weapon_options_sub_list(input_list=self.temp_dropdown_list)
        self.sub_weapon_dropdown_2_canvas = ttk.OptionMenu(self.canvas_type, self.selected_sub_weapon_2_canvas, "Weapon", *options) #filled elsewhere
        self.sub_weapon_dropdown_2_canvas.grid(column=self.grid_col_item, row=row_number, sticky="w")
        self.selected_sub_weapon_2_canvas.trace_add("write", self.on_select_sub_weapon_alt_2_canvas)

    def on_select_weapon_alt_2_canvas(self, *args):
        selected_value = self.selected_weapon_alt_2.get()
        row_number: int = self.grid_row_sub_weapon_alt_2
        match selected_value:
            case "SMALL BORE WEAPONS":
                self.temp_dropdown_list = self.weapons_small_bore_list
            case "LARGE BORE WEAPONS":
                self.temp_dropdown_list = self.weapons_large_bore_list
            case "GRENADE LAUNCHERS":
                self.temp_dropdown_list = self.weapons_grenade_launchers_list
            case "GRENADE AMMO":
                self.temp_dropdown_list = self.weapons_grenade_ammo_list
            case "ROCKETS":
                self.temp_dropdown_list = self.weapons_rockets_list
            case "ENERGY WEAPONS":
                self.temp_dropdown_list = self.weapons_energy_list
            case "FLAMETHROWERS":
                self.temp_dropdown_list = self.weapons_flamethrower_list
            case "DROPPED GASSES":
                self.temp_dropdown_list = self.weapons_dropped_gas_list
            case "DROPPED LIQUIDS":
                self.temp_dropdown_list = self.weapons_dropped_liquid_list
            case "DROPPED SOLIDS":
                self.temp_dropdown_list = self.weapons_dropped_solid_list
            case "MINEDROPPERS":
                self.temp_dropdown_list = self.weapons_minedroppers_list
            case "DISCHARGERS":
                self.temp_dropdown_list = self.weapons_dischargers_list
        self.add_dropdown_sub_weapon_2_canvas(row_number = row_number)

    def on_select_sub_weapon_alt_2_canvas(self, *args):
        selected_value = self.selected_sub_weapon_2_canvas.get()
        for entry in self.temp_dropdown_list:
            drop_down_name: str = entry.get("Drop-Down Name")
            if selected_value == drop_down_name:
                self.add_to_sub_weapon_row_2(entry)

    def add_to_sub_weapon_row_2(self, entry: dict):
        drop_down_name:       str = entry.get("Drop-Down Name")
        weapon_name:          str = entry.get("Weapon Name") # 'Weapon Name'  # 'Drop-Down Name'
        weapon_ammo_type:     str = entry.get("Ammo Type") # 'Ammo Type'
        weapon_abbv:          str = entry.get("Abbv") # 'Abbv'
        weapon_effect:        str = entry.get("Effect") # 'Effect'
        weapon_to_hit:        str = entry.get("To- Hit") # 'To- Hit'
        weapon_damage:        str = entry.get("Dam") # 'Dam'
        weapon_dp:            str = entry.get("DP") # 'DP'
        weapon_cost:          str = entry.get("Cost") # 'Cost'
        weapon_weight:        str = entry.get("Weight") # 'Weight'
        weapon_space:         str = entry.get("Space") # 'Space'
        weapon_shots:         str = entry.get("Shots") # 'Shots'
        weapon_shot_cost:     str = entry.get("Shot Cost") # 'Shot Cost'
        weapon_shot_weight:   str = entry.get("Shot Weight") # 'Shot Weight'
        weapon_loaded_cost:   str = entry.get("Loaded Cost") # 'Loaded Cost'
        weapon_loaded_weight: str = entry.get("Loaded Weight") # 'Loaded Weight'
        weapon_mag_cost:      str = entry.get("Mag Cost") # 'Mag Cost'
        weapon_mag_weight:    str = entry.get("Mag Weight") # 'Mag Weight'

        self.label_hidden_sub_weapon_2_name.configure(text=str(weapon_name))
        self.label_hidden_sub_weapon_2_drop_down_name.configure(text=str(drop_down_name))
        self.label_hidden_sub_weapon_2_ammo_type.configure(text=str(weapon_ammo_type))
        self.label_hidden_sub_weapon_2_abbv.configure(text=str(weapon_abbv))
        self.label_hidden_sub_weapon_2_effect.configure(text=str(weapon_effect))
        self.label_hidden_sub_weapon_2_to_hit.configure(text=str(weapon_to_hit))
        self.label_hidden_sub_weapon_2_damage.configure(text=str(weapon_damage))
        self.label_hidden_sub_weapon_2_dp.configure(text=str(weapon_dp))
        self.label_hidden_sub_weapon_2_cost.configure(text=str(weapon_cost))
        self.label_hidden_sub_weapon_2_weight.configure(text=str(weapon_weight))
        self.label_hidden_sub_weapon_2_space.configure(text=str(weapon_space))
        self.label_hidden_sub_weapon_2_shots.configure(text=str(weapon_shots))
        self.label_hidden_sub_weapon_2_ammo_cost.configure(text=str(weapon_shot_cost))
        self.label_hidden_sub_weapon_2_ammo_weight.configure(text=str(weapon_shot_weight))
        self.label_hidden_sub_weapon_2_loaded_cost.configure(text=str(weapon_loaded_cost))
        self.label_hidden_sub_weapon_2_loaded_weight.configure(text=str(weapon_loaded_weight))
        self.label_hidden_sub_weapon_2_mag_cost.configure(text=str(weapon_mag_cost))
        self.label_hidden_sub_weapon_2_mag_weight.configure(text=str(weapon_mag_weight))
        self.label_sub_weapon_2_shots.configure(text=str(weapon_shots))
        self.label_sub_weapon_2_ammo_cost.configure(text=str(weapon_shot_cost*self.var_sub_weapon_2_qty.get()))
        self.label_sub_weapon_2_ammo_weight.configure(text=str(weapon_shot_weight*self.var_sub_weapon_2_qty.get()))
        self.label_sub_weapon_2_tohit.configure(text=str(weapon_to_hit))
        self.label_sub_weapon_2_damage.configure(text=str(weapon_damage))
        self.on_update_sub_weapon_2_qty()

    def on_button_sub_weapon_2_qty_up(self, *args):
        sub_weapon_2_qty = self.var_sub_weapon_2_qty.get()
        sub_weapon_2_qty = sub_weapon_2_qty + 1
        self.var_sub_weapon_2_qty.set(value=sub_weapon_2_qty)
        self.on_update_sub_weapon_2_qty()

    def on_button_sub_weapon_2_qty_down(self, *args):
        sub_weapon_2_qty = self.var_sub_weapon_2_qty.get()
        sub_weapon_2_qty = max(sub_weapon_2_qty - 1, 0)
        self.var_sub_weapon_2_qty.set(value=sub_weapon_2_qty)
        self.on_update_sub_weapon_2_qty()

    def on_button_sub_weapon_2_ammo_qty_up(self, *args):
        sub_weapon_2_ammo_qty = self.var_sub_weapon_ammo_2_qty.get()
        sub_weapon_2_ammo_qty = sub_weapon_2_ammo_qty + 1
        self.var_sub_weapon_ammo_2_qty.set(value=sub_weapon_2_ammo_qty)
        self.on_update_sub_weapon_ammo_2_qty()

    def on_button_sub_weapon_2_ammo_qty_down(self, *args):
        sub_weapon_2_ammo_qty = self.var_sub_weapon_ammo_2_qty.get()
        sub_weapon_2_ammo_qty = max(sub_weapon_2_ammo_qty - 1, 0)
        self.var_sub_weapon_ammo_2_qty.set(value=sub_weapon_2_ammo_qty)
        self.on_update_sub_weapon_ammo_2_qty()

    def on_button_sub_weapon_extra_mags_2_qty_up(self, *args):
        sub_weapon_extra_mags_2_qty = self.var_sub_weapon_extra_mags_2_qty.get()
        sub_weapon_extra_mags_2_qty = sub_weapon_extra_mags_2_qty + 1
        self.var_sub_weapon_extra_mags_2_qty.set(value=sub_weapon_extra_mags_2_qty)
        self.on_update_sub_weapon_extra_mags_2_qty()

    def on_button_sub_weapon_extra_mags_2_qty_down(self, *args):
        sub_weapon_extra_mags_2_qty = self.var_sub_weapon_extra_mags_2_qty.get()
        sub_weapon_extra_mags_2_qty = max(sub_weapon_extra_mags_2_qty - 1, 0)
        self.var_sub_weapon_extra_mags_2_qty.set(value=sub_weapon_extra_mags_2_qty)
        self.on_update_sub_weapon_extra_mags_2_qty()

    def on_update_sub_weapon_2_qty(self, *args):
        sub_weapon_2_qty = self.var_sub_weapon_2_qty.get()
        sub_weapon_2_cost   = int(self.label_hidden_sub_weapon_2_cost.cget("text"))
        sub_weapon_2_weight = int(self.label_hidden_sub_weapon_2_weight.cget("text"))
        sub_weapon_2_space  = float(self.label_hidden_sub_weapon_2_space.cget("text"))
        self.label_sub_weapon_2_cost.configure(text=self.float_to_str(sub_weapon_2_cost * sub_weapon_2_qty))
        self.label_sub_weapon_2_weight.configure(text=self.float_to_str(sub_weapon_2_weight * sub_weapon_2_qty))
        self.label_sub_weapon_2_space.configure(text=self.float_to_str(sub_weapon_2_space * sub_weapon_2_qty))
        self.recalculate()

    def on_update_sub_weapon_ammo_2_qty(self, *args):
        sub_weapon_2_ammo_qty = self.var_sub_weapon_ammo_2_qty.get()
        sub_weapon_2_ammo_cost   = float(self.label_hidden_sub_weapon_2_ammo_cost.cget("text"))
        sub_weapon_2_ammo_weight = float(self.label_hidden_sub_weapon_2_ammo_weight.cget("text"))
        self.label_sub_weapon_2_ammo_cost.configure(text=str(sub_weapon_2_ammo_cost * sub_weapon_2_ammo_qty))
        self.label_sub_weapon_2_ammo_weight.configure(text=str(sub_weapon_2_ammo_weight * sub_weapon_2_ammo_qty))
        self.recalculate()

    def on_update_sub_weapon_extra_mags_2_qty(self, *args):
        sub_weapon_extra_mags_2_qty = self.var_sub_weapon_extra_mags_2_qty.get()
        sub_weapon_2_qty    = self.var_sub_weapon_2_qty.get()
        sub_weapon_2_cost   = int(self.label_hidden_sub_weapon_2_cost.cget("text"))
        sub_weapon_2_weight = int(self.label_hidden_sub_weapon_2_weight.cget("text"))
        sub_weapon_2_space  = float(self.label_hidden_sub_weapon_2_space.cget("text"))
        sub_weapon_2_cost   = sub_weapon_2_cost   * sub_weapon_2_qty + (50 * sub_weapon_extra_mags_2_qty)
        sub_weapon_2_weight = sub_weapon_2_weight * sub_weapon_2_qty + (15 * sub_weapon_extra_mags_2_qty)
        sub_weapon_2_space  = sub_weapon_2_space  * sub_weapon_2_qty + sub_weapon_extra_mags_2_qty
        self.label_sub_weapon_2_cost.configure(text=self.float_to_str(sub_weapon_2_cost))
        self.label_sub_weapon_2_weight.configure(text=self.float_to_str(sub_weapon_2_weight))
        self.label_sub_weapon_2_space.configure(text=self.float_to_str(sub_weapon_2_space))
        self.recalculate()

    ######################################################################
    # Weapon Row 3 processing here                                       #
    ######################################################################

    def add_labels_buttons_weapon_row_3(self, canvas_type):
        up_arrow = "\u2191"
        down_arrow = "\u2193"
        self.label_hidden_weapon_3_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_3_drop_down_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_3_ammo_type = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_3_abbv = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_3_effect = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_3_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_3_damage = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_3_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_3_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_3_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_3_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_3_shots = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_3_ammo_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_3_ammo_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_3_loaded_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_3_loaded_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_3_mag_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_3_mag_weight = tk.Label(canvas_type, text="0", anchor="w")

        self.label_hidden_sub_weapon_3_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_3_drop_down_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_3_ammo_type = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_3_abbv = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_3_effect = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_3_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_3_damage = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_3_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_3_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_3_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_3_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_3_shots = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_3_ammo_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_3_ammo_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_3_loaded_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_3_loaded_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_3_mag_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_3_mag_weight = tk.Label(canvas_type, text="0", anchor="w")

        self.label_sub_weapon_3_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_3_cost.grid(column=self.grid_col_cost,row=self.grid_row_sub_weapon_alt_3, sticky="w")
        self.label_sub_weapon_3_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_3_weight.grid(column=self.grid_col_weight ,row=self.grid_row_sub_weapon_alt_3, sticky="w")
        self.label_sub_weapon_3_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_3_space.grid(column=self.grid_col_spaces,row=self.grid_row_sub_weapon_alt_3, sticky="w")
        self.label_sub_weapon_3_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_3_dp.grid(column=self.grid_col_dp,row=self.grid_row_sub_weapon_alt_3, sticky="w")
        self.label_sub_weapon_3_shots = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_3_shots.grid(column=self.grid_col_max_weight, row=self.grid_row_sub_weapon_alt_3, sticky="w")
        self.label_sub_weapon_3_ammo_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_3_ammo_cost.grid(column=self.grid_col_power_factors,row=self.grid_row_sub_weapon_alt_3, sticky="w")
        self.label_sub_weapon_3_ammo_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_3_ammo_weight.grid(column=self.grid_col_base_mpg,row=self.grid_row_sub_weapon_alt_3, sticky="w")
        self.label_sub_weapon_3_tohit = tk.Label(canvas_type, text="", anchor="w")
        self.label_sub_weapon_3_tohit.grid(column=self.grid_col_test_track_numbers, row = self.grid_row_sub_weapon_alt_3, sticky="w")
        self.label_sub_weapon_3_damage = tk.Label(canvas_type, text="", anchor="w")
        self.label_sub_weapon_3_damage.grid(column=self.grid_col_last_column, row = self.grid_row_sub_weapon_alt_3, sticky="w")

        self.var_sub_weapon_3_qty = tk.IntVar()
        self.entry_sub_weapon_3_qty = ttk.Entry(canvas_type, textvariable=self.var_sub_weapon_3_qty, width=3)
        self.entry_sub_weapon_3_qty.grid(column=self.grid_col_qty,row=self.grid_row_sub_weapon_alt_3, sticky="w")
        self.var_sub_weapon_3_qty.trace_add("write", self.on_update_sub_weapon_3_qty)
        self.var_sub_weapon_ammo_3_qty = tk.IntVar()
        self.entry_sub_weapon_ammo_3_qty = ttk.Entry(canvas_type, textvariable=self.var_sub_weapon_ammo_3_qty, width=3)
        self.entry_sub_weapon_ammo_3_qty.grid(column=self.grid_right_qty,row=self.grid_row_sub_weapon_alt_3, sticky="w")
        self.var_sub_weapon_ammo_3_qty.trace_add("write", self.on_update_sub_weapon_ammo_3_qty)

        self.button_sub_weapon_3_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_sub_weapon_3_qty_up)
        self.button_sub_weapon_3_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_sub_weapon_alt_3, sticky="w")
        self.button_sub_weapon_3_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_sub_weapon_3_qty_down)
        self.button_sub_weapon_3_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_sub_weapon_alt_3, sticky="w")
        self.button_sub_weapon_3_ammo_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_sub_weapon_3_ammo_qty_up)
        self.button_sub_weapon_3_ammo_qty_up.grid(column=self.grid_right_up_button,row=self.grid_row_sub_weapon_alt_3, sticky="w")
        self.button_sub_weapon_3_ammo_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_sub_weapon_3_ammo_qty_down)
        self.button_sub_weapon_3_ammo_qty_down.grid(column=self.grid_right_down_button,row=self.grid_row_sub_weapon_alt_3, sticky="w")

        self.var_sub_weapon_extra_mags_3_qty = tk.IntVar()
        self.entry_sub_weapon_extra_mags_3_qty = ttk.Entry(canvas_type, textvariable=self.var_sub_weapon_extra_mags_3_qty, width=3)
        self.entry_sub_weapon_extra_mags_3_qty.grid(column=self.grid_col_extra_mag_entry,row=self.grid_row_sub_weapon_alt_3, sticky="w")
        self.var_sub_weapon_extra_mags_3_qty.trace_add("write", self.on_update_sub_weapon_extra_mags_3_qty)
        self.button_sub_weapon_extra_mags_3_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_sub_weapon_extra_mags_3_qty_up)
        self.button_sub_weapon_extra_mags_3_qty_up.grid(column=self.grid_col_extra_mag_qty_up,row=self.grid_row_sub_weapon_alt_3, sticky="w")
        self.button_sub_weapon_extra_mags_3_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_sub_weapon_extra_mags_3_qty_down)
        self.button_sub_weapon_extra_mags_3_qty_down.grid(column=self.grid_col_extra_mag_qty_down,row=self.grid_row_sub_weapon_alt_3, sticky="w")

    def add_dropdown_weapon_alt_3_canvas(self, canvas_type):
        self.selected_weapon_alt_3 = tk.StringVar()
        self.selected_weapon_alt_3.set("Weapon")
        options = self.get_weapon_options_alt()
        # Create the dropdown widget
        self.weapon_alt_3_dropdown = ttk.OptionMenu(canvas_type, self.selected_weapon_alt_3, "Weapon", *options) #filled elsewhere
        self.weapon_alt_3_dropdown.grid(column=self.grid_col_item, row=self.grid_row_weapon_alt_3, sticky="w")
        self.selected_weapon_alt_3.trace_add("write", self.on_select_weapon_alt_3_canvas)

    def add_dropdown_sub_weapon_3_canvas(self, row_number: int):
        if self.selected_sub_weapon_3_canvas is not None:
            self.selected_sub_weapon_3_canvas = None
        if self.sub_weapon_dropdown_3_canvas is not None:
            self.sub_weapon_dropdown_3_canvas.grid_forget() #remove it from the screen
            self.sub_weapon_dropdown_3_canvas = None
        self.selected_sub_weapon_3_canvas = tk.StringVar()
        self.selected_sub_weapon_3_canvas.set("Weapon")
        options = self.get_weapon_options_sub_list(input_list=self.temp_dropdown_list)
        self.sub_weapon_dropdown_3_canvas = ttk.OptionMenu(self.canvas_type, self.selected_sub_weapon_3_canvas, "Weapon", *options) #filled elsewhere
        self.sub_weapon_dropdown_3_canvas.grid(column=self.grid_col_item, row=row_number, sticky="w")
        self.selected_sub_weapon_3_canvas.trace_add("write", self.on_select_sub_weapon_alt_3_canvas)

    def on_select_weapon_alt_3_canvas(self, *args):
        selected_value = self.selected_weapon_alt_3.get()
        row_number: int = self.grid_row_sub_weapon_alt_3
        match selected_value:
            case "SMALL BORE WEAPONS":
                self.temp_dropdown_list = self.weapons_small_bore_list
            case "LARGE BORE WEAPONS":
                self.temp_dropdown_list = self.weapons_large_bore_list
            case "GRENADE LAUNCHERS":
                self.temp_dropdown_list = self.weapons_grenade_launchers_list
            case "GRENADE AMMO":
                self.temp_dropdown_list = self.weapons_grenade_ammo_list
            case "ROCKETS":
                self.temp_dropdown_list = self.weapons_rockets_list
            case "ENERGY WEAPONS":
                self.temp_dropdown_list = self.weapons_energy_list
            case "FLAMETHROWERS":
                self.temp_dropdown_list = self.weapons_flamethrower_list
            case "DROPPED GASSES":
                self.temp_dropdown_list = self.weapons_dropped_gas_list
            case "DROPPED LIQUIDS":
                self.temp_dropdown_list = self.weapons_dropped_liquid_list
            case "DROPPED SOLIDS":
                self.temp_dropdown_list = self.weapons_dropped_solid_list
            case "MINEDROPPERS":
                self.temp_dropdown_list = self.weapons_minedroppers_list
            case "DISCHARGERS":
                self.temp_dropdown_list = self.weapons_dischargers_list
        self.add_dropdown_sub_weapon_3_canvas(row_number = row_number)

    def on_select_sub_weapon_alt_3_canvas(self, *args):
        selected_value = self.selected_sub_weapon_3_canvas.get()
        for entry in self.temp_dropdown_list:
            drop_down_name: str = entry.get("Drop-Down Name")
            if selected_value == drop_down_name:
                self.add_to_sub_weapon_row_3(entry)

    def add_to_sub_weapon_row_3(self, entry: dict):
        drop_down_name:       str = entry.get("Drop-Down Name")
        weapon_name:          str = entry.get("Weapon Name") # 'Weapon Name'  # 'Drop-Down Name'
        weapon_ammo_type:     str = entry.get("Ammo Type") # 'Ammo Type'
        weapon_abbv:          str = entry.get("Abbv") # 'Abbv'
        weapon_effect:        str = entry.get("Effect") # 'Effect'
        weapon_to_hit:        str = entry.get("To- Hit") # 'To- Hit'
        weapon_damage:        str = entry.get("Dam") # 'Dam'
        weapon_dp:            str = entry.get("DP") # 'DP'
        weapon_cost:          str = entry.get("Cost") # 'Cost'
        weapon_weight:        str = entry.get("Weight") # 'Weight'
        weapon_space:         str = entry.get("Space") # 'Space'
        weapon_shots:         str = entry.get("Shots") # 'Shots'
        weapon_shot_cost:     str = entry.get("Shot Cost") # 'Shot Cost'
        weapon_shot_weight:   str = entry.get("Shot Weight") # 'Shot Weight'
        weapon_loaded_cost:   str = entry.get("Loaded Cost") # 'Loaded Cost'
        weapon_loaded_weight: str = entry.get("Loaded Weight") # 'Loaded Weight'
        weapon_mag_cost:      str = entry.get("Mag Cost") # 'Mag Cost'
        weapon_mag_weight:    str = entry.get("Mag Weight") # 'Mag Weight'

        self.label_hidden_sub_weapon_3_name.configure(text=str(weapon_name))
        self.label_hidden_sub_weapon_3_drop_down_name.configure(text=str(drop_down_name))
        self.label_hidden_sub_weapon_3_ammo_type.configure(text=str(weapon_ammo_type))
        self.label_hidden_sub_weapon_3_abbv.configure(text=str(weapon_abbv))
        self.label_hidden_sub_weapon_3_effect.configure(text=str(weapon_effect))
        self.label_hidden_sub_weapon_3_to_hit.configure(text=str(weapon_to_hit))
        self.label_hidden_sub_weapon_3_damage.configure(text=str(weapon_damage))
        self.label_hidden_sub_weapon_3_dp.configure(text=str(weapon_dp))
        self.label_hidden_sub_weapon_3_cost.configure(text=str(weapon_cost))
        self.label_hidden_sub_weapon_3_weight.configure(text=str(weapon_weight))
        self.label_hidden_sub_weapon_3_space.configure(text=str(weapon_space))
        self.label_hidden_sub_weapon_3_shots.configure(text=str(weapon_shots))
        self.label_hidden_sub_weapon_3_ammo_cost.configure(text=str(weapon_shot_cost))
        self.label_hidden_sub_weapon_3_ammo_weight.configure(text=str(weapon_shot_weight))
        self.label_hidden_sub_weapon_3_loaded_cost.configure(text=str(weapon_loaded_cost))
        self.label_hidden_sub_weapon_3_loaded_weight.configure(text=str(weapon_loaded_weight))
        self.label_hidden_sub_weapon_3_mag_cost.configure(text=str(weapon_mag_cost))
        self.label_hidden_sub_weapon_3_mag_weight.configure(text=str(weapon_mag_weight))
        self.label_sub_weapon_3_shots.configure(text=str(weapon_shots))
        self.label_sub_weapon_3_ammo_cost.configure(text=str(weapon_shot_cost*self.var_sub_weapon_3_qty.get()))
        self.label_sub_weapon_3_ammo_weight.configure(text=str(weapon_shot_weight*self.var_sub_weapon_3_qty.get()))
        self.label_sub_weapon_3_tohit.configure(text=str(weapon_to_hit))
        self.label_sub_weapon_3_damage.configure(text=str(weapon_damage))
        self.on_update_sub_weapon_3_qty()

    def on_button_sub_weapon_3_qty_up(self, *args):
        sub_weapon_3_qty = self.var_sub_weapon_3_qty.get()
        sub_weapon_3_qty = sub_weapon_3_qty + 1
        self.var_sub_weapon_3_qty.set(value=sub_weapon_3_qty)
        self.on_update_sub_weapon_3_qty()

    def on_button_sub_weapon_3_qty_down(self, *args):
        sub_weapon_3_qty = self.var_sub_weapon_3_qty.get()
        sub_weapon_3_qty = max(sub_weapon_3_qty - 1, 0)
        self.var_sub_weapon_3_qty.set(value=sub_weapon_3_qty)
        self.on_update_sub_weapon_3_qty()

    def on_button_sub_weapon_3_ammo_qty_up(self, *args):
        sub_weapon_3_ammo_qty = self.var_sub_weapon_ammo_3_qty.get()
        sub_weapon_3_ammo_qty = sub_weapon_3_ammo_qty + 1
        self.var_sub_weapon_ammo_3_qty.set(value=sub_weapon_3_ammo_qty)
        self.on_update_sub_weapon_ammo_3_qty()

    def on_button_sub_weapon_3_ammo_qty_down(self, *args):
        sub_weapon_3_ammo_qty = self.var_sub_weapon_ammo_3_qty.get()
        sub_weapon_3_ammo_qty = max(sub_weapon_3_ammo_qty - 1, 0)
        self.var_sub_weapon_ammo_3_qty.set(value=sub_weapon_3_ammo_qty)
        self.on_update_sub_weapon_ammo_3_qty()

    def on_button_sub_weapon_extra_mags_3_qty_up(self, *args):
        sub_weapon_extra_mags_3_qty = self.var_sub_weapon_extra_mags_3_qty.get()
        sub_weapon_extra_mags_3_qty = sub_weapon_extra_mags_3_qty + 1
        self.var_sub_weapon_extra_mags_3_qty.set(value=sub_weapon_extra_mags_3_qty)
        self.on_update_sub_weapon_extra_mags_3_qty()

    def on_button_sub_weapon_extra_mags_3_qty_down(self, *args):
        sub_weapon_extra_mags_3_qty = self.var_sub_weapon_extra_mags_3_qty.get()
        sub_weapon_extra_mags_3_qty = max(sub_weapon_extra_mags_3_qty - 1, 0)
        self.var_sub_weapon_extra_mags_3_qty.set(value=sub_weapon_extra_mags_3_qty)
        self.on_update_sub_weapon_extra_mags_3_qty()

    def on_update_sub_weapon_3_qty(self, *args):
        sub_weapon_3_qty = self.var_sub_weapon_3_qty.get()
        sub_weapon_3_cost   = int(self.label_hidden_sub_weapon_3_cost.cget("text"))
        sub_weapon_3_weight = int(self.label_hidden_sub_weapon_3_weight.cget("text"))
        sub_weapon_3_space  = float(self.label_hidden_sub_weapon_3_space.cget("text"))
        self.label_sub_weapon_3_cost.configure(text=self.float_to_str(sub_weapon_3_cost * sub_weapon_3_qty))
        self.label_sub_weapon_3_weight.configure(text=self.float_to_str(sub_weapon_3_weight * sub_weapon_3_qty))
        self.label_sub_weapon_3_space.configure(text=self.float_to_str(sub_weapon_3_space * sub_weapon_3_qty))
        self.recalculate()

    def on_update_sub_weapon_ammo_3_qty(self, *args):
        sub_weapon_3_ammo_qty = self.var_sub_weapon_ammo_3_qty.get()
        sub_weapon_3_ammo_cost   = float(self.label_hidden_sub_weapon_3_ammo_cost.cget("text"))
        sub_weapon_3_ammo_weight = float(self.label_hidden_sub_weapon_3_ammo_weight.cget("text"))
        self.label_sub_weapon_3_ammo_cost.configure(text=str(sub_weapon_3_ammo_cost * sub_weapon_3_ammo_qty))
        self.label_sub_weapon_3_ammo_weight.configure(text=str(sub_weapon_3_ammo_weight * sub_weapon_3_ammo_qty))
        self.recalculate()

    def on_update_sub_weapon_extra_mags_3_qty(self, *args):
        sub_weapon_extra_mags_3_qty = self.var_sub_weapon_extra_mags_3_qty.get()
        sub_weapon_3_qty    = self.var_sub_weapon_3_qty.get()
        sub_weapon_3_cost   = int(self.label_hidden_sub_weapon_3_cost.cget("text"))
        sub_weapon_3_weight = int(self.label_hidden_sub_weapon_3_weight.cget("text"))
        sub_weapon_3_space  = float(self.label_hidden_sub_weapon_3_space.cget("text"))
        sub_weapon_3_cost   = sub_weapon_3_cost   * sub_weapon_3_qty + (50 * sub_weapon_extra_mags_3_qty)
        sub_weapon_3_weight = sub_weapon_3_weight * sub_weapon_3_qty + (15 * sub_weapon_extra_mags_3_qty)
        sub_weapon_3_space  = sub_weapon_3_space  * sub_weapon_3_qty + sub_weapon_extra_mags_3_qty
        self.label_sub_weapon_3_cost.configure(text=self.float_to_str(sub_weapon_3_cost))
        self.label_sub_weapon_3_weight.configure(text=self.float_to_str(sub_weapon_3_weight))
        self.label_sub_weapon_3_space.configure(text=self.float_to_str(sub_weapon_3_space))
        self.recalculate()
    ######################################################################
    # Weapon Row 4 processing here                                       #
    ######################################################################

    def add_labels_buttons_weapon_row_4(self, canvas_type):
        up_arrow = "\u2191"
        down_arrow = "\u2193"
        self.label_hidden_weapon_4_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_4_drop_down_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_4_ammo_type = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_4_abbv = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_4_effect = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_4_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_4_damage = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_4_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_4_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_4_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_4_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_4_shots = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_4_ammo_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_4_ammo_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_4_loaded_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_4_loaded_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_4_mag_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_4_mag_weight = tk.Label(canvas_type, text="0", anchor="w")

        self.label_hidden_sub_weapon_4_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_4_drop_down_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_4_ammo_type = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_4_abbv = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_4_effect = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_4_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_4_damage = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_4_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_4_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_4_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_4_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_4_shots = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_4_ammo_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_4_ammo_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_4_loaded_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_4_loaded_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_4_mag_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_4_mag_weight = tk.Label(canvas_type, text="0", anchor="w")

        self.label_sub_weapon_4_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_4_cost.grid(column=self.grid_col_cost,row=self.grid_row_sub_weapon_alt_4, sticky="w")
        self.label_sub_weapon_4_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_4_weight.grid(column=self.grid_col_weight ,row=self.grid_row_sub_weapon_alt_4, sticky="w")
        self.label_sub_weapon_4_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_4_space.grid(column=self.grid_col_spaces,row=self.grid_row_sub_weapon_alt_4, sticky="w")
        self.label_sub_weapon_4_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_4_dp.grid(column=self.grid_col_dp,row=self.grid_row_sub_weapon_alt_4, sticky="w")
        self.label_sub_weapon_4_shots = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_4_shots.grid(column=self.grid_col_max_weight, row=self.grid_row_sub_weapon_alt_4, sticky="w")
        self.label_sub_weapon_4_ammo_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_4_ammo_cost.grid(column=self.grid_col_power_factors,row=self.grid_row_sub_weapon_alt_4, sticky="w")
        self.label_sub_weapon_4_ammo_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_4_ammo_weight.grid(column=self.grid_col_base_mpg,row=self.grid_row_sub_weapon_alt_4, sticky="w")
        self.label_sub_weapon_4_tohit = tk.Label(canvas_type, text="", anchor="w")
        self.label_sub_weapon_4_tohit.grid(column=self.grid_col_test_track_numbers, row = self.grid_row_sub_weapon_alt_4, sticky="w")
        self.label_sub_weapon_4_damage = tk.Label(canvas_type, text="", anchor="w")
        self.label_sub_weapon_4_damage.grid(column=self.grid_col_last_column, row = self.grid_row_sub_weapon_alt_4, sticky="w")

        self.var_sub_weapon_4_qty = tk.IntVar()
        self.entry_sub_weapon_4_qty = ttk.Entry(canvas_type, textvariable=self.var_sub_weapon_4_qty, width=3)
        self.entry_sub_weapon_4_qty.grid(column=self.grid_col_qty,row=self.grid_row_sub_weapon_alt_4, sticky="w")
        self.var_sub_weapon_4_qty.trace_add("write", self.on_update_sub_weapon_4_qty)
        self.var_sub_weapon_ammo_4_qty = tk.IntVar()
        self.entry_sub_weapon_ammo_4_qty = ttk.Entry(canvas_type, textvariable=self.var_sub_weapon_ammo_4_qty, width=3)
        self.entry_sub_weapon_ammo_4_qty.grid(column=self.grid_right_qty,row=self.grid_row_sub_weapon_alt_4, sticky="w")
        self.var_sub_weapon_ammo_4_qty.trace_add("write", self.on_update_sub_weapon_ammo_4_qty)

        self.button_sub_weapon_4_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_sub_weapon_4_qty_up)
        self.button_sub_weapon_4_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_sub_weapon_alt_4, sticky="w")
        self.button_sub_weapon_4_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_sub_weapon_4_qty_down)
        self.button_sub_weapon_4_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_sub_weapon_alt_4, sticky="w")
        self.button_sub_weapon_4_ammo_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_sub_weapon_4_ammo_qty_up)
        self.button_sub_weapon_4_ammo_qty_up.grid(column=self.grid_right_up_button,row=self.grid_row_sub_weapon_alt_4, sticky="w")
        self.button_sub_weapon_4_ammo_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_sub_weapon_4_ammo_qty_down)
        self.button_sub_weapon_4_ammo_qty_down.grid(column=self.grid_right_down_button,row=self.grid_row_sub_weapon_alt_4, sticky="w")

        self.var_sub_weapon_extra_mags_4_qty = tk.IntVar()
        self.entry_sub_weapon_extra_mags_4_qty = ttk.Entry(canvas_type, textvariable=self.var_sub_weapon_extra_mags_4_qty, width=3)
        self.entry_sub_weapon_extra_mags_4_qty.grid(column=self.grid_col_extra_mag_entry,row=self.grid_row_sub_weapon_alt_4, sticky="w")
        self.var_sub_weapon_extra_mags_4_qty.trace_add("write", self.on_update_sub_weapon_extra_mags_4_qty)
        self.button_sub_weapon_extra_mags_4_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_sub_weapon_extra_mags_4_qty_up)
        self.button_sub_weapon_extra_mags_4_qty_up.grid(column=self.grid_col_extra_mag_qty_up,row=self.grid_row_sub_weapon_alt_4, sticky="w")
        self.button_sub_weapon_extra_mags_4_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_sub_weapon_extra_mags_4_qty_down)
        self.button_sub_weapon_extra_mags_4_qty_down.grid(column=self.grid_col_extra_mag_qty_down,row=self.grid_row_sub_weapon_alt_4, sticky="w")

    def add_dropdown_weapon_alt_4_canvas(self, canvas_type):
        self.selected_weapon_alt_4 = tk.StringVar()
        self.selected_weapon_alt_4.set("Weapon")
        options = self.get_weapon_options_alt()
        # Create the dropdown widget
        self.weapon_alt_4_dropdown = ttk.OptionMenu(canvas_type, self.selected_weapon_alt_4, "Weapon", *options) #filled elsewhere
        self.weapon_alt_4_dropdown.grid(column=self.grid_col_item, row=self.grid_row_weapon_alt_4, sticky="w")
        self.selected_weapon_alt_4.trace_add("write", self.on_select_weapon_alt_4_canvas)

    def add_dropdown_sub_weapon_4_canvas(self, row_number: int):
        if self.selected_sub_weapon_4_canvas is not None:
            self.selected_sub_weapon_4_canvas = None
        if self.sub_weapon_dropdown_4_canvas is not None:
            self.sub_weapon_dropdown_4_canvas.grid_forget() #remove it from the screen
            self.sub_weapon_dropdown_4_canvas = None
        self.selected_sub_weapon_4_canvas = tk.StringVar()
        self.selected_sub_weapon_4_canvas.set("Weapon")
        options = self.get_weapon_options_sub_list(input_list=self.temp_dropdown_list)
        self.sub_weapon_dropdown_4_canvas = ttk.OptionMenu(self.canvas_type, self.selected_sub_weapon_4_canvas, "Weapon", *options) #filled elsewhere
        self.sub_weapon_dropdown_4_canvas.grid(column=self.grid_col_item, row=row_number, sticky="w")
        self.selected_sub_weapon_4_canvas.trace_add("write", self.on_select_sub_weapon_alt_4_canvas)

    def on_select_weapon_alt_4_canvas(self, *args):
        selected_value = self.selected_weapon_alt_4.get()
        row_number: int = self.grid_row_sub_weapon_alt_4
        match selected_value:
            case "SMALL BORE WEAPONS":
                self.temp_dropdown_list = self.weapons_small_bore_list
            case "LARGE BORE WEAPONS":
                self.temp_dropdown_list = self.weapons_large_bore_list
            case "GRENADE LAUNCHERS":
                self.temp_dropdown_list = self.weapons_grenade_launchers_list
            case "GRENADE AMMO":
                self.temp_dropdown_list = self.weapons_grenade_ammo_list
            case "ROCKETS":
                self.temp_dropdown_list = self.weapons_rockets_list
            case "ENERGY WEAPONS":
                self.temp_dropdown_list = self.weapons_energy_list
            case "FLAMETHROWERS":
                self.temp_dropdown_list = self.weapons_flamethrower_list
            case "DROPPED GASSES":
                self.temp_dropdown_list = self.weapons_dropped_gas_list
            case "DROPPED LIQUIDS":
                self.temp_dropdown_list = self.weapons_dropped_liquid_list
            case "DROPPED SOLIDS":
                self.temp_dropdown_list = self.weapons_dropped_solid_list
            case "MINEDROPPERS":
                self.temp_dropdown_list = self.weapons_minedroppers_list
            case "DISCHARGERS":
                self.temp_dropdown_list = self.weapons_dischargers_list
        self.add_dropdown_sub_weapon_4_canvas(row_number = row_number)

    def on_select_sub_weapon_alt_4_canvas(self, *args):
        selected_value = self.selected_sub_weapon_4_canvas.get()
        for entry in self.temp_dropdown_list:
            drop_down_name: str = entry.get("Drop-Down Name")
            if selected_value == drop_down_name:
                self.add_to_sub_weapon_row_4(entry)

    def add_to_sub_weapon_row_4(self, entry: dict):
        drop_down_name:       str = entry.get("Drop-Down Name")
        weapon_name:          str = entry.get("Weapon Name") # 'Weapon Name'  # 'Drop-Down Name'
        weapon_ammo_type:     str = entry.get("Ammo Type") # 'Ammo Type'
        weapon_abbv:          str = entry.get("Abbv") # 'Abbv'
        weapon_effect:        str = entry.get("Effect") # 'Effect'
        weapon_to_hit:        str = entry.get("To- Hit") # 'To- Hit'
        weapon_damage:        str = entry.get("Dam") # 'Dam'
        weapon_dp:            str = entry.get("DP") # 'DP'
        weapon_cost:          str = entry.get("Cost") # 'Cost'
        weapon_weight:        str = entry.get("Weight") # 'Weight'
        weapon_space:         str = entry.get("Space") # 'Space'
        weapon_shots:         str = entry.get("Shots") # 'Shots'
        weapon_shot_cost:     str = entry.get("Shot Cost") # 'Shot Cost'
        weapon_shot_weight:   str = entry.get("Shot Weight") # 'Shot Weight'
        weapon_loaded_cost:   str = entry.get("Loaded Cost") # 'Loaded Cost'
        weapon_loaded_weight: str = entry.get("Loaded Weight") # 'Loaded Weight'
        weapon_mag_cost:      str = entry.get("Mag Cost") # 'Mag Cost'
        weapon_mag_weight:    str = entry.get("Mag Weight") # 'Mag Weight'

        self.label_hidden_sub_weapon_4_name.configure(text=str(weapon_name))
        self.label_hidden_sub_weapon_4_drop_down_name.configure(text=str(drop_down_name))
        self.label_hidden_sub_weapon_4_ammo_type.configure(text=str(weapon_ammo_type))
        self.label_hidden_sub_weapon_4_abbv.configure(text=str(weapon_abbv))
        self.label_hidden_sub_weapon_4_effect.configure(text=str(weapon_effect))
        self.label_hidden_sub_weapon_4_to_hit.configure(text=str(weapon_to_hit))
        self.label_hidden_sub_weapon_4_damage.configure(text=str(weapon_damage))
        self.label_hidden_sub_weapon_4_dp.configure(text=str(weapon_dp))
        self.label_hidden_sub_weapon_4_cost.configure(text=str(weapon_cost))
        self.label_hidden_sub_weapon_4_weight.configure(text=str(weapon_weight))
        self.label_hidden_sub_weapon_4_space.configure(text=str(weapon_space))
        self.label_hidden_sub_weapon_4_shots.configure(text=str(weapon_shots))
        self.label_hidden_sub_weapon_4_ammo_cost.configure(text=str(weapon_shot_cost))
        self.label_hidden_sub_weapon_4_ammo_weight.configure(text=str(weapon_shot_weight))
        self.label_hidden_sub_weapon_4_loaded_cost.configure(text=str(weapon_loaded_cost))
        self.label_hidden_sub_weapon_4_loaded_weight.configure(text=str(weapon_loaded_weight))
        self.label_hidden_sub_weapon_4_mag_cost.configure(text=str(weapon_mag_cost))
        self.label_hidden_sub_weapon_4_mag_weight.configure(text=str(weapon_mag_weight))
        self.label_sub_weapon_4_shots.configure(text=str(weapon_shots))
        self.label_sub_weapon_4_ammo_cost.configure(text=str(weapon_shot_cost*self.var_sub_weapon_4_qty.get()))
        self.label_sub_weapon_4_ammo_weight.configure(text=str(weapon_shot_weight*self.var_sub_weapon_4_qty.get()))
        self.label_sub_weapon_4_tohit.configure(text=str(weapon_to_hit))
        self.label_sub_weapon_4_damage.configure(text=str(weapon_damage))
        self.on_update_sub_weapon_3_qty()

    def on_button_sub_weapon_4_qty_up(self, *args):
        sub_weapon_4_qty = self.var_sub_weapon_4_qty.get()
        sub_weapon_4_qty = sub_weapon_4_qty + 1
        self.var_sub_weapon_4_qty.set(value=sub_weapon_4_qty)
        self.on_update_sub_weapon_4_qty()

    def on_button_sub_weapon_4_qty_down(self, *args):
        sub_weapon_4_qty = self.var_sub_weapon_4_qty.get()
        sub_weapon_4_qty = max(sub_weapon_4_qty - 1, 0)
        self.var_sub_weapon_4_qty.set(value=sub_weapon_4_qty)
        self.on_update_sub_weapon_4_qty()

    def on_button_sub_weapon_4_ammo_qty_up(self, *args):
        sub_weapon_4_ammo_qty = self.var_sub_weapon_ammo_4_qty.get()
        sub_weapon_4_ammo_qty = sub_weapon_4_ammo_qty + 1
        self.var_sub_weapon_ammo_4_qty.set(value=sub_weapon_4_ammo_qty)
        self.on_update_sub_weapon_ammo_4_qty()

    def on_button_sub_weapon_4_ammo_qty_down(self, *args):
        sub_weapon_4_ammo_qty = self.var_sub_weapon_ammo_4_qty.get()
        sub_weapon_4_ammo_qty = max(sub_weapon_4_ammo_qty - 1, 0)
        self.var_sub_weapon_ammo_4_qty.set(value=sub_weapon_4_ammo_qty)
        self.on_update_sub_weapon_ammo_4_qty()

    def on_button_sub_weapon_extra_mags_4_qty_up(self, *args):
        sub_weapon_extra_mags_4_qty = self.var_sub_weapon_extra_mags_4_qty.get()
        sub_weapon_extra_mags_4_qty = sub_weapon_extra_mags_4_qty + 1
        self.var_sub_weapon_extra_mags_4_qty.set(value=sub_weapon_extra_mags_4_qty)
        self.on_update_sub_weapon_extra_mags_4_qty()

    def on_button_sub_weapon_extra_mags_4_qty_down(self, *args):
        sub_weapon_extra_mags_4_qty = self.var_sub_weapon_extra_mags_4_qty.get()
        sub_weapon_extra_mags_4_qty = max(sub_weapon_extra_mags_4_qty - 1, 0)
        self.var_sub_weapon_extra_mags_4_qty.set(value=sub_weapon_extra_mags_4_qty)
        self.on_update_sub_weapon_extra_mags_4_qty()

    def on_update_sub_weapon_4_qty(self, *args):
        sub_weapon_4_qty = self.var_sub_weapon_4_qty.get()
        sub_weapon_4_cost   = int(self.label_hidden_sub_weapon_4_cost.cget("text"))
        sub_weapon_4_weight = int(self.label_hidden_sub_weapon_4_weight.cget("text"))
        sub_weapon_4_space  = float(self.label_hidden_sub_weapon_4_space.cget("text"))
        self.label_sub_weapon_4_cost.configure(text=self.float_to_str(sub_weapon_4_cost * sub_weapon_4_qty))
        self.label_sub_weapon_4_weight.configure(text=self.float_to_str(sub_weapon_4_weight * sub_weapon_4_qty))
        self.label_sub_weapon_4_space.configure(text=self.float_to_str(sub_weapon_4_space * sub_weapon_4_qty))
        self.recalculate()

    def on_update_sub_weapon_ammo_4_qty(self, *args):
        sub_weapon_4_ammo_qty = self.var_sub_weapon_ammo_4_qty.get()
        sub_weapon_4_ammo_cost   = float(self.label_hidden_sub_weapon_4_ammo_cost.cget("text"))
        sub_weapon_4_ammo_weight = float(self.label_hidden_sub_weapon_4_ammo_weight.cget("text"))
        self.label_sub_weapon_4_ammo_cost.configure(text=str(sub_weapon_4_ammo_cost * sub_weapon_4_ammo_qty))
        self.label_sub_weapon_4_ammo_weight.configure(text=str(sub_weapon_4_ammo_weight * sub_weapon_4_ammo_qty))
        self.recalculate()

    def on_update_sub_weapon_extra_mags_4_qty(self, *args):
        sub_weapon_extra_mags_4_qty = self.var_sub_weapon_extra_mags_4_qty.get()
        sub_weapon_4_qty    = self.var_sub_weapon_4_qty.get()
        sub_weapon_4_cost   = int(self.label_hidden_sub_weapon_4_cost.cget("text"))
        sub_weapon_4_weight = int(self.label_hidden_sub_weapon_4_weight.cget("text"))
        sub_weapon_4_space  = float(self.label_hidden_sub_weapon_4_space.cget("text"))
        sub_weapon_4_cost   = sub_weapon_4_cost   * sub_weapon_4_qty + (50 * sub_weapon_extra_mags_4_qty)
        sub_weapon_4_weight = sub_weapon_4_weight * sub_weapon_4_qty + (15 * sub_weapon_extra_mags_4_qty)
        sub_weapon_4_space  = sub_weapon_4_space  * sub_weapon_4_qty + sub_weapon_extra_mags_4_qty
        self.label_sub_weapon_4_cost.configure(text=self.float_to_str(sub_weapon_4_cost))
        self.label_sub_weapon_4_weight.configure(text=self.float_to_str(sub_weapon_4_weight))
        self.label_sub_weapon_4_space.configure(text=self.float_to_str(sub_weapon_4_space))
        self.recalculate()
    ######################################################################
    # Weapon Row 5 processing here                                       #
    ######################################################################

    def add_labels_buttons_weapon_row_5(self, canvas_type):
        up_arrow = "\u2191"
        down_arrow = "\u2193"
        self.label_hidden_weapon_5_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_5_drop_down_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_5_ammo_type = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_5_abbv = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_5_effect = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_5_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_5_damage = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_5_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_5_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_5_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_5_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_5_shots = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_5_ammo_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_5_ammo_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_5_loaded_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_5_loaded_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_5_mag_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_5_mag_weight = tk.Label(canvas_type, text="0", anchor="w")

        self.label_hidden_sub_weapon_5_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_5_drop_down_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_5_ammo_type = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_5_abbv = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_5_effect = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_5_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_5_damage = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_5_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_5_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_5_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_5_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_5_shots = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_5_ammo_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_5_ammo_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_5_loaded_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_5_loaded_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_5_mag_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_5_mag_weight = tk.Label(canvas_type, text="0", anchor="w")

        self.label_sub_weapon_5_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_5_cost.grid(column=self.grid_col_cost,row=self.grid_row_sub_weapon_alt_5, sticky="w")
        self.label_sub_weapon_5_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_5_weight.grid(column=self.grid_col_weight ,row=self.grid_row_sub_weapon_alt_5, sticky="w")
        self.label_sub_weapon_5_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_5_space.grid(column=self.grid_col_spaces,row=self.grid_row_sub_weapon_alt_5, sticky="w")
        self.label_sub_weapon_5_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_5_dp.grid(column=self.grid_col_dp,row=self.grid_row_sub_weapon_alt_5, sticky="w")
        self.label_sub_weapon_5_shots = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_5_shots.grid(column=self.grid_col_max_weight, row=self.grid_row_sub_weapon_alt_5, sticky="w")
        self.label_sub_weapon_5_ammo_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_5_ammo_cost.grid(column=self.grid_col_power_factors,row=self.grid_row_sub_weapon_alt_5, sticky="w")
        self.label_sub_weapon_5_ammo_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_5_ammo_weight.grid(column=self.grid_col_base_mpg,row=self.grid_row_sub_weapon_alt_5, sticky="w")
        self.label_sub_weapon_5_tohit = tk.Label(canvas_type, text="", anchor="w")
        self.label_sub_weapon_5_tohit.grid(column=self.grid_col_test_track_numbers, row = self.grid_row_sub_weapon_alt_5, sticky="w")
        self.label_sub_weapon_5_damage = tk.Label(canvas_type, text="", anchor="w")
        self.label_sub_weapon_5_damage.grid(column=self.grid_col_last_column, row = self.grid_row_sub_weapon_alt_5, sticky="w")

        self.var_sub_weapon_5_qty = tk.IntVar()
        self.entry_sub_weapon_5_qty = ttk.Entry(canvas_type, textvariable=self.var_sub_weapon_5_qty, width=3)
        self.entry_sub_weapon_5_qty.grid(column=self.grid_col_qty,row=self.grid_row_sub_weapon_alt_5, sticky="w")
        self.var_sub_weapon_5_qty.trace_add("write", self.on_update_sub_weapon_5_qty)
        self.var_sub_weapon_ammo_5_qty = tk.IntVar()
        self.entry_sub_weapon_ammo_5_qty = ttk.Entry(canvas_type, textvariable=self.var_sub_weapon_ammo_5_qty, width=3)
        self.entry_sub_weapon_ammo_5_qty.grid(column=self.grid_right_qty,row=self.grid_row_sub_weapon_alt_5, sticky="w")
        self.var_sub_weapon_ammo_5_qty.trace_add("write", self.on_update_sub_weapon_ammo_5_qty)

        self.button_sub_weapon_5_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_sub_weapon_5_qty_up)
        self.button_sub_weapon_5_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_sub_weapon_alt_5, sticky="w")
        self.button_sub_weapon_5_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_sub_weapon_5_qty_down)
        self.button_sub_weapon_5_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_sub_weapon_alt_5, sticky="w")
        self.button_sub_weapon_5_ammo_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_sub_weapon_5_ammo_qty_up)
        self.button_sub_weapon_5_ammo_qty_up.grid(column=self.grid_right_up_button,row=self.grid_row_sub_weapon_alt_5, sticky="w")
        self.button_sub_weapon_5_ammo_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_sub_weapon_5_ammo_qty_down)
        self.button_sub_weapon_5_ammo_qty_down.grid(column=self.grid_right_down_button,row=self.grid_row_sub_weapon_alt_5, sticky="w")

        self.var_sub_weapon_extra_mags_5_qty = tk.IntVar()
        self.entry_sub_weapon_extra_mags_5_qty = ttk.Entry(canvas_type, textvariable=self.var_sub_weapon_extra_mags_5_qty, width=3)
        self.entry_sub_weapon_extra_mags_5_qty.grid(column=self.grid_col_extra_mag_entry,row=self.grid_row_sub_weapon_alt_5, sticky="w")
        self.var_sub_weapon_extra_mags_5_qty.trace_add("write", self.on_update_sub_weapon_extra_mags_5_qty)
        self.button_sub_weapon_extra_mags_5_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_sub_weapon_extra_mags_5_qty_up)
        self.button_sub_weapon_extra_mags_5_qty_up.grid(column=self.grid_col_extra_mag_qty_up,row=self.grid_row_sub_weapon_alt_5, sticky="w")
        self.button_sub_weapon_extra_mags_5_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_sub_weapon_extra_mags_5_qty_down)
        self.button_sub_weapon_extra_mags_5_qty_down.grid(column=self.grid_col_extra_mag_qty_down,row=self.grid_row_sub_weapon_alt_5, sticky="w")

    def add_dropdown_weapon_alt_5_canvas(self, canvas_type):
        self.selected_weapon_alt_5 = tk.StringVar()
        self.selected_weapon_alt_5.set("Weapon")
        options = self.get_weapon_options_alt()
        # Create the dropdown widget
        self.weapon_alt_5_dropdown = ttk.OptionMenu(canvas_type, self.selected_weapon_alt_5, "Weapon", *options) #filled elsewhere
        self.weapon_alt_5_dropdown.grid(column=self.grid_col_item, row=self.grid_row_weapon_alt_5, sticky="w")
        self.selected_weapon_alt_5.trace_add("write", self.on_select_weapon_alt_5_canvas)

    def add_dropdown_sub_weapon_5_canvas(self, row_number: int):
        if self.selected_sub_weapon_5_canvas is not None:
            self.selected_sub_weapon_5_canvas = None
        if self.sub_weapon_dropdown_5_canvas is not None:
            self.sub_weapon_dropdown_5_canvas.grid_forget() #remove it from the screen
            self.sub_weapon_dropdown_5_canvas = None
        self.selected_sub_weapon_5_canvas = tk.StringVar()
        self.selected_sub_weapon_5_canvas.set("Weapon")
        options = self.get_weapon_options_sub_list(input_list=self.temp_dropdown_list)
        self.sub_weapon_dropdown_5_canvas = ttk.OptionMenu(self.canvas_type, self.selected_sub_weapon_5_canvas, "Weapon", *options) #filled elsewhere
        self.sub_weapon_dropdown_5_canvas.grid(column=self.grid_col_item, row=row_number, sticky="w")
        self.selected_sub_weapon_5_canvas.trace_add("write", self.on_select_sub_weapon_alt_5_canvas)

    def on_select_weapon_alt_5_canvas(self, *args):
        selected_value = self.selected_weapon_alt_5.get()
        row_number: int = self.grid_row_sub_weapon_alt_5
        match selected_value:
            case "SMALL BORE WEAPONS":
                self.temp_dropdown_list = self.weapons_small_bore_list
            case "LARGE BORE WEAPONS":
                self.temp_dropdown_list = self.weapons_large_bore_list
            case "GRENADE LAUNCHERS":
                self.temp_dropdown_list = self.weapons_grenade_launchers_list
            case "GRENADE AMMO":
                self.temp_dropdown_list = self.weapons_grenade_ammo_list
            case "ROCKETS":
                self.temp_dropdown_list = self.weapons_rockets_list
            case "ENERGY WEAPONS":
                self.temp_dropdown_list = self.weapons_energy_list
            case "FLAMETHROWERS":
                self.temp_dropdown_list = self.weapons_flamethrower_list
            case "DROPPED GASSES":
                self.temp_dropdown_list = self.weapons_dropped_gas_list
            case "DROPPED LIQUIDS":
                self.temp_dropdown_list = self.weapons_dropped_liquid_list
            case "DROPPED SOLIDS":
                self.temp_dropdown_list = self.weapons_dropped_solid_list
            case "MINEDROPPERS":
                self.temp_dropdown_list = self.weapons_minedroppers_list
            case "DISCHARGERS":
                self.temp_dropdown_list = self.weapons_dischargers_list
        self.add_dropdown_sub_weapon_5_canvas(row_number = row_number)

    def on_select_sub_weapon_alt_5_canvas(self, *args):
        selected_value = self.selected_sub_weapon_5_canvas.get()
        for entry in self.temp_dropdown_list:
            drop_down_name: str = entry.get("Drop-Down Name")
            if selected_value == drop_down_name:
                self.add_to_sub_weapon_row_5(entry)

    def add_to_sub_weapon_row_5(self, entry: dict):
        drop_down_name:       str = entry.get("Drop-Down Name")
        weapon_name:          str = entry.get("Weapon Name") # 'Weapon Name'  # 'Drop-Down Name'
        weapon_ammo_type:     str = entry.get("Ammo Type") # 'Ammo Type'
        weapon_abbv:          str = entry.get("Abbv") # 'Abbv'
        weapon_effect:        str = entry.get("Effect") # 'Effect'
        weapon_to_hit:        str = entry.get("To- Hit") # 'To- Hit'
        weapon_damage:        str = entry.get("Dam") # 'Dam'
        weapon_dp:            str = entry.get("DP") # 'DP'
        weapon_cost:          str = entry.get("Cost") # 'Cost'
        weapon_weight:        str = entry.get("Weight") # 'Weight'
        weapon_space:         str = entry.get("Space") # 'Space'
        weapon_shots:         str = entry.get("Shots") # 'Shots'
        weapon_shot_cost:     str = entry.get("Shot Cost") # 'Shot Cost'
        weapon_shot_weight:   str = entry.get("Shot Weight") # 'Shot Weight'
        weapon_loaded_cost:   str = entry.get("Loaded Cost") # 'Loaded Cost'
        weapon_loaded_weight: str = entry.get("Loaded Weight") # 'Loaded Weight'
        weapon_mag_cost:      str = entry.get("Mag Cost") # 'Mag Cost'
        weapon_mag_weight:    str = entry.get("Mag Weight") # 'Mag Weight'

        self.label_hidden_sub_weapon_5_name.configure(text=str(weapon_name))
        self.label_hidden_sub_weapon_5_drop_down_name.configure(text=str(drop_down_name))
        self.label_hidden_sub_weapon_5_ammo_type.configure(text=str(weapon_ammo_type))
        self.label_hidden_sub_weapon_5_abbv.configure(text=str(weapon_abbv))
        self.label_hidden_sub_weapon_5_effect.configure(text=str(weapon_effect))
        self.label_hidden_sub_weapon_5_to_hit.configure(text=str(weapon_to_hit))
        self.label_hidden_sub_weapon_5_damage.configure(text=str(weapon_damage))
        self.label_hidden_sub_weapon_5_dp.configure(text=str(weapon_dp))
        self.label_hidden_sub_weapon_5_cost.configure(text=str(weapon_cost))
        self.label_hidden_sub_weapon_5_weight.configure(text=str(weapon_weight))
        self.label_hidden_sub_weapon_5_space.configure(text=str(weapon_space))
        self.label_hidden_sub_weapon_5_shots.configure(text=str(weapon_shots))
        self.label_hidden_sub_weapon_5_ammo_cost.configure(text=str(weapon_shot_cost))
        self.label_hidden_sub_weapon_5_ammo_weight.configure(text=str(weapon_shot_weight))
        self.label_hidden_sub_weapon_5_loaded_cost.configure(text=str(weapon_loaded_cost))
        self.label_hidden_sub_weapon_5_loaded_weight.configure(text=str(weapon_loaded_weight))
        self.label_hidden_sub_weapon_5_mag_cost.configure(text=str(weapon_mag_cost))
        self.label_hidden_sub_weapon_5_mag_weight.configure(text=str(weapon_mag_weight))
        self.label_sub_weapon_5_shots.configure(text=str(weapon_shots))
        self.label_sub_weapon_5_ammo_cost.configure(text=str(weapon_shot_cost*self.var_sub_weapon_5_qty.get()))
        self.label_sub_weapon_5_ammo_weight.configure(text=str(weapon_shot_weight*self.var_sub_weapon_5_qty.get()))
        self.label_sub_weapon_5_tohit.configure(text=str(weapon_to_hit))
        self.label_sub_weapon_5_damage.configure(text=str(weapon_damage))
        self.on_update_sub_weapon_5_qty()

    def on_button_sub_weapon_5_qty_up(self, *args):
        sub_weapon_5_qty = self.var_sub_weapon_5_qty.get()
        sub_weapon_5_qty = sub_weapon_5_qty + 1
        self.var_sub_weapon_5_qty.set(value=sub_weapon_5_qty)
        self.on_update_sub_weapon_5_qty()

    def on_button_sub_weapon_5_qty_down(self, *args):
        sub_weapon_5_qty = self.var_sub_weapon_5_qty.get()
        sub_weapon_5_qty = max(sub_weapon_5_qty - 1, 0)
        self.var_sub_weapon_5_qty.set(value=sub_weapon_5_qty)
        self.on_update_sub_weapon_5_qty()

    def on_button_sub_weapon_5_ammo_qty_up(self, *args):
        sub_weapon_5_ammo_qty = self.var_sub_weapon_ammo_5_qty.get()
        sub_weapon_5_ammo_qty = sub_weapon_5_ammo_qty + 1
        self.var_sub_weapon_ammo_5_qty.set(value=sub_weapon_5_ammo_qty)
        self.on_update_sub_weapon_ammo_5_qty()

    def on_button_sub_weapon_5_ammo_qty_down(self, *args):
        sub_weapon_5_ammo_qty = self.var_sub_weapon_ammo_5_qty.get()
        sub_weapon_5_ammo_qty = max(sub_weapon_5_ammo_qty - 1, 0)
        self.var_sub_weapon_ammo_5_qty.set(value=sub_weapon_5_ammo_qty)
        self.on_update_sub_weapon_ammo_5_qty()

    def on_button_sub_weapon_extra_mags_5_qty_up(self, *args):
        sub_weapon_extra_mags_5_qty = self.var_sub_weapon_extra_mags_5_qty.get()
        sub_weapon_extra_mags_5_qty = sub_weapon_extra_mags_5_qty + 1
        self.var_sub_weapon_extra_mags_5_qty.set(value=sub_weapon_extra_mags_5_qty)
        self.on_update_sub_weapon_extra_mags_5_qty()

    def on_button_sub_weapon_extra_mags_5_qty_down(self, *args):
        sub_weapon_extra_mags_5_qty = self.var_sub_weapon_extra_mags_5_qty.get()
        sub_weapon_extra_mags_5_qty = max(sub_weapon_extra_mags_5_qty - 1, 0)
        self.var_sub_weapon_extra_mags_5_qty.set(value=sub_weapon_extra_mags_5_qty)
        self.on_update_sub_weapon_extra_mags_5_qty()

    def on_update_sub_weapon_5_qty(self, *args):
        sub_weapon_5_qty = self.var_sub_weapon_5_qty.get()
        sub_weapon_5_cost   = int(self.label_hidden_sub_weapon_5_cost.cget("text"))
        sub_weapon_5_weight = int(self.label_hidden_sub_weapon_5_weight.cget("text"))
        sub_weapon_5_space  = float(self.label_hidden_sub_weapon_5_space.cget("text"))
        self.label_sub_weapon_5_cost.configure(text=self.float_to_str(sub_weapon_5_cost * sub_weapon_5_qty))
        self.label_sub_weapon_5_weight.configure(text=self.float_to_str(sub_weapon_5_weight * sub_weapon_5_qty))
        self.label_sub_weapon_5_space.configure(text=self.float_to_str(sub_weapon_5_space * sub_weapon_5_qty))
        self.recalculate()

    def on_update_sub_weapon_ammo_5_qty(self, *args):
        sub_weapon_5_ammo_qty = self.var_sub_weapon_ammo_5_qty.get()
        sub_weapon_5_ammo_cost   = float(self.label_hidden_sub_weapon_5_ammo_cost.cget("text"))
        sub_weapon_5_ammo_weight = float(self.label_hidden_sub_weapon_5_ammo_weight.cget("text"))
        self.label_sub_weapon_5_ammo_cost.configure(text=str(sub_weapon_5_ammo_cost * sub_weapon_5_ammo_qty))
        self.label_sub_weapon_5_ammo_weight.configure(text=str(sub_weapon_5_ammo_weight * sub_weapon_5_ammo_qty))
        self.recalculate()

    def on_update_sub_weapon_extra_mags_5_qty(self, *args):
        sub_weapon_extra_mags_5_qty = self.var_sub_weapon_extra_mags_5_qty.get()
        sub_weapon_5_qty    = self.var_sub_weapon_5_qty.get()
        sub_weapon_5_cost   = int(self.label_hidden_sub_weapon_5_cost.cget("text"))
        sub_weapon_5_weight = int(self.label_hidden_sub_weapon_5_weight.cget("text"))
        sub_weapon_5_space  = float(self.label_hidden_sub_weapon_5_space.cget("text"))
        sub_weapon_5_cost   = sub_weapon_5_cost   * sub_weapon_5_qty + (50 * sub_weapon_extra_mags_5_qty)
        sub_weapon_5_weight = sub_weapon_5_weight * sub_weapon_5_qty + (15 * sub_weapon_extra_mags_5_qty)
        sub_weapon_5_space  = sub_weapon_5_space  * sub_weapon_5_qty + sub_weapon_extra_mags_5_qty
        self.label_sub_weapon_5_cost.configure(text=self.float_to_str(sub_weapon_5_cost))
        self.label_sub_weapon_5_weight.configure(text=self.float_to_str(sub_weapon_5_weight))
        self.label_sub_weapon_5_space.configure(text=self.float_to_str(sub_weapon_5_space))
        self.recalculate()

    ######################################################################
    # Weapon Row 6 processing here                                       #
    ######################################################################

    def add_labels_buttons_weapon_row_6(self, canvas_type):
        up_arrow = "\u2191"
        down_arrow = "\u2193"
        self.label_hidden_weapon_6_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_6_drop_down_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_6_ammo_type = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_6_abbv = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_6_effect = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_6_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_6_damage = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_6_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_6_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_6_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_6_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_6_shots = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_6_ammo_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_6_ammo_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_6_loaded_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_6_loaded_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_6_mag_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_6_mag_weight = tk.Label(canvas_type, text="0", anchor="w")

        self.label_hidden_sub_weapon_6_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_6_drop_down_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_6_ammo_type = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_6_abbv = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_6_effect = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_6_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_6_damage = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_6_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_6_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_6_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_6_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_6_shots = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_6_ammo_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_6_ammo_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_6_loaded_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_6_loaded_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_6_mag_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_6_mag_weight = tk.Label(canvas_type, text="0", anchor="w")

        self.label_sub_weapon_6_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_6_cost.grid(column=self.grid_col_cost,row=self.grid_row_sub_weapon_alt_6, sticky="w")
        self.label_sub_weapon_6_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_6_weight.grid(column=self.grid_col_weight ,row=self.grid_row_sub_weapon_alt_6, sticky="w")
        self.label_sub_weapon_6_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_6_space.grid(column=self.grid_col_spaces,row=self.grid_row_sub_weapon_alt_6, sticky="w")
        self.label_sub_weapon_6_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_6_dp.grid(column=self.grid_col_dp,row=self.grid_row_sub_weapon_alt_6, sticky="w")
        self.label_sub_weapon_6_shots = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_6_shots.grid(column=self.grid_col_max_weight, row=self.grid_row_sub_weapon_alt_6, sticky="w")
        self.label_sub_weapon_6_ammo_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_6_ammo_cost.grid(column=self.grid_col_power_factors,row=self.grid_row_sub_weapon_alt_6, sticky="w")
        self.label_sub_weapon_6_ammo_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_6_ammo_weight.grid(column=self.grid_col_base_mpg,row=self.grid_row_sub_weapon_alt_6, sticky="w")
        self.label_sub_weapon_6_tohit = tk.Label(canvas_type, text="", anchor="w")
        self.label_sub_weapon_6_tohit.grid(column=self.grid_col_test_track_numbers, row = self.grid_row_sub_weapon_alt_6, sticky="w")
        self.label_sub_weapon_6_damage = tk.Label(canvas_type, text="", anchor="w")
        self.label_sub_weapon_6_damage.grid(column=self.grid_col_last_column, row = self.grid_row_sub_weapon_alt_6, sticky="w")

        self.var_sub_weapon_6_qty = tk.IntVar()
        self.entry_sub_weapon_6_qty = ttk.Entry(canvas_type, textvariable=self.var_sub_weapon_6_qty, width=3)
        self.entry_sub_weapon_6_qty.grid(column=self.grid_col_qty,row=self.grid_row_sub_weapon_alt_6, sticky="w")
        self.var_sub_weapon_6_qty.trace_add("write", self.on_update_sub_weapon_6_qty)
        self.var_sub_weapon_ammo_6_qty = tk.IntVar()
        self.entry_sub_weapon_ammo_6_qty = ttk.Entry(canvas_type, textvariable=self.var_sub_weapon_ammo_6_qty, width=3)
        self.entry_sub_weapon_ammo_6_qty.grid(column=self.grid_right_qty,row=self.grid_row_sub_weapon_alt_6, sticky="w")
        self.var_sub_weapon_ammo_6_qty.trace_add("write", self.on_update_sub_weapon_ammo_6_qty)

        self.button_sub_weapon_6_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_sub_weapon_6_qty_up)
        self.button_sub_weapon_6_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_sub_weapon_alt_6, sticky="w")
        self.button_sub_weapon_6_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_sub_weapon_6_qty_down)
        self.button_sub_weapon_6_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_sub_weapon_alt_6, sticky="w")
        self.button_sub_weapon_6_ammo_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_sub_weapon_6_ammo_qty_up)
        self.button_sub_weapon_6_ammo_qty_up.grid(column=self.grid_right_up_button,row=self.grid_row_sub_weapon_alt_6, sticky="w")
        self.button_sub_weapon_6_ammo_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_sub_weapon_6_ammo_qty_down)
        self.button_sub_weapon_6_ammo_qty_down.grid(column=self.grid_right_down_button,row=self.grid_row_sub_weapon_alt_6, sticky="w")

        self.var_sub_weapon_extra_mags_6_qty = tk.IntVar()
        self.entry_sub_weapon_extra_mags_6_qty = ttk.Entry(canvas_type, textvariable=self.var_sub_weapon_extra_mags_6_qty, width=3)
        self.entry_sub_weapon_extra_mags_6_qty.grid(column=self.grid_col_extra_mag_entry,row=self.grid_row_sub_weapon_alt_6, sticky="w")
        self.var_sub_weapon_extra_mags_6_qty.trace_add("write", self.on_update_sub_weapon_extra_mags_6_qty)
        self.button_sub_weapon_extra_mags_6_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_sub_weapon_extra_mags_6_qty_up)
        self.button_sub_weapon_extra_mags_6_qty_up.grid(column=self.grid_col_extra_mag_qty_up,row=self.grid_row_sub_weapon_alt_6, sticky="w")
        self.button_sub_weapon_extra_mags_6_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_sub_weapon_extra_mags_6_qty_down)
        self.button_sub_weapon_extra_mags_6_qty_down.grid(column=self.grid_col_extra_mag_qty_down,row=self.grid_row_sub_weapon_alt_6, sticky="w")

    def add_dropdown_weapon_alt_6_canvas(self, canvas_type):
        self.selected_weapon_alt_6 = tk.StringVar()
        self.selected_weapon_alt_6.set("Weapon")
        options = self.get_weapon_options_alt()
        # Create the dropdown widget
        self.weapon_alt_6_dropdown = ttk.OptionMenu(canvas_type, self.selected_weapon_alt_6, "Weapon", *options) #filled elsewhere
        self.weapon_alt_6_dropdown.grid(column=self.grid_col_item, row=self.grid_row_weapon_alt_6, sticky="w")
        self.selected_weapon_alt_6.trace_add("write", self.on_select_weapon_alt_6_canvas)

    def add_dropdown_sub_weapon_6_canvas(self, row_number: int):
        if self.selected_sub_weapon_6_canvas is not None:
            self.selected_sub_weapon_6_canvas = None
        if self.sub_weapon_dropdown_6_canvas is not None:
            self.sub_weapon_dropdown_6_canvas.grid_forget() #remove it from the screen
            self.sub_weapon_dropdown_6_canvas = None
        self.selected_sub_weapon_6_canvas = tk.StringVar()
        self.selected_sub_weapon_6_canvas.set("Weapon")
        options = self.get_weapon_options_sub_list(input_list=self.temp_dropdown_list)
        self.sub_weapon_dropdown_6_canvas = ttk.OptionMenu(self.canvas_type, self.selected_sub_weapon_6_canvas, "Weapon", *options) #filled elsewhere
        self.sub_weapon_dropdown_6_canvas.grid(column=self.grid_col_item, row=row_number, sticky="w")
        self.selected_sub_weapon_6_canvas.trace_add("write", self.on_select_sub_weapon_alt_6_canvas)

    def on_select_weapon_alt_6_canvas(self, *args):
        selected_value = self.selected_weapon_alt_6.get()
        row_number: int = self.grid_row_sub_weapon_alt_6
        match selected_value:
            case "SMALL BORE WEAPONS":
                self.temp_dropdown_list = self.weapons_small_bore_list
            case "LARGE BORE WEAPONS":
                self.temp_dropdown_list = self.weapons_large_bore_list
            case "GRENADE LAUNCHERS":
                self.temp_dropdown_list = self.weapons_grenade_launchers_list
            case "GRENADE AMMO":
                self.temp_dropdown_list = self.weapons_grenade_ammo_list
            case "ROCKETS":
                self.temp_dropdown_list = self.weapons_rockets_list
            case "ENERGY WEAPONS":
                self.temp_dropdown_list = self.weapons_energy_list
            case "FLAMETHROWERS":
                self.temp_dropdown_list = self.weapons_flamethrower_list
            case "DROPPED GASSES":
                self.temp_dropdown_list = self.weapons_dropped_gas_list
            case "DROPPED LIQUIDS":
                self.temp_dropdown_list = self.weapons_dropped_liquid_list
            case "DROPPED SOLIDS":
                self.temp_dropdown_list = self.weapons_dropped_solid_list
            case "MINEDROPPERS":
                self.temp_dropdown_list = self.weapons_minedroppers_list
            case "DISCHARGERS":
                self.temp_dropdown_list = self.weapons_dischargers_list
        self.add_dropdown_sub_weapon_6_canvas(row_number = row_number)

    def on_select_sub_weapon_alt_6_canvas(self, *args):
        selected_value = self.selected_sub_weapon_6_canvas.get()
        for entry in self.temp_dropdown_list:
            drop_down_name: str = entry.get("Drop-Down Name")
            if selected_value == drop_down_name:
                self.add_to_sub_weapon_row_6(entry)

    def add_to_sub_weapon_row_6(self, entry: dict):
        drop_down_name:       str = entry.get("Drop-Down Name")
        weapon_name:          str = entry.get("Weapon Name") # 'Weapon Name'  # 'Drop-Down Name'
        weapon_ammo_type:     str = entry.get("Ammo Type") # 'Ammo Type'
        weapon_abbv:          str = entry.get("Abbv") # 'Abbv'
        weapon_effect:        str = entry.get("Effect") # 'Effect'
        weapon_to_hit:        str = entry.get("To- Hit") # 'To- Hit'
        weapon_damage:        str = entry.get("Dam") # 'Dam'
        weapon_dp:            str = entry.get("DP") # 'DP'
        weapon_cost:          str = entry.get("Cost") # 'Cost'
        weapon_weight:        str = entry.get("Weight") # 'Weight'
        weapon_space:         str = entry.get("Space") # 'Space'
        weapon_shots:         str = entry.get("Shots") # 'Shots'
        weapon_shot_cost:     str = entry.get("Shot Cost") # 'Shot Cost'
        weapon_shot_weight:   str = entry.get("Shot Weight") # 'Shot Weight'
        weapon_loaded_cost:   str = entry.get("Loaded Cost") # 'Loaded Cost'
        weapon_loaded_weight: str = entry.get("Loaded Weight") # 'Loaded Weight'
        weapon_mag_cost:      str = entry.get("Mag Cost") # 'Mag Cost'
        weapon_mag_weight:    str = entry.get("Mag Weight") # 'Mag Weight'

        self.label_hidden_sub_weapon_6_name.configure(text=str(weapon_name))
        self.label_hidden_sub_weapon_6_drop_down_name.configure(text=str(drop_down_name))
        self.label_hidden_sub_weapon_6_ammo_type.configure(text=str(weapon_ammo_type))
        self.label_hidden_sub_weapon_6_abbv.configure(text=str(weapon_abbv))
        self.label_hidden_sub_weapon_6_effect.configure(text=str(weapon_effect))
        self.label_hidden_sub_weapon_6_to_hit.configure(text=str(weapon_to_hit))
        self.label_hidden_sub_weapon_6_damage.configure(text=str(weapon_damage))
        self.label_hidden_sub_weapon_6_dp.configure(text=str(weapon_dp))
        self.label_hidden_sub_weapon_6_cost.configure(text=str(weapon_cost))
        self.label_hidden_sub_weapon_6_weight.configure(text=str(weapon_weight))
        self.label_hidden_sub_weapon_6_space.configure(text=str(weapon_space))
        self.label_hidden_sub_weapon_6_shots.configure(text=str(weapon_shots))
        self.label_hidden_sub_weapon_6_ammo_cost.configure(text=str(weapon_shot_cost))
        self.label_hidden_sub_weapon_6_ammo_weight.configure(text=str(weapon_shot_weight))
        self.label_hidden_sub_weapon_6_loaded_cost.configure(text=str(weapon_loaded_cost))
        self.label_hidden_sub_weapon_6_loaded_weight.configure(text=str(weapon_loaded_weight))
        self.label_hidden_sub_weapon_6_mag_cost.configure(text=str(weapon_mag_cost))
        self.label_hidden_sub_weapon_6_mag_weight.configure(text=str(weapon_mag_weight))
        self.label_sub_weapon_6_shots.configure(text=str(weapon_shots))
        self.label_sub_weapon_6_ammo_cost.configure(text=str(weapon_shot_cost*self.var_sub_weapon_6_qty.get()))
        self.label_sub_weapon_6_ammo_weight.configure(text=str(weapon_shot_weight*self.var_sub_weapon_6_qty.get()))
        self.on_update_sub_weapon_6_qty()

    def on_button_sub_weapon_6_qty_up(self, *args):
        sub_weapon_6_qty = self.var_sub_weapon_6_qty.get()
        sub_weapon_6_qty = sub_weapon_6_qty + 1
        self.var_sub_weapon_6_qty.set(value=sub_weapon_6_qty)
        self.on_update_sub_weapon_6_qty()

    def on_button_sub_weapon_6_qty_down(self, *args):
        sub_weapon_6_qty = self.var_sub_weapon_6_qty.get()
        sub_weapon_6_qty = max(sub_weapon_6_qty - 1, 0)
        self.var_sub_weapon_6_qty.set(value=sub_weapon_6_qty)
        self.on_update_sub_weapon_6_qty()

    def on_button_sub_weapon_6_ammo_qty_up(self, *args):
        sub_weapon_6_ammo_qty = self.var_sub_weapon_ammo_6_qty.get()
        sub_weapon_6_ammo_qty = sub_weapon_6_ammo_qty + 1
        self.var_sub_weapon_ammo_6_qty.set(value=sub_weapon_6_ammo_qty)
        self.on_update_sub_weapon_ammo_6_qty()

    def on_button_sub_weapon_6_ammo_qty_down(self, *args):
        sub_weapon_6_ammo_qty = self.var_sub_weapon_ammo_6_qty.get()
        sub_weapon_6_ammo_qty = max(sub_weapon_6_ammo_qty - 1, 0)
        self.var_sub_weapon_ammo_6_qty.set(value=sub_weapon_6_ammo_qty)
        self.on_update_sub_weapon_ammo_6_qty()

    def on_button_sub_weapon_extra_mags_6_qty_up(self, *args):
        sub_weapon_extra_mags_6_qty = self.var_sub_weapon_extra_mags_6_qty.get()
        sub_weapon_extra_mags_6_qty = sub_weapon_extra_mags_6_qty + 1
        self.var_sub_weapon_extra_mags_6_qty.set(value=sub_weapon_extra_mags_6_qty)
        self.on_update_sub_weapon_extra_mags_6_qty()

    def on_button_sub_weapon_extra_mags_6_qty_down(self, *args):
        sub_weapon_extra_mags_6_qty = self.var_sub_weapon_extra_mags_6_qty.get()
        sub_weapon_extra_mags_6_qty = max(sub_weapon_extra_mags_6_qty - 1, 0)
        self.var_sub_weapon_extra_mags_6_qty.set(value=sub_weapon_extra_mags_6_qty)
        self.on_update_sub_weapon_extra_mags_6_qty()

    def on_update_sub_weapon_6_qty(self, *args):
        sub_weapon_6_qty = self.var_sub_weapon_6_qty.get()
        sub_weapon_6_cost   = int(self.label_hidden_sub_weapon_6_cost.cget("text"))
        sub_weapon_6_weight = int(self.label_hidden_sub_weapon_6_weight.cget("text"))
        sub_weapon_6_space  = float(self.label_hidden_sub_weapon_6_space.cget("text"))
        self.label_sub_weapon_6_cost.configure(text=self.float_to_str(sub_weapon_6_cost * sub_weapon_6_qty))
        self.label_sub_weapon_6_weight.configure(text=self.float_to_str(sub_weapon_6_weight * sub_weapon_6_qty))
        self.label_sub_weapon_6_space.configure(text=self.float_to_str(sub_weapon_6_space * sub_weapon_6_qty))
        self.recalculate()

    def on_update_sub_weapon_ammo_6_qty(self, *args):
        sub_weapon_6_ammo_qty = self.var_sub_weapon_ammo_6_qty.get()
        sub_weapon_6_ammo_cost   = float(self.label_hidden_sub_weapon_6_ammo_cost.cget("text"))
        sub_weapon_6_ammo_weight = float(self.label_hidden_sub_weapon_6_ammo_weight.cget("text"))
        self.label_sub_weapon_6_ammo_cost.configure(text=str(sub_weapon_6_ammo_cost * sub_weapon_6_ammo_qty))
        self.label_sub_weapon_6_ammo_weight.configure(text=str(sub_weapon_6_ammo_weight * sub_weapon_6_ammo_qty))
        self.recalculate()

    def on_update_sub_weapon_extra_mags_6_qty(self, *args):
        sub_weapon_extra_mags_6_qty = self.var_sub_weapon_extra_mags_6_qty.get()
        sub_weapon_6_qty    = self.var_sub_weapon_6_qty.get()
        sub_weapon_6_cost   = int(self.label_hidden_sub_weapon_6_cost.cget("text"))
        sub_weapon_6_weight = int(self.label_hidden_sub_weapon_6_weight.cget("text"))
        sub_weapon_6_space  = float(self.label_hidden_sub_weapon_6_space.cget("text"))
        sub_weapon_6_cost   = sub_weapon_6_cost   * sub_weapon_6_qty + (50 * sub_weapon_extra_mags_6_qty)
        sub_weapon_6_weight = sub_weapon_6_weight * sub_weapon_6_qty + (15 * sub_weapon_extra_mags_6_qty)
        sub_weapon_6_space  = sub_weapon_6_space  * sub_weapon_6_qty + sub_weapon_extra_mags_6_qty
        self.label_sub_weapon_6_cost.configure(text=self.float_to_str(sub_weapon_6_cost))
        self.label_sub_weapon_6_weight.configure(text=self.float_to_str(sub_weapon_6_weight))
        self.label_sub_weapon_6_space.configure(text=self.float_to_str(sub_weapon_6_space))
        self.recalculate()

    ######################################################################
    # Weapon Row 7 processing here                                       #
    ######################################################################

    def add_labels_buttons_weapon_row_7(self, canvas_type):
        up_arrow = "\u2191"
        down_arrow = "\u2193"
        self.label_hidden_weapon_7_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_7_drop_down_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_7_ammo_type = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_7_abbv = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_7_effect = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_7_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_7_damage = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_7_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_7_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_7_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_7_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_7_shots = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_7_ammo_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_7_ammo_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_7_loaded_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_7_loaded_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_7_mag_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_7_mag_weight = tk.Label(canvas_type, text="0", anchor="w")

        self.label_hidden_sub_weapon_7_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_7_drop_down_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_7_ammo_type = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_7_abbv = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_7_effect = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_7_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_7_damage = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_7_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_7_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_7_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_7_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_7_shots = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_7_ammo_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_7_ammo_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_7_loaded_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_7_loaded_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_7_mag_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_7_mag_weight = tk.Label(canvas_type, text="0", anchor="w")

        self.label_sub_weapon_7_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_7_cost.grid(column=self.grid_col_cost,row=self.grid_row_sub_weapon_alt_7, sticky="w")
        self.label_sub_weapon_7_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_7_weight.grid(column=self.grid_col_weight ,row=self.grid_row_sub_weapon_alt_7, sticky="w")
        self.label_sub_weapon_7_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_7_space.grid(column=self.grid_col_spaces,row=self.grid_row_sub_weapon_alt_7, sticky="w")
        self.label_sub_weapon_7_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_7_dp.grid(column=self.grid_col_dp,row=self.grid_row_sub_weapon_alt_7, sticky="w")
        self.label_sub_weapon_7_shots = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_7_shots.grid(column=self.grid_col_max_weight, row=self.grid_row_sub_weapon_alt_7, sticky="w")
        self.label_sub_weapon_7_ammo_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_7_ammo_cost.grid(column=self.grid_col_power_factors,row=self.grid_row_sub_weapon_alt_7, sticky="w")
        self.label_sub_weapon_7_ammo_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_7_ammo_weight.grid(column=self.grid_col_base_mpg,row=self.grid_row_sub_weapon_alt_7, sticky="w")
        self.label_sub_weapon_7_tohit = tk.Label(canvas_type, text="", anchor="w")
        self.label_sub_weapon_7_tohit.grid(column=self.grid_col_test_track_numbers, row = self.grid_row_sub_weapon_alt_7, sticky="w")
        self.label_sub_weapon_7_damage = tk.Label(canvas_type, text="", anchor="w")
        self.label_sub_weapon_7_damage.grid(column=self.grid_col_last_column, row = self.grid_row_sub_weapon_alt_7, sticky="w")

        self.var_sub_weapon_7_qty = tk.IntVar()
        self.entry_sub_weapon_7_qty = ttk.Entry(canvas_type, textvariable=self.var_sub_weapon_7_qty, width=3)
        self.entry_sub_weapon_7_qty.grid(column=self.grid_col_qty,row=self.grid_row_sub_weapon_alt_7, sticky="w")
        self.var_sub_weapon_7_qty.trace_add("write", self.on_update_sub_weapon_7_qty)
        self.var_sub_weapon_ammo_7_qty = tk.IntVar()
        self.entry_sub_weapon_ammo_7_qty = ttk.Entry(canvas_type, textvariable=self.var_sub_weapon_ammo_7_qty, width=3)
        self.entry_sub_weapon_ammo_7_qty.grid(column=self.grid_right_qty,row=self.grid_row_sub_weapon_alt_7, sticky="w")
        self.var_sub_weapon_ammo_7_qty.trace_add("write", self.on_update_sub_weapon_ammo_7_qty)

        self.button_sub_weapon_7_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_sub_weapon_7_qty_up)
        self.button_sub_weapon_7_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_sub_weapon_alt_7, sticky="w")
        self.button_sub_weapon_7_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_sub_weapon_7_qty_down)
        self.button_sub_weapon_7_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_sub_weapon_alt_7, sticky="w")
        self.button_sub_weapon_7_ammo_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_sub_weapon_7_ammo_qty_up)
        self.button_sub_weapon_7_ammo_qty_up.grid(column=self.grid_right_up_button,row=self.grid_row_sub_weapon_alt_7, sticky="w")
        self.button_sub_weapon_7_ammo_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_sub_weapon_7_ammo_qty_down)
        self.button_sub_weapon_7_ammo_qty_down.grid(column=self.grid_right_down_button,row=self.grid_row_sub_weapon_alt_7, sticky="w")

        self.var_sub_weapon_extra_mags_7_qty = tk.IntVar()
        self.entry_sub_weapon_extra_mags_7_qty = ttk.Entry(canvas_type, textvariable=self.var_sub_weapon_extra_mags_7_qty, width=3)
        self.entry_sub_weapon_extra_mags_7_qty.grid(column=self.grid_col_extra_mag_entry,row=self.grid_row_sub_weapon_alt_7, sticky="w")
        self.var_sub_weapon_extra_mags_7_qty.trace_add("write", self.on_update_sub_weapon_extra_mags_7_qty)
        self.button_sub_weapon_extra_mags_7_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_sub_weapon_extra_mags_7_qty_up)
        self.button_sub_weapon_extra_mags_7_qty_up.grid(column=self.grid_col_extra_mag_qty_up,row=self.grid_row_sub_weapon_alt_7, sticky="w")
        self.button_sub_weapon_extra_mags_7_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_sub_weapon_extra_mags_7_qty_down)
        self.button_sub_weapon_extra_mags_7_qty_down.grid(column=self.grid_col_extra_mag_qty_down,row=self.grid_row_sub_weapon_alt_7, sticky="w")

    def add_dropdown_weapon_alt_7_canvas(self, canvas_type):
        self.selected_weapon_alt_7 = tk.StringVar()
        self.selected_weapon_alt_7.set("Weapon")
        options = self.get_weapon_options_alt()
        # Create the dropdown widget
        self.weapon_alt_7_dropdown = ttk.OptionMenu(canvas_type, self.selected_weapon_alt_7, "Weapon", *options) #filled elsewhere
        self.weapon_alt_7_dropdown.grid(column=self.grid_col_item, row=self.grid_row_weapon_alt_7, sticky="w")
        self.selected_weapon_alt_7.trace_add("write", self.on_select_weapon_alt_7_canvas)

    def add_dropdown_sub_weapon_7_canvas(self, row_number: int):
        if self.selected_sub_weapon_7_canvas is not None:
            self.selected_sub_weapon_7_canvas = None
        if self.sub_weapon_dropdown_7_canvas is not None:
            self.sub_weapon_dropdown_7_canvas.grid_forget() #remove it from the screen
            self.sub_weapon_dropdown_7_canvas = None
        self.selected_sub_weapon_7_canvas = tk.StringVar()
        self.selected_sub_weapon_7_canvas.set("Weapon")
        options = self.get_weapon_options_sub_list(input_list=self.temp_dropdown_list)
        self.sub_weapon_dropdown_7_canvas = ttk.OptionMenu(self.canvas_type, self.selected_sub_weapon_7_canvas, "Weapon", *options) #filled elsewhere
        self.sub_weapon_dropdown_7_canvas.grid(column=self.grid_col_item, row=row_number, sticky="w")
        self.selected_sub_weapon_7_canvas.trace_add("write", self.on_select_sub_weapon_alt_7_canvas)

    def on_select_weapon_alt_7_canvas(self, *args):
        selected_value = self.selected_weapon_alt_7.get()
        row_number: int = self.grid_row_sub_weapon_alt_7
        match selected_value:
            case "SMALL BORE WEAPONS":
                self.temp_dropdown_list = self.weapons_small_bore_list
            case "LARGE BORE WEAPONS":
                self.temp_dropdown_list = self.weapons_large_bore_list
            case "GRENADE LAUNCHERS":
                self.temp_dropdown_list = self.weapons_grenade_launchers_list
            case "GRENADE AMMO":
                self.temp_dropdown_list = self.weapons_grenade_ammo_list
            case "ROCKETS":
                self.temp_dropdown_list = self.weapons_rockets_list
            case "ENERGY WEAPONS":
                self.temp_dropdown_list = self.weapons_energy_list
            case "FLAMETHROWERS":
                self.temp_dropdown_list = self.weapons_flamethrower_list
            case "DROPPED GASSES":
                self.temp_dropdown_list = self.weapons_dropped_gas_list
            case "DROPPED LIQUIDS":
                self.temp_dropdown_list = self.weapons_dropped_liquid_list
            case "DROPPED SOLIDS":
                self.temp_dropdown_list = self.weapons_dropped_solid_list
            case "MINEDROPPERS":
                self.temp_dropdown_list = self.weapons_minedroppers_list
            case "DISCHARGERS":
                self.temp_dropdown_list = self.weapons_dischargers_list
        self.add_dropdown_sub_weapon_7_canvas(row_number = row_number)

    def on_select_sub_weapon_alt_7_canvas(self, *args):
        selected_value = self.selected_sub_weapon_7_canvas.get()
        for entry in self.temp_dropdown_list:
            drop_down_name: str = entry.get("Drop-Down Name")
            if selected_value == drop_down_name:
                self.add_to_sub_weapon_row_7(entry)

    def add_to_sub_weapon_row_7(self, entry: dict):
        drop_down_name:       str = entry.get("Drop-Down Name")
        weapon_name:          str = entry.get("Weapon Name") # 'Weapon Name'  # 'Drop-Down Name'
        weapon_ammo_type:     str = entry.get("Ammo Type") # 'Ammo Type'
        weapon_abbv:          str = entry.get("Abbv") # 'Abbv'
        weapon_effect:        str = entry.get("Effect") # 'Effect'
        weapon_to_hit:        str = entry.get("To- Hit") # 'To- Hit'
        weapon_damage:        str = entry.get("Dam") # 'Dam'
        weapon_dp:            str = entry.get("DP") # 'DP'
        weapon_cost:          str = entry.get("Cost") # 'Cost'
        weapon_weight:        str = entry.get("Weight") # 'Weight'
        weapon_space:         str = entry.get("Space") # 'Space'
        weapon_shots:         str = entry.get("Shots") # 'Shots'
        weapon_shot_cost:     str = entry.get("Shot Cost") # 'Shot Cost'
        weapon_shot_weight:   str = entry.get("Shot Weight") # 'Shot Weight'
        weapon_loaded_cost:   str = entry.get("Loaded Cost") # 'Loaded Cost'
        weapon_loaded_weight: str = entry.get("Loaded Weight") # 'Loaded Weight'
        weapon_mag_cost:      str = entry.get("Mag Cost") # 'Mag Cost'
        weapon_mag_weight:    str = entry.get("Mag Weight") # 'Mag Weight'

        self.label_hidden_sub_weapon_7_name.configure(text=str(weapon_name))
        self.label_hidden_sub_weapon_7_drop_down_name.configure(text=str(drop_down_name))
        self.label_hidden_sub_weapon_7_ammo_type.configure(text=str(weapon_ammo_type))
        self.label_hidden_sub_weapon_7_abbv.configure(text=str(weapon_abbv))
        self.label_hidden_sub_weapon_7_effect.configure(text=str(weapon_effect))
        self.label_hidden_sub_weapon_7_to_hit.configure(text=str(weapon_to_hit))
        self.label_hidden_sub_weapon_7_damage.configure(text=str(weapon_damage))
        self.label_hidden_sub_weapon_7_dp.configure(text=str(weapon_dp))
        self.label_hidden_sub_weapon_7_cost.configure(text=str(weapon_cost))
        self.label_hidden_sub_weapon_7_weight.configure(text=str(weapon_weight))
        self.label_hidden_sub_weapon_7_space.configure(text=str(weapon_space))
        self.label_hidden_sub_weapon_7_shots.configure(text=str(weapon_shots))
        self.label_hidden_sub_weapon_7_ammo_cost.configure(text=str(weapon_shot_cost))
        self.label_hidden_sub_weapon_7_ammo_weight.configure(text=str(weapon_shot_weight))
        self.label_hidden_sub_weapon_7_loaded_cost.configure(text=str(weapon_loaded_cost))
        self.label_hidden_sub_weapon_7_loaded_weight.configure(text=str(weapon_loaded_weight))
        self.label_hidden_sub_weapon_7_mag_cost.configure(text=str(weapon_mag_cost))
        self.label_hidden_sub_weapon_7_mag_weight.configure(text=str(weapon_mag_weight))
        self.label_sub_weapon_7_shots.configure(text=str(weapon_shots))
        self.label_sub_weapon_7_ammo_cost.configure(text=str(weapon_shot_cost))
        self.label_sub_weapon_7_ammo_weight.configure(text=str(weapon_shot_weight))
        self.on_update_sub_weapon_7_qty()

    def on_button_sub_weapon_7_qty_up(self, *args):
        sub_weapon_7_qty = self.var_sub_weapon_7_qty.get()
        sub_weapon_7_qty = sub_weapon_7_qty + 1
        self.var_sub_weapon_7_qty.set(value=sub_weapon_7_qty)
        self.on_update_sub_weapon_7_qty()

    def on_button_sub_weapon_7_qty_down(self, *args):
        sub_weapon_7_qty = self.var_sub_weapon_7_qty.get()
        sub_weapon_7_qty = max(sub_weapon_7_qty - 1, 0)
        self.var_sub_weapon_7_qty.set(value=sub_weapon_7_qty)
        self.on_update_sub_weapon_7_qty()

    def on_button_sub_weapon_7_ammo_qty_up(self, *args):
        sub_weapon_7_ammo_qty = self.var_sub_weapon_ammo_7_qty.get()
        sub_weapon_7_ammo_qty = sub_weapon_7_ammo_qty + 1
        self.var_sub_weapon_ammo_7_qty.set(value=sub_weapon_7_ammo_qty)
        self.on_update_sub_weapon_ammo_7_qty()

    def on_button_sub_weapon_7_ammo_qty_down(self, *args):
        sub_weapon_7_ammo_qty = self.var_sub_weapon_ammo_7_qty.get()
        sub_weapon_7_ammo_qty = max(sub_weapon_7_ammo_qty - 1, 0)
        self.var_sub_weapon_ammo_7_qty.set(value=sub_weapon_7_ammo_qty)
        self.on_update_sub_weapon_ammo_7_qty()

    def on_button_sub_weapon_extra_mags_7_qty_up(self, *args):
        sub_weapon_extra_mags_7_qty = self.var_sub_weapon_extra_mags_7_qty.get()
        sub_weapon_extra_mags_7_qty = sub_weapon_extra_mags_7_qty + 1
        self.var_sub_weapon_extra_mags_7_qty.set(value=sub_weapon_extra_mags_7_qty)
        self.on_update_sub_weapon_extra_mags_7_qty()

    def on_button_sub_weapon_extra_mags_7_qty_down(self, *args):
        sub_weapon_extra_mags_7_qty = self.var_sub_weapon_extra_mags_7_qty.get()
        sub_weapon_extra_mags_7_qty = max(sub_weapon_extra_mags_7_qty - 1, 0)
        self.var_sub_weapon_extra_mags_7_qty.set(value=sub_weapon_extra_mags_7_qty)
        self.on_update_sub_weapon_extra_mags_7_qty()

    def on_update_sub_weapon_7_qty(self, *args):
        sub_weapon_7_qty = self.var_sub_weapon_7_qty.get()
        sub_weapon_7_cost   = int(self.label_hidden_sub_weapon_7_cost.cget("text"))
        sub_weapon_7_weight = int(self.label_hidden_sub_weapon_7_weight.cget("text"))
        sub_weapon_7_space  = float(self.label_hidden_sub_weapon_7_space.cget("text"))
        self.label_sub_weapon_7_cost.configure(text=self.float_to_str(sub_weapon_7_cost * sub_weapon_7_qty))
        self.label_sub_weapon_7_weight.configure(text=self.float_to_str(sub_weapon_7_weight * sub_weapon_7_qty))
        self.label_sub_weapon_7_space.configure(text=self.float_to_str(sub_weapon_7_space * sub_weapon_7_qty))
        self.recalculate()

    def on_update_sub_weapon_ammo_7_qty(self, *args):
        sub_weapon_7_ammo_qty = self.var_sub_weapon_ammo_7_qty.get()
        sub_weapon_7_ammo_cost   = float(self.label_hidden_sub_weapon_7_ammo_cost.cget("text"))
        sub_weapon_7_ammo_weight = float(self.label_hidden_sub_weapon_7_ammo_weight.cget("text"))
        self.label_sub_weapon_7_ammo_cost.configure(text=str(sub_weapon_7_ammo_cost * sub_weapon_7_ammo_qty))
        self.label_sub_weapon_7_ammo_weight.configure(text=str(sub_weapon_7_ammo_weight * sub_weapon_7_ammo_qty))
        self.recalculate()

    def on_update_sub_weapon_extra_mags_7_qty(self, *args):
        sub_weapon_extra_mags_7_qty = self.var_sub_weapon_extra_mags_7_qty.get()
        sub_weapon_7_qty    = self.var_sub_weapon_7_qty.get()
        sub_weapon_7_cost   = int(self.label_hidden_sub_weapon_7_cost.cget("text"))
        sub_weapon_7_weight = int(self.label_hidden_sub_weapon_7_weight.cget("text"))
        sub_weapon_7_space  = float(self.label_hidden_sub_weapon_7_space.cget("text"))
        sub_weapon_7_cost   = sub_weapon_7_cost   * sub_weapon_7_qty + (50 * sub_weapon_extra_mags_7_qty)
        sub_weapon_7_weight = sub_weapon_7_weight * sub_weapon_7_qty + (15 * sub_weapon_extra_mags_7_qty)
        sub_weapon_7_space  = sub_weapon_7_space  * sub_weapon_7_qty + sub_weapon_extra_mags_7_qty
        self.label_sub_weapon_7_cost.configure(text=self.float_to_str(sub_weapon_7_cost))
        self.label_sub_weapon_7_weight.configure(text=self.float_to_str(sub_weapon_7_weight))
        self.label_sub_weapon_7_space.configure(text=self.float_to_str(sub_weapon_7_space))
        self.recalculate()

    ######################################################################
    # Weapon Row 8 processing here                                       #
    ######################################################################

    def add_labels_buttons_weapon_row_8(self, canvas_type):
        up_arrow = "\u2191"
        down_arrow = "\u2193"
        self.label_hidden_weapon_8_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_8_drop_down_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_8_ammo_type = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_8_abbv = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_8_effect = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_8_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_8_damage = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_8_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_8_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_8_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_8_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_8_shots = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_8_ammo_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_8_ammo_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_8_loaded_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_8_loaded_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_8_mag_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_8_mag_weight = tk.Label(canvas_type, text="0", anchor="w")

        self.label_hidden_sub_weapon_8_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_8_drop_down_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_8_ammo_type = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_8_abbv = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_8_effect = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_8_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_8_damage = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_8_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_8_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_8_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_8_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_8_shots = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_8_ammo_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_8_ammo_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_8_loaded_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_8_loaded_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_8_mag_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_8_mag_weight = tk.Label(canvas_type, text="0", anchor="w")

        self.label_sub_weapon_8_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_8_cost.grid(column=self.grid_col_cost,row=self.grid_row_sub_weapon_alt_8, sticky="w")
        self.label_sub_weapon_8_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_8_weight.grid(column=self.grid_col_weight ,row=self.grid_row_sub_weapon_alt_8, sticky="w")
        self.label_sub_weapon_8_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_8_space.grid(column=self.grid_col_spaces,row=self.grid_row_sub_weapon_alt_8, sticky="w")
        self.label_sub_weapon_8_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_8_dp.grid(column=self.grid_col_dp,row=self.grid_row_sub_weapon_alt_8, sticky="w")
        self.label_sub_weapon_8_shots = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_8_shots.grid(column=self.grid_col_max_weight, row=self.grid_row_sub_weapon_alt_8, sticky="w")
        self.label_sub_weapon_8_ammo_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_8_ammo_cost.grid(column=self.grid_col_power_factors,row=self.grid_row_sub_weapon_alt_8, sticky="w")
        self.label_sub_weapon_8_ammo_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_8_ammo_weight.grid(column=self.grid_col_base_mpg,row=self.grid_row_sub_weapon_alt_8, sticky="w")
        self.label_sub_weapon_8_tohit = tk.Label(canvas_type, text="", anchor="w")
        self.label_sub_weapon_8_tohit.grid(column=self.grid_col_test_track_numbers, row = self.grid_row_sub_weapon_alt_8, sticky="w")
        self.label_sub_weapon_8_damage = tk.Label(canvas_type, text="", anchor="w")
        self.label_sub_weapon_8_damage.grid(column=self.grid_col_last_column, row = self.grid_row_sub_weapon_alt_8, sticky="w")

        self.var_sub_weapon_8_qty = tk.IntVar()
        self.entry_sub_weapon_8_qty = ttk.Entry(canvas_type, textvariable=self.var_sub_weapon_8_qty, width=3)
        self.entry_sub_weapon_8_qty.grid(column=self.grid_col_qty,row=self.grid_row_sub_weapon_alt_8, sticky="w")
        self.var_sub_weapon_8_qty.trace_add("write", self.on_update_sub_weapon_8_qty)
        self.var_sub_weapon_ammo_8_qty = tk.IntVar()
        self.entry_sub_weapon_ammo_8_qty = ttk.Entry(canvas_type, textvariable=self.var_sub_weapon_ammo_8_qty, width=3)
        self.entry_sub_weapon_ammo_8_qty.grid(column=self.grid_right_qty,row=self.grid_row_sub_weapon_alt_8, sticky="w")
        self.var_sub_weapon_ammo_8_qty.trace_add("write", self.on_update_sub_weapon_ammo_8_qty)

        self.button_sub_weapon_8_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_sub_weapon_8_qty_up)
        self.button_sub_weapon_8_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_sub_weapon_alt_8, sticky="w")
        self.button_sub_weapon_8_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_sub_weapon_8_qty_down)
        self.button_sub_weapon_8_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_sub_weapon_alt_8, sticky="w")
        self.button_sub_weapon_8_ammo_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_sub_weapon_8_ammo_qty_up)
        self.button_sub_weapon_8_ammo_qty_up.grid(column=self.grid_right_up_button,row=self.grid_row_sub_weapon_alt_8, sticky="w")
        self.button_sub_weapon_8_ammo_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_sub_weapon_8_ammo_qty_down)
        self.button_sub_weapon_8_ammo_qty_down.grid(column=self.grid_right_down_button,row=self.grid_row_sub_weapon_alt_8, sticky="w")

        self.var_sub_weapon_extra_mags_8_qty = tk.IntVar()
        self.entry_sub_weapon_extra_mags_8_qty = ttk.Entry(canvas_type, textvariable=self.var_sub_weapon_extra_mags_8_qty, width=3)
        self.entry_sub_weapon_extra_mags_8_qty.grid(column=self.grid_col_extra_mag_entry,row=self.grid_row_sub_weapon_alt_8, sticky="w")
        self.var_sub_weapon_extra_mags_8_qty.trace_add("write", self.on_update_sub_weapon_extra_mags_8_qty)
        self.button_sub_weapon_extra_mags_8_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_sub_weapon_extra_mags_8_qty_up)
        self.button_sub_weapon_extra_mags_8_qty_up.grid(column=self.grid_col_extra_mag_qty_up,row=self.grid_row_sub_weapon_alt_8, sticky="w")
        self.button_sub_weapon_extra_mags_8_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_sub_weapon_extra_mags_8_qty_down)
        self.button_sub_weapon_extra_mags_8_qty_down.grid(column=self.grid_col_extra_mag_qty_down,row=self.grid_row_sub_weapon_alt_8, sticky="w")

    def add_dropdown_weapon_alt_8_canvas(self, canvas_type):
        self.selected_weapon_alt_8 = tk.StringVar()
        self.selected_weapon_alt_8.set("Weapon")
        options = self.get_weapon_options_alt()
        # Create the dropdown widget
        self.weapon_alt_8_dropdown = ttk.OptionMenu(canvas_type, self.selected_weapon_alt_8, "Weapon", *options) #filled elsewhere
        self.weapon_alt_8_dropdown.grid(column=self.grid_col_item, row=self.grid_row_weapon_alt_8, sticky="w")
        self.selected_weapon_alt_8.trace_add("write", self.on_select_weapon_alt_8_canvas)

    def add_dropdown_sub_weapon_8_canvas(self, row_number: int):
        if self.selected_sub_weapon_8_canvas is not None:
            self.selected_sub_weapon_8_canvas = None
        if self.sub_weapon_dropdown_8_canvas is not None:
            self.sub_weapon_dropdown_8_canvas.grid_forget() #remove it from the screen
            self.sub_weapon_dropdown_8_canvas = None
        self.selected_sub_weapon_8_canvas = tk.StringVar()
        self.selected_sub_weapon_8_canvas.set("Weapon")
        options = self.get_weapon_options_sub_list(input_list=self.temp_dropdown_list)
        self.sub_weapon_dropdown_8_canvas = ttk.OptionMenu(self.canvas_type, self.selected_sub_weapon_8_canvas, "Weapon", *options) #filled elsewhere
        self.sub_weapon_dropdown_8_canvas.grid(column=self.grid_col_item, row=row_number, sticky="w")
        self.selected_sub_weapon_8_canvas.trace_add("write", self.on_select_sub_weapon_alt_8_canvas)

    def on_select_weapon_alt_8_canvas(self, *args):
        selected_value = self.selected_weapon_alt_8.get()
        row_number: int = self.grid_row_sub_weapon_alt_8
        match selected_value:
            case "SMALL BORE WEAPONS":
                self.temp_dropdown_list = self.weapons_small_bore_list
            case "LARGE BORE WEAPONS":
                self.temp_dropdown_list = self.weapons_large_bore_list
            case "GRENADE LAUNCHERS":
                self.temp_dropdown_list = self.weapons_grenade_launchers_list
            case "GRENADE AMMO":
                self.temp_dropdown_list = self.weapons_grenade_ammo_list
            case "ROCKETS":
                self.temp_dropdown_list = self.weapons_rockets_list
            case "ENERGY WEAPONS":
                self.temp_dropdown_list = self.weapons_energy_list
            case "FLAMETHROWERS":
                self.temp_dropdown_list = self.weapons_flamethrower_list
            case "DROPPED GASSES":
                self.temp_dropdown_list = self.weapons_dropped_gas_list
            case "DROPPED LIQUIDS":
                self.temp_dropdown_list = self.weapons_dropped_liquid_list
            case "DROPPED SOLIDS":
                self.temp_dropdown_list = self.weapons_dropped_solid_list
            case "MINEDROPPERS":
                self.temp_dropdown_list = self.weapons_minedroppers_list
            case "DISCHARGERS":
                self.temp_dropdown_list = self.weapons_dischargers_list
        self.add_dropdown_sub_weapon_8_canvas(row_number = row_number)

    def on_select_sub_weapon_alt_8_canvas(self, *args):
        selected_value = self.selected_sub_weapon_8_canvas.get()
        for entry in self.temp_dropdown_list:
            drop_down_name: str = entry.get("Drop-Down Name")
            if selected_value == drop_down_name:
                self.add_to_sub_weapon_row_8(entry)

    def add_to_sub_weapon_row_8(self, entry: dict):
        drop_down_name:       str = entry.get("Drop-Down Name")
        weapon_name:          str = entry.get("Weapon Name") # 'Weapon Name'  # 'Drop-Down Name'
        weapon_ammo_type:     str = entry.get("Ammo Type") # 'Ammo Type'
        weapon_abbv:          str = entry.get("Abbv") # 'Abbv'
        weapon_effect:        str = entry.get("Effect") # 'Effect'
        weapon_to_hit:        str = entry.get("To- Hit") # 'To- Hit'
        weapon_damage:        str = entry.get("Dam") # 'Dam'
        weapon_dp:            str = entry.get("DP") # 'DP'
        weapon_cost:          str = entry.get("Cost") # 'Cost'
        weapon_weight:        str = entry.get("Weight") # 'Weight'
        weapon_space:         str = entry.get("Space") # 'Space'
        weapon_shots:         str = entry.get("Shots") # 'Shots'
        weapon_shot_cost:     str = entry.get("Shot Cost") # 'Shot Cost'
        weapon_shot_weight:   str = entry.get("Shot Weight") # 'Shot Weight'
        weapon_loaded_cost:   str = entry.get("Loaded Cost") # 'Loaded Cost'
        weapon_loaded_weight: str = entry.get("Loaded Weight") # 'Loaded Weight'
        weapon_mag_cost:      str = entry.get("Mag Cost") # 'Mag Cost'
        weapon_mag_weight:    str = entry.get("Mag Weight") # 'Mag Weight'

        self.label_hidden_sub_weapon_8_name.configure(text=str(weapon_name))
        self.label_hidden_sub_weapon_8_drop_down_name.configure(text=str(drop_down_name))
        self.label_hidden_sub_weapon_8_ammo_type.configure(text=str(weapon_ammo_type))
        self.label_hidden_sub_weapon_8_abbv.configure(text=str(weapon_abbv))
        self.label_hidden_sub_weapon_8_effect.configure(text=str(weapon_effect))
        self.label_hidden_sub_weapon_8_to_hit.configure(text=str(weapon_to_hit))
        self.label_hidden_sub_weapon_8_damage.configure(text=str(weapon_damage))
        self.label_hidden_sub_weapon_8_dp.configure(text=str(weapon_dp))
        self.label_hidden_sub_weapon_8_cost.configure(text=str(weapon_cost))
        self.label_hidden_sub_weapon_8_weight.configure(text=str(weapon_weight))
        self.label_hidden_sub_weapon_8_space.configure(text=str(weapon_space))
        self.label_hidden_sub_weapon_8_shots.configure(text=str(weapon_shots))
        self.label_hidden_sub_weapon_8_ammo_cost.configure(text=str(weapon_shot_cost))
        self.label_hidden_sub_weapon_8_ammo_weight.configure(text=str(weapon_shot_weight))
        self.label_hidden_sub_weapon_8_loaded_cost.configure(text=str(weapon_loaded_cost))
        self.label_hidden_sub_weapon_8_loaded_weight.configure(text=str(weapon_loaded_weight))
        self.label_hidden_sub_weapon_8_mag_cost.configure(text=str(weapon_mag_cost))
        self.label_hidden_sub_weapon_8_mag_weight.configure(text=str(weapon_mag_weight))
        self.label_sub_weapon_8_shots.configure(text=str(weapon_shots))
        self.label_sub_weapon_8_ammo_cost.configure(text=str(weapon_shot_cost*self.var_sub_weapon_8_qty.get()))
        self.label_sub_weapon_8_ammo_weight.configure(text=str(weapon_shot_weight*self.var_sub_weapon_8_qty.get()))
        self.on_update_sub_weapon_8_qty()

    def on_button_sub_weapon_8_qty_up(self, *args):
        sub_weapon_8_qty = self.var_sub_weapon_8_qty.get()
        sub_weapon_8_qty = sub_weapon_8_qty + 1
        self.var_sub_weapon_8_qty.set(value=sub_weapon_8_qty)
        self.on_update_sub_weapon_8_qty()

    def on_button_sub_weapon_8_qty_down(self, *args):
        sub_weapon_8_qty = self.var_sub_weapon_8_qty.get()
        sub_weapon_8_qty = max(sub_weapon_8_qty - 1, 0)
        self.var_sub_weapon_8_qty.set(value=sub_weapon_8_qty)
        self.on_update_sub_weapon_8_qty()

    def on_button_sub_weapon_8_ammo_qty_up(self, *args):
        sub_weapon_8_ammo_qty = self.var_sub_weapon_ammo_8_qty.get()
        sub_weapon_8_ammo_qty = sub_weapon_8_ammo_qty + 1
        self.var_sub_weapon_ammo_8_qty.set(value=sub_weapon_8_ammo_qty)
        self.on_update_sub_weapon_ammo_8_qty()

    def on_button_sub_weapon_8_ammo_qty_down(self, *args):
        sub_weapon_8_ammo_qty = self.var_sub_weapon_ammo_8_qty.get()
        sub_weapon_8_ammo_qty = max(sub_weapon_8_ammo_qty - 1, 0)
        self.var_sub_weapon_ammo_8_qty.set(value=sub_weapon_8_ammo_qty)
        self.on_update_sub_weapon_ammo_8_qty()

    def on_button_sub_weapon_extra_mags_8_qty_up(self, *args):
        sub_weapon_extra_mags_8_qty = self.var_sub_weapon_extra_mags_8_qty.get()
        sub_weapon_extra_mags_8_qty = sub_weapon_extra_mags_8_qty + 1
        self.var_sub_weapon_extra_mags_8_qty.set(value=sub_weapon_extra_mags_8_qty)
        self.on_update_sub_weapon_extra_mags_8_qty()

    def on_button_sub_weapon_extra_mags_8_qty_down(self, *args):
        sub_weapon_extra_mags_8_qty = self.var_sub_weapon_extra_mags_8_qty.get()
        sub_weapon_extra_mags_8_qty = max(sub_weapon_extra_mags_8_qty - 1, 0)
        self.var_sub_weapon_extra_mags_8_qty.set(value=sub_weapon_extra_mags_8_qty)
        self.on_update_sub_weapon_extra_mags_8_qty()

    def on_update_sub_weapon_8_qty(self, *args):
        sub_weapon_8_qty = self.var_sub_weapon_8_qty.get()
        sub_weapon_8_cost   = int(self.label_hidden_sub_weapon_8_cost.cget("text"))
        sub_weapon_8_weight = int(self.label_hidden_sub_weapon_8_weight.cget("text"))
        sub_weapon_8_space  = float(self.label_hidden_sub_weapon_8_space.cget("text"))
        self.label_sub_weapon_8_cost.configure(text=self.float_to_str(sub_weapon_8_cost * sub_weapon_8_qty))
        self.label_sub_weapon_8_weight.configure(text=self.float_to_str(sub_weapon_8_weight * sub_weapon_8_qty))
        self.label_sub_weapon_8_space.configure(text=self.float_to_str(sub_weapon_8_space * sub_weapon_8_qty))
        self.recalculate()

    def on_update_sub_weapon_ammo_8_qty(self, *args):
        sub_weapon_8_ammo_qty = self.var_sub_weapon_ammo_8_qty.get()
        sub_weapon_8_ammo_cost   = float(self.label_hidden_sub_weapon_8_ammo_cost.cget("text"))
        sub_weapon_8_ammo_weight = float(self.label_hidden_sub_weapon_8_ammo_weight.cget("text"))
        self.label_sub_weapon_8_ammo_cost.configure(text=str(sub_weapon_8_ammo_cost * sub_weapon_8_ammo_qty))
        self.label_sub_weapon_8_ammo_weight.configure(text=str(sub_weapon_8_ammo_weight * sub_weapon_8_ammo_qty))
        self.recalculate()

    def on_update_sub_weapon_extra_mags_8_qty(self, *args):
        sub_weapon_extra_mags_8_qty = self.var_sub_weapon_extra_mags_8_qty.get()
        sub_weapon_8_qty    = self.var_sub_weapon_8_qty.get()
        sub_weapon_8_cost   = int(self.label_hidden_sub_weapon_8_cost.cget("text"))
        sub_weapon_8_weight = int(self.label_hidden_sub_weapon_8_weight.cget("text"))
        sub_weapon_8_space  = float(self.label_hidden_sub_weapon_8_space.cget("text"))
        sub_weapon_8_cost   = sub_weapon_8_cost   * sub_weapon_8_qty + (50 * sub_weapon_extra_mags_8_qty)
        sub_weapon_8_weight = sub_weapon_8_weight * sub_weapon_8_qty + (15 * sub_weapon_extra_mags_8_qty)
        sub_weapon_8_space  = sub_weapon_8_space  * sub_weapon_8_qty + sub_weapon_extra_mags_8_qty
        self.label_sub_weapon_8_cost.configure(text=self.float_to_str(sub_weapon_8_cost))
        self.label_sub_weapon_8_weight.configure(text=self.float_to_str(sub_weapon_8_weight))
        self.label_sub_weapon_8_space.configure(text=self.float_to_str(sub_weapon_8_space))
        self.recalculate()

    ######################################################################
    # Weapon Row 9 processing here                                       #
    ######################################################################

    def add_labels_buttons_weapon_row_9(self, canvas_type):
        up_arrow = "\u2191"
        down_arrow = "\u2193"
        self.label_hidden_weapon_9_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_9_drop_down_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_9_ammo_type = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_9_abbv = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_9_effect = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_9_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_9_damage = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_9_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_9_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_9_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_9_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_9_shots = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_9_ammo_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_9_ammo_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_9_loaded_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_9_loaded_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_9_mag_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_9_mag_weight = tk.Label(canvas_type, text="0", anchor="w")

        self.label_hidden_sub_weapon_9_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_9_drop_down_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_9_ammo_type = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_9_abbv = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_9_effect = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_9_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_9_damage = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_9_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_9_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_9_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_9_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_9_shots = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_9_ammo_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_9_ammo_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_9_loaded_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_9_loaded_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_9_mag_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_9_mag_weight = tk.Label(canvas_type, text="0", anchor="w")

        self.label_sub_weapon_9_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_9_cost.grid(column=self.grid_col_cost,row=self.grid_row_sub_weapon_alt_9, sticky="w")
        self.label_sub_weapon_9_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_9_weight.grid(column=self.grid_col_weight ,row=self.grid_row_sub_weapon_alt_9, sticky="w")
        self.label_sub_weapon_9_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_9_space.grid(column=self.grid_col_spaces,row=self.grid_row_sub_weapon_alt_9, sticky="w")
        self.label_sub_weapon_9_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_9_dp.grid(column=self.grid_col_dp,row=self.grid_row_sub_weapon_alt_9, sticky="w")
        self.label_sub_weapon_9_shots = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_9_shots.grid(column=self.grid_col_max_weight, row=self.grid_row_sub_weapon_alt_9, sticky="w")
        self.label_sub_weapon_9_ammo_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_9_ammo_cost.grid(column=self.grid_col_power_factors,row=self.grid_row_sub_weapon_alt_9, sticky="w")
        self.label_sub_weapon_9_ammo_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_9_ammo_weight.grid(column=self.grid_col_base_mpg,row=self.grid_row_sub_weapon_alt_9, sticky="w")
        self.label_sub_weapon_9_tohit = tk.Label(canvas_type, text="", anchor="w")
        self.label_sub_weapon_9_tohit.grid(column=self.grid_col_test_track_numbers, row = self.grid_row_sub_weapon_alt_9, sticky="w")
        self.label_sub_weapon_9_damage = tk.Label(canvas_type, text="", anchor="w")
        self.label_sub_weapon_9_damage.grid(column=self.grid_col_last_column, row = self.grid_row_sub_weapon_alt_9, sticky="w")

        self.var_sub_weapon_9_qty = tk.IntVar()
        self.entry_sub_weapon_9_qty = ttk.Entry(canvas_type, textvariable=self.var_sub_weapon_9_qty, width=3)
        self.entry_sub_weapon_9_qty.grid(column=self.grid_col_qty,row=self.grid_row_sub_weapon_alt_9, sticky="w")
        self.var_sub_weapon_9_qty.trace_add("write", self.on_update_sub_weapon_9_qty)
        self.var_sub_weapon_ammo_9_qty = tk.IntVar()
        self.entry_sub_weapon_ammo_9_qty = ttk.Entry(canvas_type, textvariable=self.var_sub_weapon_ammo_9_qty, width=3)
        self.entry_sub_weapon_ammo_9_qty.grid(column=self.grid_right_qty,row=self.grid_row_sub_weapon_alt_9, sticky="w")
        self.var_sub_weapon_ammo_9_qty.trace_add("write", self.on_update_sub_weapon_ammo_9_qty)

        self.button_sub_weapon_9_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_sub_weapon_9_qty_up)
        self.button_sub_weapon_9_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_sub_weapon_alt_9, sticky="w")
        self.button_sub_weapon_9_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_sub_weapon_9_qty_down)
        self.button_sub_weapon_9_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_sub_weapon_alt_9, sticky="w")
        self.button_sub_weapon_9_ammo_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_sub_weapon_9_ammo_qty_up)
        self.button_sub_weapon_9_ammo_qty_up.grid(column=self.grid_right_up_button,row=self.grid_row_sub_weapon_alt_9, sticky="w")
        self.button_sub_weapon_9_ammo_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_sub_weapon_9_ammo_qty_down)
        self.button_sub_weapon_9_ammo_qty_down.grid(column=self.grid_right_down_button,row=self.grid_row_sub_weapon_alt_9, sticky="w")

        self.var_sub_weapon_extra_mags_9_qty = tk.IntVar()
        self.entry_sub_weapon_extra_mags_9_qty = ttk.Entry(canvas_type, textvariable=self.var_sub_weapon_extra_mags_9_qty, width=3)
        self.entry_sub_weapon_extra_mags_9_qty.grid(column=self.grid_col_extra_mag_entry,row=self.grid_row_sub_weapon_alt_9, sticky="w")
        self.var_sub_weapon_extra_mags_9_qty.trace_add("write", self.on_update_sub_weapon_extra_mags_9_qty)
        self.button_sub_weapon_extra_mags_9_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_sub_weapon_extra_mags_9_qty_up)
        self.button_sub_weapon_extra_mags_9_qty_up.grid(column=self.grid_col_extra_mag_qty_up,row=self.grid_row_sub_weapon_alt_9, sticky="w")
        self.button_sub_weapon_extra_mags_9_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_sub_weapon_extra_mags_9_qty_down)
        self.button_sub_weapon_extra_mags_9_qty_down.grid(column=self.grid_col_extra_mag_qty_down,row=self.grid_row_sub_weapon_alt_9, sticky="w")

    def add_dropdown_weapon_alt_9_canvas(self, canvas_type):
        self.selected_weapon_alt_9 = tk.StringVar()
        self.selected_weapon_alt_9.set("Weapon")
        options = self.get_weapon_options_alt()
        # Create the dropdown widget
        self.weapon_alt_9_dropdown = ttk.OptionMenu(canvas_type, self.selected_weapon_alt_9, "Weapon", *options) #filled elsewhere
        self.weapon_alt_9_dropdown.grid(column=self.grid_col_item, row=self.grid_row_weapon_alt_9, sticky="w")
        self.selected_weapon_alt_9.trace_add("write", self.on_select_weapon_alt_9_canvas)

    def add_dropdown_sub_weapon_9_canvas(self, row_number: int):
        if self.selected_sub_weapon_9_canvas is not None:
            self.selected_sub_weapon_9_canvas = None
        if self.sub_weapon_dropdown_9_canvas is not None:
            self.sub_weapon_dropdown_9_canvas.grid_forget() #remove it from the screen
            self.sub_weapon_dropdown_9_canvas = None
        self.selected_sub_weapon_9_canvas = tk.StringVar()
        self.selected_sub_weapon_9_canvas.set("Weapon")
        options = self.get_weapon_options_sub_list(input_list=self.temp_dropdown_list)
        self.sub_weapon_dropdown_9_canvas = ttk.OptionMenu(self.canvas_type, self.selected_sub_weapon_9_canvas, "Weapon", *options) #filled elsewhere
        self.sub_weapon_dropdown_9_canvas.grid(column=self.grid_col_item, row=row_number, sticky="w")
        self.selected_sub_weapon_9_canvas.trace_add("write", self.on_select_sub_weapon_alt_9_canvas)

    def on_select_weapon_alt_9_canvas(self, *args):
        selected_value = self.selected_weapon_alt_9.get()
        row_number: int = self.grid_row_sub_weapon_alt_9
        match selected_value:
            case "SMALL BORE WEAPONS":
                self.temp_dropdown_list = self.weapons_small_bore_list
            case "LARGE BORE WEAPONS":
                self.temp_dropdown_list = self.weapons_large_bore_list
            case "GRENADE LAUNCHERS":
                self.temp_dropdown_list = self.weapons_grenade_launchers_list
            case "GRENADE AMMO":
                self.temp_dropdown_list = self.weapons_grenade_ammo_list
            case "ROCKETS":
                self.temp_dropdown_list = self.weapons_rockets_list
            case "ENERGY WEAPONS":
                self.temp_dropdown_list = self.weapons_energy_list
            case "FLAMETHROWERS":
                self.temp_dropdown_list = self.weapons_flamethrower_list
            case "DROPPED GASSES":
                self.temp_dropdown_list = self.weapons_dropped_gas_list
            case "DROPPED LIQUIDS":
                self.temp_dropdown_list = self.weapons_dropped_liquid_list
            case "DROPPED SOLIDS":
                self.temp_dropdown_list = self.weapons_dropped_solid_list
            case "MINEDROPPERS":
                self.temp_dropdown_list = self.weapons_minedroppers_list
            case "DISCHARGERS":
                self.temp_dropdown_list = self.weapons_dischargers_list
        self.add_dropdown_sub_weapon_9_canvas(row_number = row_number)

    def on_select_sub_weapon_alt_9_canvas(self, *args):
        selected_value = self.selected_sub_weapon_9_canvas.get()
        for entry in self.temp_dropdown_list:
            drop_down_name: str = entry.get("Drop-Down Name")
            if selected_value == drop_down_name:
                self.add_to_sub_weapon_row_9(entry)

    def add_to_sub_weapon_row_9(self, entry: dict):
        drop_down_name:       str = entry.get("Drop-Down Name")
        weapon_name:          str = entry.get("Weapon Name") # 'Weapon Name'  # 'Drop-Down Name'
        weapon_ammo_type:     str = entry.get("Ammo Type") # 'Ammo Type'
        weapon_abbv:          str = entry.get("Abbv") # 'Abbv'
        weapon_effect:        str = entry.get("Effect") # 'Effect'
        weapon_to_hit:        str = entry.get("To- Hit") # 'To- Hit'
        weapon_damage:        str = entry.get("Dam") # 'Dam'
        weapon_dp:            str = entry.get("DP") # 'DP'
        weapon_cost:          str = entry.get("Cost") # 'Cost'
        weapon_weight:        str = entry.get("Weight") # 'Weight'
        weapon_space:         str = entry.get("Space") # 'Space'
        weapon_shots:         str = entry.get("Shots") # 'Shots'
        weapon_shot_cost:     str = entry.get("Shot Cost") # 'Shot Cost'
        weapon_shot_weight:   str = entry.get("Shot Weight") # 'Shot Weight'
        weapon_loaded_cost:   str = entry.get("Loaded Cost") # 'Loaded Cost'
        weapon_loaded_weight: str = entry.get("Loaded Weight") # 'Loaded Weight'
        weapon_mag_cost:      str = entry.get("Mag Cost") # 'Mag Cost'
        weapon_mag_weight:    str = entry.get("Mag Weight") # 'Mag Weight'

        self.label_hidden_sub_weapon_9_name.configure(text=str(weapon_name))
        self.label_hidden_sub_weapon_9_drop_down_name.configure(text=str(drop_down_name))
        self.label_hidden_sub_weapon_9_ammo_type.configure(text=str(weapon_ammo_type))
        self.label_hidden_sub_weapon_9_abbv.configure(text=str(weapon_abbv))
        self.label_hidden_sub_weapon_9_effect.configure(text=str(weapon_effect))
        self.label_hidden_sub_weapon_9_to_hit.configure(text=str(weapon_to_hit))
        self.label_hidden_sub_weapon_9_damage.configure(text=str(weapon_damage))
        self.label_hidden_sub_weapon_9_dp.configure(text=str(weapon_dp))
        self.label_hidden_sub_weapon_9_cost.configure(text=str(weapon_cost))
        self.label_hidden_sub_weapon_9_weight.configure(text=str(weapon_weight))
        self.label_hidden_sub_weapon_9_space.configure(text=str(weapon_space))
        self.label_hidden_sub_weapon_9_shots.configure(text=str(weapon_shots))
        self.label_hidden_sub_weapon_9_ammo_cost.configure(text=str(weapon_shot_cost))
        self.label_hidden_sub_weapon_9_ammo_weight.configure(text=str(weapon_shot_weight))
        self.label_hidden_sub_weapon_9_loaded_cost.configure(text=str(weapon_loaded_cost))
        self.label_hidden_sub_weapon_9_loaded_weight.configure(text=str(weapon_loaded_weight))
        self.label_hidden_sub_weapon_9_mag_cost.configure(text=str(weapon_mag_cost))
        self.label_hidden_sub_weapon_9_mag_weight.configure(text=str(weapon_mag_weight))
        self.label_sub_weapon_9_shots.configure(text=str(weapon_shots))
        self.label_sub_weapon_9_ammo_cost.configure(text=str(weapon_shot_cost*self.var_sub_weapon_9_qty.get()))
        self.label_sub_weapon_9_ammo_weight.configure(text=str(weapon_shot_weight*self.var_sub_weapon_9_qty.get()))
        self.on_update_sub_weapon_9_qty()

    def on_button_sub_weapon_9_qty_up(self, *args):
        sub_weapon_9_qty = self.var_sub_weapon_9_qty.get()
        sub_weapon_9_qty = sub_weapon_9_qty + 1
        self.var_sub_weapon_9_qty.set(value=sub_weapon_9_qty)
        self.on_update_sub_weapon_9_qty()

    def on_button_sub_weapon_9_qty_down(self, *args):
        sub_weapon_9_qty = self.var_sub_weapon_9_qty.get()
        sub_weapon_9_qty = max(sub_weapon_9_qty - 1, 0)
        self.var_sub_weapon_9_qty.set(value=sub_weapon_9_qty)
        self.on_update_sub_weapon_9_qty()

    def on_button_sub_weapon_9_ammo_qty_up(self, *args):
        sub_weapon_9_ammo_qty = self.var_sub_weapon_ammo_9_qty.get()
        sub_weapon_9_ammo_qty = sub_weapon_9_ammo_qty + 1
        self.var_sub_weapon_ammo_9_qty.set(value=sub_weapon_9_ammo_qty)
        self.on_update_sub_weapon_ammo_9_qty()

    def on_button_sub_weapon_9_ammo_qty_down(self, *args):
        sub_weapon_9_ammo_qty = self.var_sub_weapon_ammo_9_qty.get()
        sub_weapon_9_ammo_qty = max(sub_weapon_9_ammo_qty - 1, 0)
        self.var_sub_weapon_ammo_9_qty.set(value=sub_weapon_9_ammo_qty)
        self.on_update_sub_weapon_ammo_9_qty()

    def on_button_sub_weapon_extra_mags_9_qty_up(self, *args):
        sub_weapon_extra_mags_9_qty = self.var_sub_weapon_extra_mags_9_qty.get()
        sub_weapon_extra_mags_9_qty = sub_weapon_extra_mags_9_qty + 1
        self.var_sub_weapon_extra_mags_9_qty.set(value=sub_weapon_extra_mags_9_qty)
        self.on_update_sub_weapon_extra_mags_9_qty()

    def on_button_sub_weapon_extra_mags_9_qty_down(self, *args):
        sub_weapon_extra_mags_9_qty = self.var_sub_weapon_extra_mags_9_qty.get()
        sub_weapon_extra_mags_9_qty = max(sub_weapon_extra_mags_9_qty - 1, 0)
        self.var_sub_weapon_extra_mags_9_qty.set(value=sub_weapon_extra_mags_9_qty)
        self.on_update_sub_weapon_extra_mags_9_qty()

    def on_update_sub_weapon_9_qty(self, *args):
        sub_weapon_9_qty = self.var_sub_weapon_9_qty.get()
        sub_weapon_9_cost   = int(self.label_hidden_sub_weapon_9_cost.cget("text"))
        sub_weapon_9_weight = int(self.label_hidden_sub_weapon_9_weight.cget("text"))
        sub_weapon_9_space  = float(self.label_hidden_sub_weapon_9_space.cget("text"))
        self.label_sub_weapon_9_cost.configure(text=self.float_to_str(sub_weapon_9_cost * sub_weapon_9_qty))
        self.label_sub_weapon_9_weight.configure(text=self.float_to_str(sub_weapon_9_weight * sub_weapon_9_qty))
        self.label_sub_weapon_9_space.configure(text=self.float_to_str(sub_weapon_9_space * sub_weapon_9_qty))
        self.recalculate()

    def on_update_sub_weapon_ammo_9_qty(self, *args):
        sub_weapon_9_ammo_qty = self.var_sub_weapon_ammo_9_qty.get()
        sub_weapon_9_ammo_cost   = float(self.label_hidden_sub_weapon_9_ammo_cost.cget("text"))
        sub_weapon_9_ammo_weight = float(self.label_hidden_sub_weapon_9_ammo_weight.cget("text"))
        self.label_sub_weapon_9_ammo_cost.configure(text=str(sub_weapon_9_ammo_cost * sub_weapon_9_ammo_qty))
        self.label_sub_weapon_9_ammo_weight.configure(text=str(sub_weapon_9_ammo_weight * sub_weapon_9_ammo_qty))
        self.recalculate()

    def on_update_sub_weapon_extra_mags_9_qty(self, *args):
        sub_weapon_extra_mags_9_qty = self.var_sub_weapon_extra_mags_9_qty.get()
        sub_weapon_9_qty    = self.var_sub_weapon_9_qty.get()
        sub_weapon_9_cost   = int(self.label_hidden_sub_weapon_9_cost.cget("text"))
        sub_weapon_9_weight = int(self.label_hidden_sub_weapon_9_weight.cget("text"))
        sub_weapon_9_space  = float(self.label_hidden_sub_weapon_9_space.cget("text"))
        sub_weapon_9_cost   = sub_weapon_9_cost   * sub_weapon_9_qty + (50 * sub_weapon_extra_mags_9_qty)
        sub_weapon_9_weight = sub_weapon_9_weight * sub_weapon_9_qty + (15 * sub_weapon_extra_mags_9_qty)
        sub_weapon_9_space  = sub_weapon_9_space  * sub_weapon_9_qty + sub_weapon_extra_mags_9_qty
        self.label_sub_weapon_9_cost.configure(text=self.float_to_str(sub_weapon_9_cost))
        self.label_sub_weapon_9_weight.configure(text=self.float_to_str(sub_weapon_9_weight))
        self.label_sub_weapon_9_space.configure(text=self.float_to_str(sub_weapon_9_space))
        self.recalculate()

    ######################################################################
    # Weapon Row 10 processing here                                      #
    ######################################################################

    def add_labels_buttons_weapon_row_10(self, canvas_type):
        up_arrow = "\u2191"
        down_arrow = "\u2193"
        self.label_hidden_weapon_10_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_10_drop_down_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_10_ammo_type = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_10_abbv = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_10_effect = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_10_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_10_damage = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_10_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_10_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_10_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_10_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_10_shots = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_10_ammo_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_10_ammo_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_10_loaded_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_10_loaded_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_10_mag_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_weapon_10_mag_weight = tk.Label(canvas_type, text="0", anchor="w")

        self.label_hidden_sub_weapon_10_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_10_drop_down_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_10_ammo_type = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_10_abbv = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_10_effect = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_10_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_10_damage = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_10_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_10_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_10_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_10_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_10_shots = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_10_ammo_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_10_ammo_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_10_loaded_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_10_loaded_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_10_mag_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_sub_weapon_10_mag_weight = tk.Label(canvas_type, text="0", anchor="w")

        self.label_sub_weapon_10_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_10_cost.grid(column=self.grid_col_cost,row=self.grid_row_sub_weapon_alt_10, sticky="w")
        self.label_sub_weapon_10_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_10_weight.grid(column=self.grid_col_weight ,row=self.grid_row_sub_weapon_alt_10, sticky="w")
        self.label_sub_weapon_10_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_10_space.grid(column=self.grid_col_spaces,row=self.grid_row_sub_weapon_alt_10, sticky="w")
        self.label_sub_weapon_10_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_10_dp.grid(column=self.grid_col_dp,row=self.grid_row_sub_weapon_alt_10, sticky="w")
        self.label_sub_weapon_10_shots = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_10_shots.grid(column=self.grid_col_max_weight, row=self.grid_row_sub_weapon_alt_10, sticky="w")
        self.label_sub_weapon_10_ammo_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_10_ammo_cost.grid(column=self.grid_col_power_factors,row=self.grid_row_sub_weapon_alt_10, sticky="w")
        self.label_sub_weapon_10_ammo_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_sub_weapon_10_ammo_weight.grid(column=self.grid_col_base_mpg,row=self.grid_row_sub_weapon_alt_10, sticky="w")
        self.label_sub_weapon_10_tohit = tk.Label(canvas_type, text="", anchor="w")
        self.label_sub_weapon_10_tohit.grid(column=self.grid_col_test_track_numbers, row = self.grid_row_sub_weapon_alt_10, sticky="w")
        self.label_sub_weapon_10_damage = tk.Label(canvas_type, text="", anchor="w")
        self.label_sub_weapon_10_damage.grid(column=self.grid_col_last_column, row = self.grid_row_sub_weapon_alt_10, sticky="w")

        self.var_sub_weapon_10_qty = tk.IntVar()
        self.entry_sub_weapon_10_qty = ttk.Entry(canvas_type, textvariable=self.var_sub_weapon_10_qty, width=3)
        self.entry_sub_weapon_10_qty.grid(column=self.grid_col_qty,row=self.grid_row_sub_weapon_alt_10, sticky="w")
        self.var_sub_weapon_10_qty.trace_add("write", self.on_update_sub_weapon_10_qty)
        self.var_sub_weapon_ammo_10_qty = tk.IntVar()
        self.entry_sub_weapon_ammo_10_qty = ttk.Entry(canvas_type, textvariable=self.var_sub_weapon_ammo_10_qty, width=3)
        self.entry_sub_weapon_ammo_10_qty.grid(column=self.grid_right_qty,row=self.grid_row_sub_weapon_alt_10, sticky="w")
        self.var_sub_weapon_ammo_10_qty.trace_add("write", self.on_update_sub_weapon_ammo_10_qty)

        self.button_sub_weapon_10_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_sub_weapon_10_qty_up)
        self.button_sub_weapon_10_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_sub_weapon_alt_10, sticky="w")
        self.button_sub_weapon_10_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_sub_weapon_10_qty_down)
        self.button_sub_weapon_10_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_sub_weapon_alt_10, sticky="w")
        self.button_sub_weapon_10_ammo_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_sub_weapon_10_ammo_qty_up)
        self.button_sub_weapon_10_ammo_qty_up.grid(column=self.grid_right_up_button,row=self.grid_row_sub_weapon_alt_10, sticky="w")
        self.button_sub_weapon_10_ammo_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_sub_weapon_10_ammo_qty_down)
        self.button_sub_weapon_10_ammo_qty_down.grid(column=self.grid_right_down_button,row=self.grid_row_sub_weapon_alt_10, sticky="w")

        self.var_sub_weapon_extra_mags_10_qty = tk.IntVar()
        self.entry_sub_weapon_extra_mags_10_qty = ttk.Entry(canvas_type, textvariable=self.var_sub_weapon_extra_mags_10_qty, width=3)
        self.entry_sub_weapon_extra_mags_10_qty.grid(column=self.grid_col_extra_mag_entry,row=self.grid_row_sub_weapon_alt_10, sticky="w")
        self.var_sub_weapon_extra_mags_10_qty.trace_add("write", self.on_update_sub_weapon_extra_mags_10_qty)
        self.button_sub_weapon_extra_mags_10_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_sub_weapon_extra_mags_10_qty_up)
        self.button_sub_weapon_extra_mags_10_qty_up.grid(column=self.grid_col_extra_mag_qty_up,row=self.grid_row_sub_weapon_alt_10, sticky="w")
        self.button_sub_weapon_extra_mags_10_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_sub_weapon_extra_mags_10_qty_down)
        self.button_sub_weapon_extra_mags_10_qty_down.grid(column=self.grid_col_extra_mag_qty_down,row=self.grid_row_sub_weapon_alt_10, sticky="w")

    def add_dropdown_weapon_alt_10_canvas(self, canvas_type):
        self.selected_weapon_alt_10 = tk.StringVar()
        self.selected_weapon_alt_10.set("Weapon")
        options = self.get_weapon_options_alt()
        # Create the dropdown widget
        self.weapon_alt_10_dropdown = ttk.OptionMenu(canvas_type, self.selected_weapon_alt_10, "Weapon", *options) #filled elsewhere
        self.weapon_alt_10_dropdown.grid(column=self.grid_col_item, row=self.grid_row_weapon_alt_10, sticky="w")
        self.selected_weapon_alt_10.trace_add("write", self.on_select_weapon_alt_10_canvas)

    def add_dropdown_sub_weapon_10_canvas(self, row_number: int):
        if self.selected_sub_weapon_10_canvas is not None:
            self.selected_sub_weapon_10_canvas = None
        if self.sub_weapon_dropdown_10_canvas is not None:
            self.sub_weapon_dropdown_10_canvas.grid_forget() #remove it from the screen
            self.sub_weapon_dropdown_10_canvas = None
        self.selected_sub_weapon_10_canvas = tk.StringVar()
        self.selected_sub_weapon_10_canvas.set("Weapon")
        options = self.get_weapon_options_sub_list(input_list=self.temp_dropdown_list)
        self.sub_weapon_dropdown_10_canvas = ttk.OptionMenu(self.canvas_type, self.selected_sub_weapon_10_canvas, "Weapon", *options) #filled elsewhere
        self.sub_weapon_dropdown_10_canvas.grid(column=self.grid_col_item, row=row_number, sticky="w")
        self.selected_sub_weapon_10_canvas.trace_add("write", self.on_select_sub_weapon_alt_10_canvas)

    def on_select_weapon_alt_10_canvas(self, *args):
        selected_value = self.selected_weapon_alt_10.get()
        row_number: int = self.grid_row_sub_weapon_alt_10
        match selected_value:
            case "SMALL BORE WEAPONS":
                self.temp_dropdown_list = self.weapons_small_bore_list
            case "LARGE BORE WEAPONS":
                self.temp_dropdown_list = self.weapons_large_bore_list
            case "GRENADE LAUNCHERS":
                self.temp_dropdown_list = self.weapons_grenade_launchers_list
            case "GRENADE AMMO":
                self.temp_dropdown_list = self.weapons_grenade_ammo_list
            case "ROCKETS":
                self.temp_dropdown_list = self.weapons_rockets_list
            case "ENERGY WEAPONS":
                self.temp_dropdown_list = self.weapons_energy_list
            case "FLAMETHROWERS":
                self.temp_dropdown_list = self.weapons_flamethrower_list
            case "DROPPED GASSES":
                self.temp_dropdown_list = self.weapons_dropped_gas_list
            case "DROPPED LIQUIDS":
                self.temp_dropdown_list = self.weapons_dropped_liquid_list
            case "DROPPED SOLIDS":
                self.temp_dropdown_list = self.weapons_dropped_solid_list
            case "MINEDROPPERS":
                self.temp_dropdown_list = self.weapons_minedroppers_list
            case "DISCHARGERS":
                self.temp_dropdown_list = self.weapons_dischargers_list
        self.add_dropdown_sub_weapon_10_canvas(row_number = row_number)

    def on_select_sub_weapon_alt_10_canvas(self, *args):
        selected_value = self.selected_sub_weapon_10_canvas.get()
        for entry in self.temp_dropdown_list:
            drop_down_name: str = entry.get("Drop-Down Name")
            if selected_value == drop_down_name:
                self.add_to_sub_weapon_row_10(entry)

    def add_to_sub_weapon_row_10(self, entry: dict):
        drop_down_name:       str = entry.get("Drop-Down Name")
        weapon_name:          str = entry.get("Weapon Name") # 'Weapon Name'  # 'Drop-Down Name'
        weapon_ammo_type:     str = entry.get("Ammo Type") # 'Ammo Type'
        weapon_abbv:          str = entry.get("Abbv") # 'Abbv'
        weapon_effect:        str = entry.get("Effect") # 'Effect'
        weapon_to_hit:        str = entry.get("To- Hit") # 'To- Hit'
        weapon_damage:        str = entry.get("Dam") # 'Dam'
        weapon_dp:            str = entry.get("DP") # 'DP'
        weapon_cost:          str = entry.get("Cost") # 'Cost'
        weapon_weight:        str = entry.get("Weight") # 'Weight'
        weapon_space:         str = entry.get("Space") # 'Space'
        weapon_shots:         str = entry.get("Shots") # 'Shots'
        weapon_shot_cost:     str = entry.get("Shot Cost") # 'Shot Cost'
        weapon_shot_weight:   str = entry.get("Shot Weight") # 'Shot Weight'
        weapon_loaded_cost:   str = entry.get("Loaded Cost") # 'Loaded Cost'
        weapon_loaded_weight: str = entry.get("Loaded Weight") # 'Loaded Weight'
        weapon_mag_cost:      str = entry.get("Mag Cost") # 'Mag Cost'
        weapon_mag_weight:    str = entry.get("Mag Weight") # 'Mag Weight'

        self.label_hidden_sub_weapon_10_name.configure(text=str(weapon_name))
        self.label_hidden_sub_weapon_10_drop_down_name.configure(text=str(drop_down_name))
        self.label_hidden_sub_weapon_10_ammo_type.configure(text=str(weapon_ammo_type))
        self.label_hidden_sub_weapon_10_abbv.configure(text=str(weapon_abbv))
        self.label_hidden_sub_weapon_10_effect.configure(text=str(weapon_effect))
        self.label_hidden_sub_weapon_10_to_hit.configure(text=str(weapon_to_hit))
        self.label_hidden_sub_weapon_10_damage.configure(text=str(weapon_damage))
        self.label_hidden_sub_weapon_10_dp.configure(text=str(weapon_dp))
        self.label_hidden_sub_weapon_10_cost.configure(text=str(weapon_cost))
        self.label_hidden_sub_weapon_10_weight.configure(text=str(weapon_weight))
        self.label_hidden_sub_weapon_10_space.configure(text=str(weapon_space))
        self.label_hidden_sub_weapon_10_shots.configure(text=str(weapon_shots))
        self.label_hidden_sub_weapon_10_ammo_cost.configure(text=str(weapon_shot_cost))
        self.label_hidden_sub_weapon_10_ammo_weight.configure(text=str(weapon_shot_weight))
        self.label_hidden_sub_weapon_10_loaded_cost.configure(text=str(weapon_loaded_cost))
        self.label_hidden_sub_weapon_10_loaded_weight.configure(text=str(weapon_loaded_weight))
        self.label_hidden_sub_weapon_10_mag_cost.configure(text=str(weapon_mag_cost))
        self.label_hidden_sub_weapon_10_mag_weight.configure(text=str(weapon_mag_weight))
        self.label_sub_weapon_10_shots.configure(text=str(weapon_shots))
        self.label_sub_weapon_10_ammo_cost.configure(text=str(weapon_shot_cost*self.var_sub_weapon_1_qty.get()))
        self.label_sub_weapon_10_ammo_weight.configure(text=str(weapon_shot_weight*self.var_sub_weapon_1_qty.get()))
        self.on_update_sub_weapon_10_qty()

    def on_button_sub_weapon_10_qty_up(self, *args):
        sub_weapon_10_qty = self.var_sub_weapon_10_qty.get()
        sub_weapon_10_qty = sub_weapon_10_qty + 1
        self.var_sub_weapon_10_qty.set(value=sub_weapon_10_qty)
        self.on_update_sub_weapon_10_qty()

    def on_button_sub_weapon_10_qty_down(self, *args):
        sub_weapon_10_qty = self.var_sub_weapon_10_qty.get()
        sub_weapon_10_qty = max(sub_weapon_10_qty - 1, 0)
        self.var_sub_weapon_10_qty.set(value=sub_weapon_10_qty)
        self.on_update_sub_weapon_10_qty()

    def on_button_sub_weapon_10_ammo_qty_up(self, *args):
        sub_weapon_10_ammo_qty = self.var_sub_weapon_ammo_10_qty.get()
        sub_weapon_10_ammo_qty = sub_weapon_10_ammo_qty + 1
        self.var_sub_weapon_ammo_10_qty.set(value=sub_weapon_10_ammo_qty)
        self.on_update_sub_weapon_ammo_10_qty()

    def on_button_sub_weapon_10_ammo_qty_down(self, *args):
        sub_weapon_10_ammo_qty = self.var_sub_weapon_ammo_10_qty.get()
        sub_weapon_10_ammo_qty = max(sub_weapon_10_ammo_qty - 1, 0)
        self.var_sub_weapon_ammo_10_qty.set(value=sub_weapon_10_ammo_qty)
        self.on_update_sub_weapon_ammo_10_qty()

    def on_button_sub_weapon_extra_mags_10_qty_up(self, *args):
        sub_weapon_extra_mags_10_qty = self.var_sub_weapon_extra_mags_10_qty.get()
        sub_weapon_extra_mags_10_qty = sub_weapon_extra_mags_10_qty + 1
        self.var_sub_weapon_extra_mags_10_qty.set(value=sub_weapon_extra_mags_10_qty)
        self.on_update_sub_weapon_extra_mags_10_qty()

    def on_button_sub_weapon_extra_mags_10_qty_down(self, *args):
        sub_weapon_extra_mags_10_qty = self.var_sub_weapon_extra_mags_10_qty.get()
        sub_weapon_extra_mags_10_qty = max(sub_weapon_extra_mags_10_qty - 1, 0)
        self.var_sub_weapon_extra_mags_10_qty.set(value=sub_weapon_extra_mags_10_qty)
        self.on_update_sub_weapon_extra_mags_10_qty()

    def on_update_sub_weapon_10_qty(self, *args):
        sub_weapon_10_qty = self.var_sub_weapon_10_qty.get()
        sub_weapon_10_cost   = int(self.label_hidden_sub_weapon_10_cost.cget("text"))
        sub_weapon_10_weight = int(self.label_hidden_sub_weapon_10_weight.cget("text"))
        sub_weapon_10_space  = float(self.label_hidden_sub_weapon_10_space.cget("text"))
        self.label_sub_weapon_10_cost.configure(text=self.float_to_str(sub_weapon_10_cost * sub_weapon_10_qty))
        self.label_sub_weapon_10_weight.configure(text=self.float_to_str(sub_weapon_10_weight * sub_weapon_10_qty))
        self.label_sub_weapon_10_space.configure(text=self.float_to_str(sub_weapon_10_space * sub_weapon_10_qty))
        self.recalculate()

    def on_update_sub_weapon_ammo_10_qty(self, *args):
        sub_weapon_10_ammo_qty = self.var_sub_weapon_ammo_10_qty.get()
        sub_weapon_10_ammo_cost   = float(self.label_hidden_sub_weapon_10_ammo_cost.cget("text"))
        sub_weapon_10_ammo_weight = float(self.label_hidden_sub_weapon_10_ammo_weight.cget("text"))
        self.label_sub_weapon_10_ammo_cost.configure(text=str(sub_weapon_10_ammo_cost * sub_weapon_10_ammo_qty))
        self.label_sub_weapon_10_ammo_weight.configure(text=str(sub_weapon_10_ammo_weight * sub_weapon_10_ammo_qty))
        self.recalculate()

    def on_update_sub_weapon_extra_mags_10_qty(self, *args):
        sub_weapon_extra_mags_10_qty = self.var_sub_weapon_extra_mags_10_qty.get()
        sub_weapon_10_qty    = self.var_sub_weapon_10_qty.get()
        sub_weapon_10_cost   = int(self.label_hidden_sub_weapon_10_cost.cget("text"))
        sub_weapon_10_weight = int(self.label_hidden_sub_weapon_10_weight.cget("text"))
        sub_weapon_10_space  = float(self.label_hidden_sub_weapon_10_space.cget("text"))
        sub_weapon_10_cost   = sub_weapon_10_cost   * sub_weapon_10_qty + (50 * sub_weapon_extra_mags_10_qty)
        sub_weapon_10_weight = sub_weapon_10_weight * sub_weapon_10_qty + (15 * sub_weapon_extra_mags_10_qty)
        sub_weapon_10_space  = sub_weapon_10_space  * sub_weapon_10_qty + sub_weapon_extra_mags_10_qty
        self.label_sub_weapon_10_cost.configure(text=str(sub_weapon_10_cost))
        self.label_sub_weapon_10_weight.configure(text=str(sub_weapon_10_weight))
        self.label_sub_weapon_10_space.configure(text=str(sub_weapon_10_space))
        self.recalculate()

    ######################################################################
    # Accessories Row 1 processing here                                  #
    ######################################################################
    def add_labels_buttons_accessories_1_canvas(self, canvas_type):
        self.label_hidden_accessories_1_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_1_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_1_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_1_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_1_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_1_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_hidden_accessories_1_turret_size = tk.Label(canvas_type, text="0", anchor="w")

        self.label_accessories_1_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_1_cost.grid(column=self.grid_col_cost,row=self.grid_row_accessories_1, sticky="w")
        self.label_accessories_1_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_1_weight.grid(column=self.grid_col_weight ,row=self.grid_row_accessories_1, sticky="w")
        self.label_accessories_1_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_1_space.grid(column=self.grid_col_spaces,row=self.grid_row_accessories_1, sticky="w")
        self.label_accessories_1_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_1_dp.grid(column=self.grid_col_dp,row=self.grid_row_accessories_1, sticky="w")
        self.label_accessories_1_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_accessories_1_notes.grid(column=self.grid_col_power_factors,row=self.grid_row_accessories_1, sticky="w", columnspan=4)

        self.var_accessories_1_qty = tk.IntVar()
        self.entry_accessories_1_qty = ttk.Entry(canvas_type, textvariable=self.var_accessories_1_qty, width=3)
        self.entry_accessories_1_qty.grid(column=self.grid_col_qty, row=self.grid_row_accessories_1, sticky="w")
        self.var_accessories_1_qty.trace_add("write", self.accessories_qty_1_update)

    def add_dropdown_accessories_1_canvas(self, canvas_type):
        self.selected_accessories_1 = tk.StringVar()
        self.selected_accessories_1.set("Accessories")
        options = self.get_accessories_options()
        # Create the dropdown widget
        self.accessories_1_dropdown = ttk.OptionMenu(canvas_type, self.selected_accessories_1, "Accessory", *options) #filled elsewhere
        self.accessories_1_dropdown.grid(column=self.grid_col_item, row=self.grid_row_accessories_1, sticky="w")
        self.selected_accessories_1.trace_add("write", self.on_select_accessories_1)

    def on_select_accessories_1(self, *args):
        selected_value = self.selected_accessories_1.get()
        for entry in self.accessories_list: #use the same self.accessories_list for every accessories dropdown
            accessories_name: str = entry.get("Accessory Name")
            if selected_value == accessories_name:
                accessories_cost:          str = entry.get("Cost")
                accessories_weight:        str = entry.get("Weight")
                accessories_space:         str = entry.get("Space")
                accessories_dp:            str = entry.get("DP")
                accessories_notes:         str = entry.get("Notes")
                accessories_turret_size:   str = entry.get("Turret Size")

                if accessories_cost == "":
                    accessories_cost = "0"
                if accessories_weight == "":
                    accessories_weight = "0"
                if accessories_space == "":
                    accessories_space = "0"

                self.label_hidden_accessories_1_name.configure(text=str(accessories_name))
                self.label_hidden_accessories_1_cost.configure(text=self.float_to_str(accessories_cost))
                self.label_hidden_accessories_1_weight.configure(text=self.float_to_str(accessories_weight))
                self.label_hidden_accessories_1_space.configure(text=self.float_to_str(accessories_space))
                self.label_hidden_accessories_1_dp.configure(text=str(accessories_dp))
                self.label_hidden_accessories_1_notes.configure(text=str(accessories_notes))
                self.label_hidden_accessories_1_turret_size.configure(text=str(accessories_turret_size))
                self.accessories_qty_1_update()
                self.recalculate()

    def on_button_accessories_1_qty_up(self, *args):
        accessories_1_qty = self.var_accessories_1_qty.get()
        accessories_1_qty = accessories_1_qty + 1
        self.var_accessories_1_qty.set(value=accessories_1_qty)
        accessories_1_cost   = int(self.label_hidden_accessories_1_cost.cget("text"))
        accessories_1_weight = int(self.label_hidden_accessories_1_weight.cget("text"))
        accessories_1_space: str  = self.label_hidden_accessories_1_space.cget("text")
        accessories_1_dp:    str  = self.label_hidden_accessories_1_dp.cget("text")
        accessories_1_notes: str  = self.label_hidden_accessories_1_notes.cget("text")

        if accessories_1_space == "":
            accessories_1_space = 0.0
        else:
            accessories_1_space = float(accessories_1_space)

        self.label_accessories_1_cost.configure(text=self.float_to_str(accessories_1_cost * accessories_1_qty))
        self.label_accessories_1_weight.configure(text=self.float_to_str(accessories_1_weight * accessories_1_qty))
        self.label_accessories_1_space.configure(text=self.float_to_str(accessories_1_space * accessories_1_qty))
        self.label_accessories_1_dp.configure(text=str(accessories_1_dp))
        self.label_accessories_1_notes.configure(text=str(accessories_1_notes))
        self.accessories_special_processing()
        self.recalculate()

    def on_button_accessories_1_qty_down(self, *args):
        accessories_1_qty = self.var_accessories_1_qty.get()
        accessories_1_qty = max(accessories_1_qty - 1, 0)
        self.var_accessories_1_qty.set(value=accessories_1_qty)
        accessories_1_cost   = int(self.label_hidden_accessories_1_cost.cget("text"))
        accessories_1_weight = int(self.label_hidden_accessories_1_weight.cget("text"))
        accessories_1_space  = float(self.label_hidden_accessories_1_space.cget("text"))
        accessories_1_dp     = self.label_hidden_accessories_1_dp.cget("text")
        accessories_1_notes  = self.label_hidden_accessories_1_notes.cget("text")
        self.label_accessories_1_cost.configure(text=self.float_to_str(accessories_1_cost * accessories_1_qty))
        self.label_accessories_1_weight.configure(text=self.float_to_str(accessories_1_weight * accessories_1_qty))
        self.label_accessories_1_space.configure(text=self.float_to_str(accessories_1_space * accessories_1_qty))
        self.label_accessories_1_dp.configure(text=str(accessories_1_dp))
        if accessories_1_qty > 0:
            self.label_accessories_1_notes.configure(text=str(accessories_1_notes))
        else:
            self.label_accessories_1_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    def accessories_qty_1_update(self, *args):
        accessories_1_qty = self.var_accessories_1_qty.get()
        accessories_1_cost   = int(self.label_hidden_accessories_1_cost.cget("text"))
        accessories_1_weight = int(self.label_hidden_accessories_1_weight.cget("text"))
        accessories_1_space  = float(self.label_hidden_accessories_1_space.cget("text"))
        accessories_1_dp     = self.label_hidden_accessories_1_dp.cget("text")
        accessories_1_notes  = self.label_hidden_accessories_1_notes.cget("text")
        self.label_accessories_1_cost.configure(text=self.float_to_str(accessories_1_cost * accessories_1_qty))
        self.label_accessories_1_weight.configure(text=self.float_to_str(accessories_1_weight * accessories_1_qty))
        self.label_accessories_1_space.configure(text=self.float_to_str(accessories_1_space * accessories_1_qty))
        self.label_accessories_1_dp.configure(text=str(accessories_1_dp))
        if accessories_1_qty > 0:
            self.label_accessories_1_notes.configure(text=str(accessories_1_notes))
        else:
            self.label_accessories_1_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    ######################################################################
    # Accessories Row 2 processing here                                  #
    ######################################################################
    def add_labels_buttons_accessories_2_canvas(self, canvas_type):
        self.label_hidden_accessories_2_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_2_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_2_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_2_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_2_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_2_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_hidden_accessories_2_turret_size = tk.Label(canvas_type, text="0", anchor="w")

        self.label_accessories_2_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_2_cost.grid(column=self.grid_col_cost,row=self.grid_row_accessories_2, sticky="w")
        self.label_accessories_2_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_2_weight.grid(column=self.grid_col_weight ,row=self.grid_row_accessories_2, sticky="w")
        self.label_accessories_2_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_2_space.grid(column=self.grid_col_spaces,row=self.grid_row_accessories_2, sticky="w")
        self.label_accessories_2_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_2_dp.grid(column=self.grid_col_dp,row=self.grid_row_accessories_2, sticky="w")
        self.label_accessories_2_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_accessories_2_notes.grid(column=self.grid_col_power_factors,row=self.grid_row_accessories_2, sticky="w", columnspan=4)

        self.var_accessories_2_qty = tk.IntVar()
        self.entry_accessories_2_qty = ttk.Entry(canvas_type, textvariable=self.var_accessories_2_qty, width=3)
        self.entry_accessories_2_qty.grid(column=self.grid_col_qty, row=self.grid_row_accessories_2, sticky="w")
        self.var_accessories_2_qty.trace_add("write", self.accessories_qty_2_update)

    def add_dropdown_accessories_2_canvas(self, canvas_type):
        self.selected_accessories_2 = tk.StringVar()
        self.selected_accessories_2.set("Accessories")
        options = self.get_accessories_options()
        # Create the dropdown widget
        self.accessories_2_dropdown = ttk.OptionMenu(canvas_type, self.selected_accessories_2, "Accessory", *options) #filled elsewhere
        self.accessories_2_dropdown.grid(column=self.grid_col_item, row=self.grid_row_accessories_2, sticky="w")
        self.selected_accessories_2.trace_add("write", self.on_select_accessories_2)

    def on_select_accessories_2(self, *args):
        selected_value = self.selected_accessories_2.get()
        for entry in self.accessories_list: #use the same self.accessories_list for every accessories dropdown
            accessories_name: str = entry.get("Accessory Name")
            if selected_value == accessories_name:
                accessories_cost:          str = entry.get("Cost")
                accessories_weight:        str = entry.get("Weight")
                accessories_space:         str = entry.get("Space")
                accessories_dp:            str = entry.get("DP")
                accessories_notes:         str = entry.get("Notes")
                accessories_turret_size:   str = entry.get("Turret Size")

                if accessories_cost == "":
                    accessories_cost = "0"
                if accessories_weight == "":
                    accessories_weight = "0"
                if accessories_space == "":
                    accessories_space = "0"

                self.label_hidden_accessories_2_name.configure(text=self.float_to_str(accessories_name))
                self.label_hidden_accessories_2_cost.configure(text=self.float_to_str(accessories_cost))
                self.label_hidden_accessories_2_weight.configure(text=self.float_to_str(accessories_weight))
                self.label_hidden_accessories_2_space.configure(text=self.float_to_str(accessories_space))
                self.label_hidden_accessories_2_dp.configure(text=str(accessories_dp))
                self.label_hidden_accessories_2_notes.configure(text=str(accessories_notes))
                self.label_hidden_accessories_2_turret_size.configure(text=str(accessories_turret_size))
                self.accessories_qty_2_update()
                self.recalculate()
                return#exit now

    def on_button_accessories_2_qty_up(self, *args):
        accessories_2_qty = self.var_accessories_2_qty.get()
        accessories_2_qty = accessories_2_qty + 1
        self.var_accessories_2_qty.set(value=accessories_2_qty)
        accessories_2_cost   = int(self.label_hidden_accessories_2_cost.cget("text"))
        accessories_2_weight = int(self.label_hidden_accessories_2_weight.cget("text"))
        accessories_2_space: str  = self.label_hidden_accessories_2_space.cget("text")
        accessories_2_dp:    str  = self.label_hidden_accessories_2_dp.cget("text")
        accessories_2_notes: str  = self.label_hidden_accessories_2_notes.cget("text")

        if accessories_2_space == "":
            accessories_2_space = 0.0
        else:
            accessories_2_space = float(accessories_2_space)

        self.label_accessories_2_cost.configure(text=self.float_to_str(accessories_2_cost * accessories_2_qty))
        self.label_accessories_2_weight.configure(text=self.float_to_str(accessories_2_weight * accessories_2_qty))
        self.label_accessories_2_space.configure(text=self.float_to_str(accessories_2_space * accessories_2_qty))
        self.label_accessories_2_dp.configure(text=str(accessories_2_dp))
        self.label_accessories_2_notes.configure(text=str(accessories_2_notes))
        self.accessories_special_processing()
        self.recalculate()

    def on_button_accessories_2_qty_down(self, *args):
        accessories_2_qty = self.var_accessories_2_qty.get()
        accessories_2_qty = max(accessories_2_qty - 1, 0)
        self.var_accessories_2_qty.set(value=accessories_2_qty)
        accessories_2_cost   = int(self.label_hidden_accessories_2_cost.cget("text"))
        accessories_2_weight = int(self.label_hidden_accessories_2_weight.cget("text"))
        accessories_2_space  = float(self.label_hidden_accessories_2_space.cget("text"))
        accessories_2_dp     = self.label_hidden_accessories_2_dp.cget("text")
        accessories_2_notes  = self.label_hidden_accessories_2_notes.cget("text")
        self.label_accessories_2_cost.configure(text=self.float_to_str(accessories_2_cost * accessories_2_qty))
        self.label_accessories_2_weight.configure(text=self.float_to_str(accessories_2_weight * accessories_2_qty))
        self.label_accessories_2_space.configure(text=self.float_to_str(accessories_2_space * accessories_2_qty))
        self.label_accessories_2_dp.configure(text=str(accessories_2_dp))
        if accessories_2_qty > 0:
            self.label_accessories_2_notes.configure(text=str(accessories_2_notes))
        else:
            self.label_accessories_2_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    def accessories_qty_2_update(self, *args):
        accessories_2_qty = self.var_accessories_2_qty.get()
        accessories_2_cost   = int(self.label_hidden_accessories_2_cost.cget("text"))
        accessories_2_weight = int(self.label_hidden_accessories_2_weight.cget("text"))
        accessories_2_space  = float(self.label_hidden_accessories_2_space.cget("text"))
        accessories_2_dp     = self.label_hidden_accessories_2_dp.cget("text")
        accessories_2_notes  = self.label_hidden_accessories_2_notes.cget("text")
        self.label_accessories_2_cost.configure(text=self.float_to_str(accessories_2_cost * accessories_2_qty))
        self.label_accessories_2_weight.configure(text=self.float_to_str(accessories_2_weight * accessories_2_qty))
        self.label_accessories_2_space.configure(text=self.float_to_str(accessories_2_space * accessories_2_qty))
        self.label_accessories_2_dp.configure(text=str(accessories_2_dp))
        if accessories_2_qty > 0:
            self.label_accessories_2_notes.configure(text=str(accessories_2_notes))
        else:
            self.label_accessories_2_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    ######################################################################
    # Accessories Row 3 processing here                                  #
    ######################################################################
    def add_labels_buttons_accessories_3_canvas(self, canvas_type):
        self.label_hidden_accessories_3_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_3_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_3_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_3_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_3_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_3_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_hidden_accessories_3_turret_size = tk.Label(canvas_type, text="0", anchor="w")

        self.label_accessories_3_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_3_cost.grid(column=self.grid_col_cost,row=self.grid_row_accessories_3, sticky="w")
        self.label_accessories_3_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_3_weight.grid(column=self.grid_col_weight ,row=self.grid_row_accessories_3, sticky="w")
        self.label_accessories_3_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_3_space.grid(column=self.grid_col_spaces,row=self.grid_row_accessories_3, sticky="w")
        self.label_accessories_3_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_3_dp.grid(column=self.grid_col_dp,row=self.grid_row_accessories_3, sticky="w")
        self.label_accessories_3_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_accessories_3_notes.grid(column=self.grid_col_power_factors,row=self.grid_row_accessories_3, sticky="w", columnspan=4)

        self.var_accessories_3_qty = tk.IntVar()
        self.entry_accessories_3_qty = ttk.Entry(canvas_type, textvariable=self.var_accessories_3_qty, width=3)
        self.entry_accessories_3_qty.grid(column=self.grid_col_qty, row=self.grid_row_accessories_3, sticky="w")
        self.var_accessories_3_qty.trace_add("write", self.accessories_qty_3_update)

    def add_dropdown_accessories_3_canvas(self, canvas_type):
        self.selected_accessories_3 = tk.StringVar()
        self.selected_accessories_3.set("Accessories")
        options = self.get_accessories_options()
        # Create the dropdown widget
        self.accessories_3_dropdown = ttk.OptionMenu(canvas_type, self.selected_accessories_3, "Accessory", *options) #filled elsewhere
        self.accessories_3_dropdown.grid(column=self.grid_col_item, row=self.grid_row_accessories_3, sticky="w")
        self.selected_accessories_3.trace_add("write", self.on_select_accessories_3)

    def on_select_accessories_3(self, *args):
        selected_value = self.selected_accessories_3.get()
        for entry in self.accessories_list: #use the same self.accessories_list for every accessories dropdown
            accessories_name: str = entry.get("Accessory Name")
            if selected_value == accessories_name:
                accessories_cost:          str = entry.get("Cost")
                accessories_weight:        str = entry.get("Weight")
                accessories_space:         str = entry.get("Space")
                accessories_dp:            str = entry.get("DP")
                accessories_notes:         str = entry.get("Notes")
                accessories_turret_size:   str = entry.get("Turret Size")

                if accessories_cost == "":
                    accessories_cost = "0"
                if accessories_weight == "":
                    accessories_weight = "0"
                if accessories_space == "":
                    accessories_space = "0"

                self.label_hidden_accessories_3_name.configure(text=str(accessories_name))
                self.label_hidden_accessories_3_cost.configure(text=self.float_to_str(accessories_cost))
                self.label_hidden_accessories_3_weight.configure(text=self.float_to_str(accessories_weight))
                self.label_hidden_accessories_3_space.configure(text=self.float_to_str(accessories_space))
                self.label_hidden_accessories_3_dp.configure(text=str(accessories_dp))
                self.label_hidden_accessories_3_notes.configure(text=str(accessories_notes))
                self.label_hidden_accessories_3_turret_size.configure(text=str(accessories_turret_size))
                self.accessories_qty_3_update()
                self.recalculate()
                return#exit now

    def on_button_accessories_3_qty_up(self, *args):
        accessories_3_qty = self.var_accessories_3_qty.get()
        accessories_3_qty = accessories_3_qty + 1
        self.var_accessories_3_qty.set(value=accessories_3_qty)
        accessories_3_cost   = int(self.label_hidden_accessories_3_cost.cget("text"))
        accessories_3_weight = int(self.label_hidden_accessories_3_weight.cget("text"))
        accessories_3_space: str  = self.label_hidden_accessories_3_space.cget("text")
        accessories_3_dp:    str  = self.label_hidden_accessories_3_dp.cget("text")
        accessories_3_notes: str  = self.label_hidden_accessories_3_notes.cget("text")

        if accessories_3_space == "":
            accessories_3_space = 0.0
        else:
            accessories_3_space = float(accessories_3_space)

        self.label_accessories_3_cost.configure(text=self.float_to_str(accessories_3_cost * accessories_3_qty))
        self.label_accessories_3_weight.configure(text=self.float_to_str(accessories_3_weight * accessories_3_qty))
        self.label_accessories_3_space.configure(text=self.float_to_str(accessories_3_space * accessories_3_qty))
        self.label_accessories_3_dp.configure(text=str(accessories_3_dp))
        self.label_accessories_3_notes.configure(text=str(accessories_3_notes))
        self.accessories_special_processing()
        self.recalculate()

    def on_button_accessories_3_qty_down(self, *args):
        accessories_3_qty = self.var_accessories_3_qty.get()
        accessories_3_qty = max(accessories_3_qty - 1, 0)
        self.var_accessories_3_qty.set(value=accessories_3_qty)
        accessories_3_cost   = int(self.label_hidden_accessories_3_cost.cget("text"))
        accessories_3_weight = int(self.label_hidden_accessories_3_weight.cget("text"))
        accessories_3_space  = float(self.label_hidden_accessories_3_space.cget("text"))
        accessories_3_dp     = self.label_hidden_accessories_3_dp.cget("text")
        accessories_3_notes  = self.label_hidden_accessories_3_notes.cget("text")
        self.label_accessories_3_cost.configure(text=self.float_to_str(accessories_3_cost * accessories_3_qty))
        self.label_accessories_3_weight.configure(text=self.float_to_str(accessories_3_weight * accessories_3_qty))
        self.label_accessories_3_space.configure(text=self.float_to_str(accessories_3_space * accessories_3_qty))
        self.label_accessories_3_dp.configure(text=str(accessories_3_dp))
        if accessories_3_qty > 0:
            self.label_accessories_3_notes.configure(text=str(accessories_3_notes))
        else:
            self.label_accessories_3_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    def accessories_qty_3_update(self, *args):
        accessories_3_qty = self.var_accessories_3_qty.get()
        accessories_3_cost   = int(self.label_hidden_accessories_3_cost.cget("text"))
        accessories_3_weight = int(self.label_hidden_accessories_3_weight.cget("text"))
        accessories_3_space  = float(self.label_hidden_accessories_3_space.cget("text"))
        accessories_3_dp     = self.label_hidden_accessories_3_dp.cget("text")
        accessories_3_notes  = self.label_hidden_accessories_3_notes.cget("text")
        self.label_accessories_3_cost.configure(text=self.float_to_str(accessories_3_cost * accessories_3_qty))
        self.label_accessories_3_weight.configure(text=self.float_to_str(accessories_3_weight * accessories_3_qty))
        self.label_accessories_3_space.configure(text=self.float_to_str(accessories_3_space * accessories_3_qty))
        self.label_accessories_3_dp.configure(text=str(accessories_3_dp))
        if accessories_3_qty > 0:
            self.label_accessories_3_notes.configure(text=str(accessories_3_notes))
        else:
            self.label_accessories_3_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    ######################################################################
    # Accessories Row 4 processing here                                  #
    ######################################################################
    def add_labels_buttons_accessories_4_canvas(self, canvas_type):
        self.label_hidden_accessories_4_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_4_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_4_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_4_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_4_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_4_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_hidden_accessories_4_turret_size = tk.Label(canvas_type, text="0", anchor="w")

        self.label_accessories_4_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_4_cost.grid(column=self.grid_col_cost,row=self.grid_row_accessories_4, sticky="w")
        self.label_accessories_4_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_4_weight.grid(column=self.grid_col_weight ,row=self.grid_row_accessories_4, sticky="w")
        self.label_accessories_4_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_4_space.grid(column=self.grid_col_spaces,row=self.grid_row_accessories_4, sticky="w")
        self.label_accessories_4_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_4_dp.grid(column=self.grid_col_dp,row=self.grid_row_accessories_4, sticky="w")
        self.label_accessories_4_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_accessories_4_notes.grid(column=self.grid_col_power_factors,row=self.grid_row_accessories_4, sticky="w", columnspan=4)

        self.var_accessories_4_qty = tk.IntVar()
        self.entry_accessories_4_qty = ttk.Entry(canvas_type, textvariable=self.var_accessories_4_qty, width=3)
        self.entry_accessories_4_qty.grid(column=self.grid_col_qty,row=self.grid_row_accessories_4, sticky="w")
        self.var_accessories_4_qty.trace_add("write", self.accessories_qty_4_update)

    def add_dropdown_accessories_4_canvas(self, canvas_type):
        self.selected_accessories_4 = tk.StringVar()
        self.selected_accessories_4.set("Accessories")
        options = self.get_accessories_options()
        # Create the dropdown widget
        self.accessories_4_dropdown = ttk.OptionMenu(canvas_type, self.selected_accessories_4, "Accessory", *options) #filled elsewhere
        self.accessories_4_dropdown.grid(column=self.grid_col_item, row=self.grid_row_accessories_4, sticky="w")
        self.selected_accessories_4.trace_add("write", self.on_select_accessories_4)

    def on_select_accessories_4(self, *args):
        selected_value = self.selected_accessories_4.get()
        for entry in self.accessories_list: #use the same self.accessories_list for every accessories dropdown
            accessories_name: str = entry.get("Accessory Name")
            if selected_value == accessories_name:
                accessories_cost:          str = entry.get("Cost")
                accessories_weight:        str = entry.get("Weight")
                accessories_space:         str = entry.get("Space")
                accessories_dp:            str = entry.get("DP")
                accessories_notes:         str = entry.get("Notes")
                accessories_turret_size:   str = entry.get("Turret Size")

                if accessories_cost == "":
                    accessories_cost = "0"
                if accessories_weight == "":
                    accessories_weight = "0"
                if accessories_space == "":
                    accessories_space = "0"

                self.label_hidden_accessories_4_name.configure(text=str(accessories_name))
                self.label_hidden_accessories_4_cost.configure(text=self.float_to_str(accessories_cost))
                self.label_hidden_accessories_4_weight.configure(text=self.float_to_str(accessories_weight))
                self.label_hidden_accessories_4_space.configure(text=self.float_to_str(accessories_space))
                self.label_hidden_accessories_4_dp.configure(text=str(accessories_dp))
                self.label_hidden_accessories_4_notes.configure(text=str(accessories_notes))
                self.label_hidden_accessories_4_turret_size.configure(text=str(accessories_turret_size))
                self.accessories_qty_4_update()
                self.recalculate()
                return#exit now

    def on_button_accessories_4_qty_up(self, *args):
        accessories_4_qty = self.var_accessories_4_qty.get()
        accessories_4_qty = accessories_4_qty + 1
        self.var_accessories_4_qty.set(value=accessories_4_qty)
        accessories_4_cost   = int(self.label_hidden_accessories_4_cost.cget("text"))
        accessories_4_weight = int(self.label_hidden_accessories_4_weight.cget("text"))
        accessories_4_space: str  = self.label_hidden_accessories_4_space.cget("text")
        accessories_4_dp:    str  = self.label_hidden_accessories_4_dp.cget("text")
        accessories_4_notes: str  = self.label_hidden_accessories_4_notes.cget("text")

        if accessories_4_space == "":
            accessories_4_space = 0.0
        else:
            accessories_4_space = float(accessories_4_space)

        self.label_accessories_4_cost.configure(text=self.float_to_str(accessories_4_cost * accessories_4_qty))
        self.label_accessories_4_weight.configure(text=self.float_to_str(accessories_4_weight * accessories_4_qty))
        self.label_accessories_4_space.configure(text=self.float_to_str(accessories_4_space * accessories_4_qty))
        self.label_accessories_4_dp.configure(text=str(accessories_4_dp))
        self.label_accessories_4_notes.configure(text=str(accessories_4_notes))
        self.accessories_special_processing()
        self.recalculate()

    def on_button_accessories_4_qty_down(self, *args):
        accessories_4_qty = self.var_accessories_4_qty.get()
        accessories_4_qty = max(accessories_4_qty - 1, 0)
        self.var_accessories_4_qty.set(value=accessories_4_qty)
        accessories_4_cost   = int(self.label_hidden_accessories_4_cost.cget("text"))
        accessories_4_weight = int(self.label_hidden_accessories_4_weight.cget("text"))
        accessories_4_space  = float(self.label_hidden_accessories_4_space.cget("text"))
        accessories_4_dp     = self.label_hidden_accessories_4_dp.cget("text")
        accessories_4_notes  = self.label_hidden_accessories_4_notes.cget("text")
        self.label_accessories_4_cost.configure(text=self.float_to_str(accessories_4_cost * accessories_4_qty))
        self.label_accessories_4_weight.configure(text=self.float_to_str(accessories_4_weight * accessories_4_qty))
        self.label_accessories_4_space.configure(text=self.float_to_str(accessories_4_space * accessories_4_qty))
        self.label_accessories_4_dp.configure(text=str(accessories_4_dp))
        if accessories_4_qty > 0:
            self.label_accessories_4_notes.configure(text=str(accessories_4_notes))
        else:
            self.label_accessories_4_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    def accessories_qty_4_update(self, *args):
        accessories_4_qty = self.var_accessories_4_qty.get()
        accessories_4_cost   = int(self.label_hidden_accessories_4_cost.cget("text"))
        accessories_4_weight = int(self.label_hidden_accessories_4_weight.cget("text"))
        accessories_4_space  = float(self.label_hidden_accessories_4_space.cget("text"))
        accessories_4_dp     = self.label_hidden_accessories_4_dp.cget("text")
        accessories_4_notes  = self.label_hidden_accessories_4_notes.cget("text")
        self.label_accessories_4_cost.configure(text=self.float_to_str(accessories_4_cost * accessories_4_qty))
        self.label_accessories_4_weight.configure(text=self.float_to_str(accessories_4_weight * accessories_4_qty))
        self.label_accessories_4_space.configure(text=self.float_to_str(accessories_4_space * accessories_4_qty))
        self.label_accessories_4_dp.configure(text=str(accessories_4_dp))
        if accessories_4_qty > 0:
            self.label_accessories_4_notes.configure(text=str(accessories_4_notes))
        else:
            self.label_accessories_4_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    ######################################################################
    # Accessories Row 5 processing here                                  #
    ######################################################################
    def add_labels_buttons_accessories_5_canvas(self, canvas_type):
        self.label_hidden_accessories_5_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_5_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_5_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_5_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_5_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_5_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_hidden_accessories_5_turret_size = tk.Label(canvas_type, text="0", anchor="w")

        self.label_accessories_5_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_5_cost.grid(column=self.grid_col_cost,row=self.grid_row_accessories_5, sticky="w")
        self.label_accessories_5_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_5_weight.grid(column=self.grid_col_weight ,row=self.grid_row_accessories_5, sticky="w")
        self.label_accessories_5_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_5_space.grid(column=self.grid_col_spaces,row=self.grid_row_accessories_5, sticky="w")
        self.label_accessories_5_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_5_dp.grid(column=self.grid_col_dp,row=self.grid_row_accessories_5, sticky="w")
        self.label_accessories_5_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_accessories_5_notes.grid(column=self.grid_col_power_factors,row=self.grid_row_accessories_5, sticky="w", columnspan=4)

        self.var_accessories_5_qty = tk.IntVar()
        self.entry_accessories_5_qty = ttk.Entry(canvas_type, textvariable=self.var_accessories_5_qty, width=3)
        self.entry_accessories_5_qty.grid(column=self.grid_col_qty, row=self.grid_row_accessories_5, sticky="w")
        self.var_accessories_5_qty.trace_add("write", self.accessories_qty_5_update)

    def add_dropdown_accessories_5_canvas(self, canvas_type):
        self.selected_accessories_5 = tk.StringVar()
        self.selected_accessories_5.set("Accessories")
        options = self.get_accessories_options()
        # Create the dropdown widget
        self.accessories_5_dropdown = ttk.OptionMenu(canvas_type, self.selected_accessories_5, "Accessory", *options) #filled elsewhere
        self.accessories_5_dropdown.grid(column=self.grid_col_item, row=self.grid_row_accessories_5, sticky="w")
        self.selected_accessories_5.trace_add("write", self.on_select_accessories_5)

    def on_select_accessories_5(self, *args):
        selected_value = self.selected_accessories_5.get()
        for entry in self.accessories_list: #use the same self.accessories_list for every accessories dropdown
            accessories_name: str = entry.get("Accessory Name")
            if selected_value == accessories_name:
                accessories_cost:          str = entry.get("Cost")
                accessories_weight:        str = entry.get("Weight")
                accessories_space:         str = entry.get("Space")
                accessories_dp:            str = entry.get("DP")
                accessories_notes:         str = entry.get("Notes")
                accessories_turret_size:   str = entry.get("Turret Size")

                if accessories_cost == "":
                    accessories_cost = "0"
                if accessories_weight == "":
                    accessories_weight = "0"
                if accessories_space == "":
                    accessories_space = "0"

                self.label_hidden_accessories_5_name.configure(text=str(accessories_name))
                self.label_hidden_accessories_5_cost.configure(text=self.float_to_str(accessories_cost))
                self.label_hidden_accessories_5_weight.configure(text=self.float_to_str(accessories_weight))
                self.label_hidden_accessories_5_space.configure(text=self.float_to_str(accessories_space))
                self.label_hidden_accessories_5_dp.configure(text=str(accessories_dp))
                self.label_hidden_accessories_5_notes.configure(text=str(accessories_notes))
                self.label_hidden_accessories_5_turret_size.configure(text=str(accessories_turret_size))
                self.accessories_qty_5_update()
                self.recalculate()
                return#exit now

    def on_button_accessories_5_qty_up(self, *args):
        accessories_5_qty = self.var_accessories_5_qty.get()
        accessories_5_qty = accessories_5_qty + 1
        self.var_accessories_5_qty.set(value=accessories_5_qty)
        accessories_5_cost   = int(self.label_hidden_accessories_5_cost.cget("text"))
        accessories_5_weight = int(self.label_hidden_accessories_5_weight.cget("text"))
        accessories_5_space: str  = self.label_hidden_accessories_5_space.cget("text")
        accessories_5_dp:    str  = self.label_hidden_accessories_5_dp.cget("text")
        accessories_5_notes: str  = self.label_hidden_accessories_5_notes.cget("text")

        if accessories_5_space == "":
            accessories_5_space = 0.0
        else:
            accessories_5_space = float(accessories_5_space)

        self.label_accessories_5_cost.configure(text=self.float_to_str(accessories_5_cost * accessories_5_qty))
        self.label_accessories_5_weight.configure(text=self.float_to_str(accessories_5_weight * accessories_5_qty))
        self.label_accessories_5_space.configure(text=self.float_to_str(accessories_5_space * accessories_5_qty))
        self.label_accessories_5_dp.configure(text=str(accessories_5_dp))
        self.label_accessories_5_notes.configure(text=str(accessories_5_notes))
        self.accessories_special_processing()
        self.recalculate()

    def on_button_accessories_5_qty_down(self, *args):
        accessories_5_qty = self.var_accessories_5_qty.get()
        accessories_5_qty = max(accessories_5_qty - 1, 0)
        self.var_accessories_5_qty.set(value=accessories_5_qty)
        accessories_5_cost   = int(self.label_hidden_accessories_5_cost.cget("text"))
        accessories_5_weight = int(self.label_hidden_accessories_5_weight.cget("text"))
        accessories_5_space  = float(self.label_hidden_accessories_5_space.cget("text"))
        accessories_5_dp     = self.label_hidden_accessories_5_dp.cget("text")
        accessories_5_notes  = self.label_hidden_accessories_5_notes.cget("text")
        self.label_accessories_5_cost.configure(text=self.float_to_str(accessories_5_cost * accessories_5_qty))
        self.label_accessories_5_weight.configure(text=self.float_to_str(accessories_5_weight * accessories_5_qty))
        self.label_accessories_5_space.configure(text=self.float_to_str(accessories_5_space * accessories_5_qty))
        self.label_accessories_5_dp.configure(text=str(accessories_5_dp))
        if accessories_5_qty > 0:
            self.label_accessories_5_notes.configure(text=str(accessories_5_notes))
        else:
            self.label_accessories_5_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    def accessories_qty_5_update(self, *args):
        accessories_5_qty = self.var_accessories_5_qty.get()
        accessories_5_cost   = int(self.label_hidden_accessories_5_cost.cget("text"))
        accessories_5_weight = int(self.label_hidden_accessories_5_weight.cget("text"))
        accessories_5_space  = float(self.label_hidden_accessories_5_space.cget("text"))
        accessories_5_dp     = self.label_hidden_accessories_5_dp.cget("text")
        accessories_5_notes  = self.label_hidden_accessories_5_notes.cget("text")
        self.label_accessories_5_cost.configure(text=self.float_to_str(accessories_5_cost * accessories_5_qty))
        self.label_accessories_5_weight.configure(text=self.float_to_str(accessories_5_weight * accessories_5_qty))
        self.label_accessories_5_space.configure(text=self.float_to_str(accessories_5_space * accessories_5_qty))
        self.label_accessories_5_dp.configure(text=str(accessories_5_dp))
        if accessories_5_qty > 0:
            self.label_accessories_5_notes.configure(text=str(accessories_5_notes))
        else:
            self.label_accessories_5_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    ######################################################################
    # Accessories Row 6 processing here                                  #
    ######################################################################
    def add_labels_buttons_accessories_6_canvas(self, canvas_type):
        self.label_hidden_accessories_6_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_6_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_6_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_6_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_6_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_6_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_hidden_accessories_6_turret_size = tk.Label(canvas_type, text="0", anchor="w")

        self.label_accessories_6_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_6_cost.grid(column=self.grid_col_cost,row=self.grid_row_accessories_6, sticky="w")
        self.label_accessories_6_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_6_weight.grid(column=self.grid_col_weight ,row=self.grid_row_accessories_6, sticky="w")
        self.label_accessories_6_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_6_space.grid(column=self.grid_col_spaces,row=self.grid_row_accessories_6, sticky="w")
        self.label_accessories_6_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_6_dp.grid(column=self.grid_col_dp,row=self.grid_row_accessories_6, sticky="w")
        self.label_accessories_6_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_accessories_6_notes.grid(column=self.grid_col_power_factors,row=self.grid_row_accessories_6, sticky="w", columnspan=4)

        self.var_accessories_6_qty = tk.IntVar()
        self.entry_accessories_6_qty = ttk.Entry(canvas_type, textvariable=self.var_accessories_6_qty, width=3)
        self.entry_accessories_6_qty.grid(column=self.grid_col_qty, row=self.grid_row_accessories_6, sticky="w")
        self.var_accessories_6_qty.trace_add("write", self.accessories_qty_6_update)

    def add_dropdown_accessories_6_canvas(self, canvas_type):
        self.selected_accessories_6 = tk.StringVar()
        self.selected_accessories_6.set("Accessories")
        options = self.get_accessories_options()
        # Create the dropdown widget
        self.accessories_6_dropdown = ttk.OptionMenu(canvas_type, self.selected_accessories_6, "Accessory", *options) #filled elsewhere
        self.accessories_6_dropdown.grid(column=self.grid_col_item, row=self.grid_row_accessories_6, sticky="w")
        self.selected_accessories_6.trace_add("write", self.on_select_accessories_6)

    def on_select_accessories_6(self, *args):
        selected_value = self.selected_accessories_6.get()
        for entry in self.accessories_list: #use the same self.accessories_list for every accessories dropdown
            accessories_name: str = entry.get("Accessory Name")
            if selected_value == accessories_name:
                accessories_cost:          str = entry.get("Cost")
                accessories_weight:        str = entry.get("Weight")
                accessories_space:         str = entry.get("Space")
                accessories_dp:            str = entry.get("DP")
                accessories_notes:         str = entry.get("Notes")
                accessories_turret_size:   str = entry.get("Turret Size")

                if accessories_cost == "":
                    accessories_cost = "0"
                if accessories_weight == "":
                    accessories_weight = "0"
                if accessories_space == "":
                    accessories_space = "0"

                self.label_hidden_accessories_6_name.configure(text=str(accessories_name))
                self.label_hidden_accessories_6_cost.configure(text=self.float_to_str(accessories_cost))
                self.label_hidden_accessories_6_weight.configure(text=self.float_to_str(accessories_weight))
                self.label_hidden_accessories_6_space.configure(text=self.float_to_str(accessories_space))
                self.label_hidden_accessories_6_dp.configure(text=str(accessories_dp))
                self.label_hidden_accessories_6_notes.configure(text=str(accessories_notes))
                self.label_hidden_accessories_6_turret_size.configure(text=str(accessories_turret_size))
                self.accessories_qty_6_update()
                self.recalculate()
                return#exit now

    def on_button_accessories_6_qty_up(self, *args):
        accessories_6_qty = self.var_accessories_6_qty.get()
        accessories_6_qty = accessories_6_qty + 1
        self.var_accessories_6_qty.set(value=accessories_6_qty)
        accessories_6_cost   = int(self.label_hidden_accessories_6_cost.cget("text"))
        accessories_6_weight = int(self.label_hidden_accessories_6_weight.cget("text"))
        accessories_6_space: str  = self.label_hidden_accessories_6_space.cget("text")
        accessories_6_dp:    str  = self.label_hidden_accessories_6_dp.cget("text")
        accessories_6_notes: str  = self.label_hidden_accessories_6_notes.cget("text")

        if accessories_6_space == "":
            accessories_6_space = 0.0
        else:
            accessories_6_space = float(accessories_6_space)

        self.label_accessories_6_cost.configure(text=self.float_to_str(accessories_6_cost * accessories_6_qty))
        self.label_accessories_6_weight.configure(text=self.float_to_str(accessories_6_weight * accessories_6_qty))
        self.label_accessories_6_space.configure(text=self.float_to_str(accessories_6_space * accessories_6_qty))
        self.label_accessories_6_dp.configure(text=str(accessories_6_dp))
        self.label_accessories_6_notes.configure(text=str(accessories_6_notes))
        self.accessories_special_processing()
        self.recalculate()

    def on_button_accessories_6_qty_down(self, *args):
        accessories_6_qty = self.var_accessories_6_qty.get()
        accessories_6_qty = max(accessories_6_qty - 1, 0)
        self.var_accessories_6_qty.set(value=accessories_6_qty)
        accessories_6_cost   = int(self.label_hidden_accessories_6_cost.cget("text"))
        accessories_6_weight = int(self.label_hidden_accessories_6_weight.cget("text"))
        accessories_6_space  = float(self.label_hidden_accessories_6_space.cget("text"))
        accessories_6_dp     = self.label_hidden_accessories_6_dp.cget("text")
        accessories_6_notes  = self.label_hidden_accessories_6_notes.cget("text")
        self.label_accessories_6_cost.configure(text=self.float_to_str(accessories_6_cost * accessories_6_qty))
        self.label_accessories_6_weight.configure(text=self.float_to_str(accessories_6_weight * accessories_6_qty))
        self.label_accessories_6_space.configure(text=self.float_to_str(accessories_6_space * accessories_6_qty))
        self.label_accessories_6_dp.configure(text=str(accessories_6_dp))
        if accessories_6_qty > 0:
            self.label_accessories_6_notes.configure(text=str(accessories_6_notes))
        else:
            self.label_accessories_6_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    def accessories_qty_6_update(self, *args):
        accessories_6_qty = self.var_accessories_6_qty.get()
        accessories_6_cost   = int(self.label_hidden_accessories_6_cost.cget("text"))
        accessories_6_weight = int(self.label_hidden_accessories_6_weight.cget("text"))
        accessories_6_space  = float(self.label_hidden_accessories_6_space.cget("text"))
        accessories_6_dp     = self.label_hidden_accessories_6_dp.cget("text")
        accessories_6_notes  = self.label_hidden_accessories_6_notes.cget("text")
        self.label_accessories_6_cost.configure(text=self.float_to_str(accessories_6_cost * accessories_6_qty))
        self.label_accessories_6_weight.configure(text=self.float_to_str(accessories_6_weight * accessories_6_qty))
        self.label_accessories_6_space.configure(text=self.float_to_str(accessories_6_space * accessories_6_qty))
        self.label_accessories_6_dp.configure(text=str(accessories_6_dp))
        if accessories_6_qty > 0:
            self.label_accessories_6_notes.configure(text=str(accessories_6_notes))
        else:
            self.label_accessories_6_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    ######################################################################
    # Accessories Row 7 processing here                                  #
    ######################################################################
    def add_labels_buttons_accessories_7_canvas(self, canvas_type):
        self.label_hidden_accessories_7_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_7_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_7_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_7_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_7_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_7_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_hidden_accessories_7_turret_size = tk.Label(canvas_type, text="0", anchor="w")

        self.label_accessories_7_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_7_cost.grid(column=self.grid_col_cost,row=self.grid_row_accessories_7, sticky="w")
        self.label_accessories_7_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_7_weight.grid(column=self.grid_col_weight ,row=self.grid_row_accessories_7, sticky="w")
        self.label_accessories_7_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_7_space.grid(column=self.grid_col_spaces,row=self.grid_row_accessories_7, sticky="w")
        self.label_accessories_7_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_7_dp.grid(column=self.grid_col_dp,row=self.grid_row_accessories_7, sticky="w")
        self.label_accessories_7_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_accessories_7_notes.grid(column=self.grid_col_power_factors,row=self.grid_row_accessories_7, sticky="w", columnspan=4)

        self.var_accessories_7_qty = tk.IntVar()
        self.entry_accessories_7_qty = ttk.Entry(canvas_type, textvariable=self.var_accessories_7_qty, width=3)
        self.entry_accessories_7_qty.grid(column=self.grid_col_qty, row=self.grid_row_accessories_7, sticky="w")
        self.var_accessories_7_qty.trace_add("write", self.accessories_qty_7_update)

    def add_dropdown_accessories_7_canvas(self, canvas_type):
        self.selected_accessories_7 = tk.StringVar()
        self.selected_accessories_7.set("Accessories")
        options = self.get_accessories_options()
        # Create the dropdown widget
        self.accessories_7_dropdown = ttk.OptionMenu(canvas_type, self.selected_accessories_7, "Accessory", *options) #filled elsewhere
        self.accessories_7_dropdown.grid(column=self.grid_col_item, row=self.grid_row_accessories_7, sticky="w")
        self.selected_accessories_7.trace_add("write", self.on_select_accessories_7)

    def on_select_accessories_7(self, *args):
        selected_value = self.selected_accessories_7.get()
        for entry in self.accessories_list: #use the same self.accessories_list for every accessories dropdown
            accessories_name: str = entry.get("Accessory Name")
            if selected_value == accessories_name:
                accessories_cost:          str = entry.get("Cost")
                accessories_weight:        str = entry.get("Weight")
                accessories_space:         str = entry.get("Space")
                accessories_dp:            str = entry.get("DP")
                accessories_notes:         str = entry.get("Notes")
                accessories_turret_size:   str = entry.get("Turret Size")

                if accessories_cost == "":
                    accessories_cost = "0"
                if accessories_weight == "":
                    accessories_weight = "0"
                if accessories_space == "":
                    accessories_space = "0"

                self.label_hidden_accessories_7_name.configure(text=str(accessories_name))
                self.label_hidden_accessories_7_cost.configure(text=self.float_to_str(accessories_cost))
                self.label_hidden_accessories_7_weight.configure(text=self.float_to_str(accessories_weight))
                self.label_hidden_accessories_7_space.configure(text=self.float_to_str(accessories_space))
                self.label_hidden_accessories_7_dp.configure(text=str(accessories_dp))
                self.label_hidden_accessories_7_notes.configure(text=str(accessories_notes))
                self.label_hidden_accessories_7_turret_size.configure(text=str(accessories_turret_size))
                self.accessories_qty_7_update()
                self.recalculate()
                return#exit now

    def on_button_accessories_7_qty_up(self, *args):
        accessories_7_qty = self.var_accessories_7_qty.get()
        accessories_7_qty = accessories_7_qty + 1
        self.var_accessories_7_qty.set(value=accessories_7_qty)
        accessories_7_cost   = int(self.label_hidden_accessories_7_cost.cget("text"))
        accessories_7_weight = int(self.label_hidden_accessories_7_weight.cget("text"))
        accessories_7_space: str  = self.label_hidden_accessories_7_space.cget("text")
        accessories_7_dp:    str  = self.label_hidden_accessories_7_dp.cget("text")
        accessories_7_notes: str  = self.label_hidden_accessories_7_notes.cget("text")

        if accessories_7_space == "":
            accessories_7_space = 0.0
        else:
            accessories_7_space = float(accessories_7_space)

        self.label_accessories_7_cost.configure(text=self.float_to_str(accessories_7_cost * accessories_7_qty))
        self.label_accessories_7_weight.configure(text=self.float_to_str(accessories_7_weight * accessories_7_qty))
        self.label_accessories_7_space.configure(text=self.float_to_str(accessories_7_space * accessories_7_qty))
        self.label_accessories_7_dp.configure(text=str(accessories_7_dp))
        self.label_accessories_7_notes.configure(text=str(accessories_7_notes))
        self.accessories_special_processing()
        self.recalculate()

    def on_button_accessories_7_qty_down(self, *args):
        accessories_7_qty = self.var_accessories_7_qty.get()
        accessories_7_qty = max(accessories_7_qty - 1, 0)
        self.var_accessories_7_qty.set(value=accessories_7_qty)
        accessories_7_cost   = int(self.label_hidden_accessories_7_cost.cget("text"))
        accessories_7_weight = int(self.label_hidden_accessories_7_weight.cget("text"))
        accessories_7_space  = float(self.label_hidden_accessories_7_space.cget("text"))
        accessories_7_dp     = self.label_hidden_accessories_7_dp.cget("text")
        accessories_7_notes  = self.label_hidden_accessories_7_notes.cget("text")
        self.label_accessories_7_cost.configure(text=self.float_to_str(accessories_7_cost * accessories_7_qty))
        self.label_accessories_7_weight.configure(text=self.float_to_str(accessories_7_weight * accessories_7_qty))
        self.label_accessories_7_space.configure(text=self.float_to_str(accessories_7_space * accessories_7_qty))
        self.label_accessories_7_dp.configure(text=str(accessories_7_dp))
        if accessories_7_qty > 0:
            self.label_accessories_7_notes.configure(text=str(accessories_7_notes))
        else:
            self.label_accessories_7_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    def accessories_qty_7_update(self, *args):
        accessories_7_qty = self.var_accessories_7_qty.get()
        accessories_7_cost   = int(self.label_hidden_accessories_7_cost.cget("text"))
        accessories_7_weight = int(self.label_hidden_accessories_7_weight.cget("text"))
        accessories_7_space  = float(self.label_hidden_accessories_7_space.cget("text"))
        accessories_7_dp     = self.label_hidden_accessories_7_dp.cget("text")
        accessories_7_notes  = self.label_hidden_accessories_7_notes.cget("text")
        self.label_accessories_7_cost.configure(text=self.float_to_str(accessories_7_cost * accessories_7_qty))
        self.label_accessories_7_weight.configure(text=self.float_to_str(accessories_7_weight * accessories_7_qty))
        self.label_accessories_7_space.configure(text=self.float_to_str(accessories_7_space * accessories_7_qty))
        self.label_accessories_7_dp.configure(text=str(accessories_7_dp))
        if accessories_7_qty > 0:
            self.label_accessories_7_notes.configure(text=str(accessories_7_notes))
        else:
            self.label_accessories_7_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    ######################################################################
    # Accessories Row 8 processing here                                  #
    ######################################################################
    def add_labels_buttons_accessories_8_canvas(self, canvas_type):
        self.label_hidden_accessories_8_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_8_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_8_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_8_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_8_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_8_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_hidden_accessories_8_turret_size = tk.Label(canvas_type, text="0", anchor="w")

        self.label_accessories_8_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_8_cost.grid(column=self.grid_col_cost,row=self.grid_row_accessories_8, sticky="w")
        self.label_accessories_8_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_8_weight.grid(column=self.grid_col_weight ,row=self.grid_row_accessories_8, sticky="w")
        self.label_accessories_8_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_8_space.grid(column=self.grid_col_spaces,row=self.grid_row_accessories_8, sticky="w")
        self.label_accessories_8_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_8_dp.grid(column=self.grid_col_dp,row=self.grid_row_accessories_8, sticky="w")
        self.label_accessories_8_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_accessories_8_notes.grid(column=self.grid_col_power_factors,row=self.grid_row_accessories_8, sticky="w", columnspan=4)

        self.var_accessories_8_qty = tk.IntVar()
        self.entry_accessories_8_qty = ttk.Entry(canvas_type, textvariable=self.var_accessories_8_qty, width=3)
        self.entry_accessories_8_qty.grid(column=self.grid_col_qty, row=self.grid_row_accessories_8, sticky="w")
        self.var_accessories_8_qty.trace_add("write", self.accessories_qty_8_update)

    def add_dropdown_accessories_8_canvas(self, canvas_type):
        self.selected_accessories_8 = tk.StringVar()
        self.selected_accessories_8.set("Accessories")
        options = self.get_accessories_options()
        # Create the dropdown widget
        self.accessories_8_dropdown = ttk.OptionMenu(canvas_type, self.selected_accessories_8, "Accessory", *options) #filled elsewhere
        self.accessories_8_dropdown.grid(column=self.grid_col_item, row=self.grid_row_accessories_8, sticky="w")
        self.selected_accessories_8.trace_add("write", self.on_select_accessories_8)

    def on_select_accessories_8(self, *args):
        selected_value = self.selected_accessories_8.get()
        for entry in self.accessories_list: #use the same self.accessories_list for every accessories dropdown
            accessories_name: str = entry.get("Accessory Name")
            if selected_value == accessories_name:
                accessories_cost:          str = entry.get("Cost")
                accessories_weight:        str = entry.get("Weight")
                accessories_space:         str = entry.get("Space")
                accessories_dp:            str = entry.get("DP")
                accessories_notes:         str = entry.get("Notes")
                accessories_turret_size:   str = entry.get("Turret Size")

                if accessories_cost == "":
                    accessories_cost = "0"
                if accessories_weight == "":
                    accessories_weight = "0"
                if accessories_space == "":
                    accessories_space = "0"

                self.label_hidden_accessories_8_name.configure(text=str(accessories_name))
                self.label_hidden_accessories_8_cost.configure(text=self.float_to_str(accessories_cost))
                self.label_hidden_accessories_8_weight.configure(text=self.float_to_str(accessories_weight))
                self.label_hidden_accessories_8_space.configure(text=self.float_to_str(accessories_space))
                self.label_hidden_accessories_8_dp.configure(text=str(accessories_dp))
                self.label_hidden_accessories_8_notes.configure(text=str(accessories_notes))
                self.label_hidden_accessories_8_turret_size.configure(text=str(accessories_turret_size))
                self.accessories_qty_8_update()
                self.recalculate()
                return#exit now

    def on_button_accessories_8_qty_up(self, *args):
        accessories_8_qty = self.var_accessories_8_qty.get()
        accessories_8_qty = accessories_8_qty + 1
        self.var_accessories_8_qty.set(value=accessories_8_qty)
        accessories_8_cost   = int(self.label_hidden_accessories_8_cost.cget("text"))
        accessories_8_weight = int(self.label_hidden_accessories_8_weight.cget("text"))
        accessories_8_space: str  = self.label_hidden_accessories_8_space.cget("text")
        accessories_8_dp:    str  = self.label_hidden_accessories_8_dp.cget("text")
        accessories_8_notes: str  = self.label_hidden_accessories_8_notes.cget("text")

        if accessories_8_space == "":
            accessories_8_space = 0.0
        else:
            accessories_8_space = float(accessories_8_space)

        self.label_accessories_8_cost.configure(text=self.float_to_str(accessories_8_cost * accessories_8_qty))
        self.label_accessories_8_weight.configure(text=self.float_to_str(accessories_8_weight * accessories_8_qty))
        self.label_accessories_8_space.configure(text=self.float_to_str(accessories_8_space * accessories_8_qty))
        self.label_accessories_8_dp.configure(text=str(accessories_8_dp))
        self.label_accessories_8_notes.configure(text=str(accessories_8_notes))
        self.accessories_special_processing()
        self.recalculate()

    def on_button_accessories_8_qty_down(self, *args):
        accessories_8_qty = self.var_accessories_8_qty.get()
        accessories_8_qty = max(accessories_8_qty - 1, 0)
        self.var_accessories_8_qty.set(value=accessories_8_qty)
        accessories_8_cost   = int(self.label_hidden_accessories_8_cost.cget("text"))
        accessories_8_weight = int(self.label_hidden_accessories_8_weight.cget("text"))
        accessories_8_space  = float(self.label_hidden_accessories_8_space.cget("text"))
        accessories_8_dp     = self.label_hidden_accessories_8_dp.cget("text")
        accessories_8_notes  = self.label_hidden_accessories_8_notes.cget("text")
        self.label_accessories_8_cost.configure(text=self.float_to_str(accessories_8_cost * accessories_8_qty))
        self.label_accessories_8_weight.configure(text=self.float_to_str(accessories_8_weight * accessories_8_qty))
        self.label_accessories_8_space.configure(text=self.float_to_str(accessories_8_space * accessories_8_qty))
        self.label_accessories_8_dp.configure(text=str(accessories_8_dp))
        if accessories_8_qty > 0:
            self.label_accessories_8_notes.configure(text=str(accessories_8_notes))
        else:
            self.label_accessories_8_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    def accessories_qty_8_update(self, *args):
        accessories_8_qty = self.var_accessories_8_qty.get()
        accessories_8_cost   = int(self.label_hidden_accessories_8_cost.cget("text"))
        accessories_8_weight = int(self.label_hidden_accessories_8_weight.cget("text"))
        accessories_8_space  = float(self.label_hidden_accessories_8_space.cget("text"))
        accessories_8_dp     = self.label_hidden_accessories_8_dp.cget("text")
        accessories_8_notes  = self.label_hidden_accessories_8_notes.cget("text")
        self.label_accessories_8_cost.configure(text=self.float_to_str(accessories_8_cost * accessories_8_qty))
        self.label_accessories_8_weight.configure(text=self.float_to_str(accessories_8_weight * accessories_8_qty))
        self.label_accessories_8_space.configure(text=self.float_to_str(accessories_8_space * accessories_8_qty))
        self.label_accessories_8_dp.configure(text=str(accessories_8_dp))
        if accessories_8_qty > 0:
            self.label_accessories_8_notes.configure(text=str(accessories_8_notes))
        else:
            self.label_accessories_8_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    ######################################################################
    # Accessories Row 9 processing here                                  #
    ######################################################################
    def add_labels_buttons_accessories_9_canvas(self, canvas_type):
        self.label_hidden_accessories_9_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_9_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_9_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_9_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_9_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_9_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_hidden_accessories_9_turret_size = tk.Label(canvas_type, text="0", anchor="w")

        self.label_accessories_9_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_9_cost.grid(column=self.grid_col_cost,row=self.grid_row_accessories_9, sticky="w")
        self.label_accessories_9_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_9_weight.grid(column=self.grid_col_weight ,row=self.grid_row_accessories_9, sticky="w")
        self.label_accessories_9_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_9_space.grid(column=self.grid_col_spaces,row=self.grid_row_accessories_9, sticky="w")
        self.label_accessories_9_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_9_dp.grid(column=self.grid_col_dp,row=self.grid_row_accessories_9, sticky="w")
        self.label_accessories_9_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_accessories_9_notes.grid(column=self.grid_col_power_factors,row=self.grid_row_accessories_9, sticky="w", columnspan=4)

        self.var_accessories_9_qty = tk.IntVar()
        self.entry_accessories_9_qty = ttk.Entry(canvas_type, textvariable=self.var_accessories_9_qty, width=3)
        self.entry_accessories_9_qty.grid(column=self.grid_col_qty, row=self.grid_row_accessories_9, sticky="w")
        self.var_accessories_9_qty.trace_add("write", self.accessories_qty_9_update)

    def add_dropdown_accessories_9_canvas(self, canvas_type):
        self.selected_accessories_9 = tk.StringVar()
        self.selected_accessories_9.set("Accessories")
        options = self.get_accessories_options()
        # Create the dropdown widget
        self.accessories_9_dropdown = ttk.OptionMenu(canvas_type, self.selected_accessories_9, "Accessory", *options) #filled elsewhere
        self.accessories_9_dropdown.grid(column=self.grid_col_item, row=self.grid_row_accessories_9, sticky="w")
        self.selected_accessories_9.trace_add("write", self.on_select_accessories_9)

    def on_select_accessories_9(self, *args):
        selected_value = self.selected_accessories_9.get()
        for entry in self.accessories_list: #use the same self.accessories_list for every accessories dropdown
            accessories_name: str = entry.get("Accessory Name")
            if selected_value == accessories_name:
                accessories_cost:          str = entry.get("Cost")
                accessories_weight:        str = entry.get("Weight")
                accessories_space:         str = entry.get("Space")
                accessories_dp:            str = entry.get("DP")
                accessories_notes:         str = entry.get("Notes")
                accessories_turret_size:   str = entry.get("Turret Size")

                if accessories_cost == "":
                    accessories_cost = "0"
                if accessories_weight == "":
                    accessories_weight = "0"
                if accessories_space == "":
                    accessories_space = "0"

                self.label_hidden_accessories_9_name.configure(text=str(accessories_name))
                self.label_hidden_accessories_9_cost.configure(text=self.float_to_str(accessories_cost))
                self.label_hidden_accessories_9_weight.configure(text=self.float_to_str(accessories_weight))
                self.label_hidden_accessories_9_space.configure(text=self.float_to_str(accessories_space))
                self.label_hidden_accessories_9_dp.configure(text=str(accessories_dp))
                self.label_hidden_accessories_9_notes.configure(text=str(accessories_notes))
                self.label_hidden_accessories_9_turret_size.configure(text=str(accessories_turret_size))
                self.accessories_qty_9_update()
                self.recalculate()
                return#exit now

    def on_button_accessories_9_qty_up(self, *args):
        accessories_9_qty = self.var_accessories_9_qty.get()
        accessories_9_qty = accessories_9_qty + 1
        self.var_accessories_9_qty.set(value=accessories_9_qty)
        accessories_9_cost   = int(self.label_hidden_accessories_9_cost.cget("text"))
        accessories_9_weight = int(self.label_hidden_accessories_9_weight.cget("text"))
        accessories_9_space: str  = self.label_hidden_accessories_9_space.cget("text")
        accessories_9_dp:    str  = self.label_hidden_accessories_9_dp.cget("text")
        accessories_9_notes: str  = self.label_hidden_accessories_9_notes.cget("text")

        if accessories_9_space == "":
            accessories_9_space = 0.0
        else:
            accessories_9_space = float(accessories_9_space)

        self.label_accessories_9_cost.configure(text=self.float_to_str(accessories_9_cost * accessories_9_qty))
        self.label_accessories_9_weight.configure(text=self.float_to_str(accessories_9_weight * accessories_9_qty))
        self.label_accessories_9_space.configure(text=self.float_to_str(accessories_9_space * accessories_9_qty))
        self.label_accessories_9_dp.configure(text=str(accessories_9_dp))
        self.label_accessories_9_notes.configure(text=str(accessories_9_notes))
        self.accessories_special_processing()
        self.recalculate()

    def on_button_accessories_9_qty_down(self, *args):
        accessories_9_qty = self.var_accessories_9_qty.get()
        accessories_9_qty = max(accessories_9_qty - 1, 0)
        self.var_accessories_9_qty.set(value=accessories_9_qty)
        accessories_9_cost   = int(self.label_hidden_accessories_9_cost.cget("text"))
        accessories_9_weight = int(self.label_hidden_accessories_9_weight.cget("text"))
        accessories_9_space  = float(self.label_hidden_accessories_9_space.cget("text"))
        accessories_9_dp     = self.label_hidden_accessories_9_dp.cget("text")
        accessories_9_notes  = self.label_hidden_accessories_9_notes.cget("text")
        self.label_accessories_9_cost.configure(text=self.float_to_str(accessories_9_cost * accessories_9_qty))
        self.label_accessories_9_weight.configure(text=self.float_to_str(accessories_9_weight * accessories_9_qty))
        self.label_accessories_9_space.configure(text=self.float_to_str(accessories_9_space * accessories_9_qty))
        self.label_accessories_9_dp.configure(text=str(accessories_9_dp))
        if accessories_9_qty > 0:
            self.label_accessories_9_notes.configure(text=str(accessories_9_notes))
        else:
            self.label_accessories_9_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    def accessories_qty_9_update(self, *args):
        accessories_9_qty = self.var_accessories_9_qty.get()
        accessories_9_cost   = int(self.label_hidden_accessories_9_cost.cget("text"))
        accessories_9_weight = int(self.label_hidden_accessories_9_weight.cget("text"))
        accessories_9_space  = float(self.label_hidden_accessories_9_space.cget("text"))
        accessories_9_dp     = self.label_hidden_accessories_9_dp.cget("text")
        accessories_9_notes  = self.label_hidden_accessories_9_notes.cget("text")
        self.label_accessories_9_cost.configure(text=self.float_to_str(accessories_9_cost * accessories_9_qty))
        self.label_accessories_9_weight.configure(text=self.float_to_str(accessories_9_weight * accessories_9_qty))
        self.label_accessories_9_space.configure(text=self.float_to_str(accessories_9_space * accessories_9_qty))
        self.label_accessories_9_dp.configure(text=str(accessories_9_dp))
        if accessories_9_qty > 0:
            self.label_accessories_9_notes.configure(text=str(accessories_9_notes))
        else:
            self.label_accessories_9_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    ######################################################################
    # Accessories Row 10 processing here                                 #
    ######################################################################
    def add_labels_buttons_accessories_10_canvas(self, canvas_type):
        self.label_hidden_accessories_10_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_10_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_10_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_10_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_10_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_10_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_hidden_accessories_10_turret_size = tk.Label(canvas_type, text="0", anchor="w")

        self.label_accessories_10_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_10_cost.grid(column=self.grid_col_cost,row=self.grid_row_accessories_10, sticky="w")
        self.label_accessories_10_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_10_weight.grid(column=self.grid_col_weight ,row=self.grid_row_accessories_10, sticky="w")
        self.label_accessories_10_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_10_space.grid(column=self.grid_col_spaces,row=self.grid_row_accessories_10, sticky="w")
        self.label_accessories_10_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_10_dp.grid(column=self.grid_col_dp,row=self.grid_row_accessories_10, sticky="w")
        self.label_accessories_10_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_accessories_10_notes.grid(column=self.grid_col_power_factors,row=self.grid_row_accessories_10, sticky="w", columnspan=4)

        self.var_accessories_10_qty = tk.IntVar()
        self.entry_accessories_10_qty = ttk.Entry(canvas_type, textvariable=self.var_accessories_10_qty, width=3)
        self.entry_accessories_10_qty.grid(column=self.grid_col_qty, row=self.grid_row_accessories_10, sticky="w")
        self.var_accessories_10_qty.trace_add("write", self.accessories_qty_10_update)

    def add_dropdown_accessories_10_canvas(self, canvas_type):
        self.selected_accessories_10 = tk.StringVar()
        self.selected_accessories_10.set("Accessories")
        options = self.get_accessories_options()
        # Create the dropdown widget
        self.accessories_10_dropdown = ttk.OptionMenu(canvas_type, self.selected_accessories_10, "Accessory", *options) #filled elsewhere
        self.accessories_10_dropdown.grid(column=self.grid_col_item, row=self.grid_row_accessories_10, sticky="w")
        self.selected_accessories_10.trace_add("write", self.on_select_accessories_10)

    def on_select_accessories_10(self, *args):
        selected_value = self.selected_accessories_10.get()
        for entry in self.accessories_list: #use the same self.accessories_list for every accessories dropdown
            accessories_name: str = entry.get("Accessory Name")
            if selected_value == accessories_name:
                accessories_cost:          str = entry.get("Cost")
                accessories_weight:        str = entry.get("Weight")
                accessories_space:         str = entry.get("Space")
                accessories_dp:            str = entry.get("DP")
                accessories_notes:         str = entry.get("Notes")
                accessories_turret_size:   str = entry.get("Turret Size")

                if accessories_cost == "":
                    accessories_cost = "0"
                if accessories_weight == "":
                    accessories_weight = "0"
                if accessories_space == "":
                    accessories_space = "0"

                self.label_hidden_accessories_10_name.configure(text=str(accessories_name))
                self.label_hidden_accessories_10_cost.configure(text=self.float_to_str(accessories_cost))
                self.label_hidden_accessories_10_weight.configure(text=self.float_to_str(accessories_weight))
                self.label_hidden_accessories_10_space.configure(text=self.float_to_str(accessories_space))
                self.label_hidden_accessories_10_dp.configure(text=str(accessories_dp))
                self.label_hidden_accessories_10_notes.configure(text=str(accessories_notes))
                self.label_hidden_accessories_10_turret_size.configure(text=str(accessories_turret_size))
                self.accessories_qty_10_update()
                self.recalculate()
                return#exit now

    def on_button_accessories_10_qty_up(self, *args):
        accessories_10_qty = self.var_accessories_10_qty.get()
        accessories_10_qty = accessories_10_qty + 1
        self.var_accessories_10_qty.set(value=accessories_10_qty)
        accessories_10_cost   = int(self.label_hidden_accessories_10_cost.cget("text"))
        accessories_10_weight = int(self.label_hidden_accessories_10_weight.cget("text"))
        accessories_10_space: str  = self.label_hidden_accessories_10_space.cget("text")
        accessories_10_dp:    str  = self.label_hidden_accessories_10_dp.cget("text")
        accessories_10_notes: str  = self.label_hidden_accessories_10_notes.cget("text")

        if accessories_10_space == "":
            accessories_10_space = 0.0
        else:
            accessories_10_space = float(accessories_10_space)

        self.label_accessories_10_cost.configure(text=self.float_to_str(accessories_10_cost * accessories_10_qty))
        self.label_accessories_10_weight.configure(text=self.float_to_str(accessories_10_weight * accessories_10_qty))
        self.label_accessories_10_space.configure(text=self.float_to_str(accessories_10_space * accessories_10_qty))
        self.label_accessories_10_dp.configure(text=str(accessories_10_dp))
        self.label_accessories_10_notes.configure(text=str(accessories_10_notes))
        self.accessories_special_processing()
        self.recalculate()

    def on_button_accessories_10_qty_down(self, *args):
        accessories_10_qty = self.var_accessories_10_qty.get()
        accessories_10_qty = max(accessories_10_qty - 1, 0)
        self.var_accessories_10_qty.set(value=accessories_10_qty)
        accessories_10_cost   = int(self.label_hidden_accessories_10_cost.cget("text"))
        accessories_10_weight = int(self.label_hidden_accessories_10_weight.cget("text"))
        accessories_10_space  = float(self.label_hidden_accessories_10_space.cget("text"))
        accessories_10_dp     = self.label_hidden_accessories_10_dp.cget("text")
        accessories_10_notes  = self.label_hidden_accessories_10_notes.cget("text")
        self.label_accessories_10_cost.configure(text=self.float_to_str(accessories_10_cost * accessories_10_qty))
        self.label_accessories_10_weight.configure(text=self.float_to_str(accessories_10_weight * accessories_10_qty))
        self.label_accessories_10_space.configure(text=self.float_to_str(accessories_10_space * accessories_10_qty))
        self.label_accessories_10_dp.configure(text=str(accessories_10_dp))
        if accessories_10_qty > 0:
            self.label_accessories_10_notes.configure(text=str(accessories_10_notes))
        else:
            self.label_accessories_10_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    def accessories_qty_10_update(self, *args):
        accessories_10_qty = self.var_accessories_10_qty.get()
        accessories_10_cost   = int(self.label_hidden_accessories_10_cost.cget("text"))
        accessories_10_weight = int(self.label_hidden_accessories_10_weight.cget("text"))
        accessories_10_space  = float(self.label_hidden_accessories_10_space.cget("text"))
        accessories_10_dp     = self.label_hidden_accessories_10_dp.cget("text")
        accessories_10_notes  = self.label_hidden_accessories_10_notes.cget("text")
        self.label_accessories_10_cost.configure(text=self.float_to_str(accessories_10_cost * accessories_10_qty))
        self.label_accessories_10_weight.configure(text=self.float_to_str(accessories_10_weight * accessories_10_qty))
        self.label_accessories_10_space.configure(text=self.float_to_str(accessories_10_space * accessories_10_qty))
        self.label_accessories_10_dp.configure(text=str(accessories_10_dp))
        if accessories_10_qty > 0:
            self.label_accessories_10_notes.configure(text=str(accessories_10_notes))
        else:
            self.label_accessories_10_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    ######################################################################
    # Accessories Row 11 processing here                                 #
    ######################################################################
    def add_labels_buttons_accessories_11_canvas(self, canvas_type):
        self.label_hidden_accessories_11_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_11_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_11_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_11_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_11_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_11_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_hidden_accessories_11_turret_size = tk.Label(canvas_type, text="0", anchor="w")

        self.label_accessories_11_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_11_cost.grid(column=self.grid_col_cost,row=self.grid_row_accessories_11, sticky="w")
        self.label_accessories_11_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_11_weight.grid(column=self.grid_col_weight ,row=self.grid_row_accessories_11, sticky="w")
        self.label_accessories_11_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_11_space.grid(column=self.grid_col_spaces,row=self.grid_row_accessories_11, sticky="w")
        self.label_accessories_11_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_11_dp.grid(column=self.grid_col_dp,row=self.grid_row_accessories_11, sticky="w")
        self.label_accessories_11_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_accessories_11_notes.grid(column=self.grid_col_power_factors,row=self.grid_row_accessories_11, sticky="w", columnspan=4)

        self.var_accessories_11_qty = tk.IntVar()
        self.entry_accessories_11_qty = ttk.Entry(canvas_type, textvariable=self.var_accessories_11_qty, width=3)
        self.entry_accessories_11_qty.grid(column=self.grid_col_qty, row=self.grid_row_accessories_11, sticky="w")
        self.var_accessories_11_qty.trace_add("write", self.accessories_qty_11_update)

    def add_dropdown_accessories_11_canvas(self, canvas_type):
        self.selected_accessories_11 = tk.StringVar()
        self.selected_accessories_11.set("Accessories")
        options = self.get_accessories_options()
        # Create the dropdown widget
        self.accessories_11_dropdown = ttk.OptionMenu(canvas_type, self.selected_accessories_11, "Accessory", *options) #filled elsewhere
        self.accessories_11_dropdown.grid(column=self.grid_col_item, row=self.grid_row_accessories_11, sticky="w")
        self.selected_accessories_11.trace_add("write", self.on_select_accessories_11)

    def on_select_accessories_11(self, *args):
        selected_value = self.selected_accessories_11.get()
        for entry in self.accessories_list: #use the same self.accessories_list for every accessories dropdown
            accessories_name: str = entry.get("Accessory Name")
            if selected_value == accessories_name:
                accessories_cost:          str = entry.get("Cost")
                accessories_weight:        str = entry.get("Weight")
                accessories_space:         str = entry.get("Space")
                accessories_dp:            str = entry.get("DP")
                accessories_notes:         str = entry.get("Notes")
                accessories_turret_size:   str = entry.get("Turret Size")

                if accessories_cost == "":
                    accessories_cost = "0"
                if accessories_weight == "":
                    accessories_weight = "0"
                if accessories_space == "":
                    accessories_space = "0"

                self.label_hidden_accessories_11_name.configure(text=str(accessories_name))
                self.label_hidden_accessories_11_cost.configure(text=self.float_to_str(accessories_cost))
                self.label_hidden_accessories_11_weight.configure(text=self.float_to_str(accessories_weight))
                self.label_hidden_accessories_11_space.configure(text=self.float_to_str(accessories_space))
                self.label_hidden_accessories_11_dp.configure(text=str(accessories_dp))
                self.label_hidden_accessories_11_notes.configure(text=str(accessories_notes))
                self.label_hidden_accessories_11_turret_size.configure(text=str(accessories_turret_size))
                self.accessories_qty_11_update()
                self.recalculate()
                return#exit now

    def on_button_accessories_11_qty_up(self, *args):
        accessories_11_qty = self.var_accessories_11_qty.get()
        accessories_11_qty = accessories_11_qty + 1
        self.var_accessories_11_qty.set(value=accessories_11_qty)
        accessories_11_cost   = int(self.label_hidden_accessories_11_cost.cget("text"))
        accessories_11_weight = int(self.label_hidden_accessories_11_weight.cget("text"))
        accessories_11_space: str  = self.label_hidden_accessories_11_space.cget("text")
        accessories_11_dp:    str  = self.label_hidden_accessories_11_dp.cget("text")
        accessories_11_notes: str  = self.label_hidden_accessories_11_notes.cget("text")

        if accessories_11_space == "":
            accessories_11_space = 0.0
        else:
            accessories_11_space = float(accessories_11_space)

        self.label_accessories_11_cost.configure(text=self.float_to_str(accessories_11_cost * accessories_11_qty))
        self.label_accessories_11_weight.configure(text=self.float_to_str(accessories_11_weight * accessories_11_qty))
        self.label_accessories_11_space.configure(text=self.float_to_str(accessories_11_space * accessories_11_qty))
        self.label_accessories_11_dp.configure(text=str(accessories_11_dp))
        self.label_accessories_11_notes.configure(text=str(accessories_11_notes))
        self.accessories_special_processing()
        self.recalculate()

    def on_button_accessories_11_qty_down(self, *args):
        accessories_11_qty = self.var_accessories_11_qty.get()
        accessories_11_qty = max(accessories_11_qty - 1, 0)
        self.var_accessories_11_qty.set(value=accessories_11_qty)
        accessories_11_cost   = int(self.label_hidden_accessories_11_cost.cget("text"))
        accessories_11_weight = int(self.label_hidden_accessories_11_weight.cget("text"))
        accessories_11_space  = float(self.label_hidden_accessories_11_space.cget("text"))
        accessories_11_dp     = self.label_hidden_accessories_11_dp.cget("text")
        accessories_11_notes  = self.label_hidden_accessories_11_notes.cget("text")
        self.label_accessories_11_cost.configure(text=self.float_to_str(accessories_11_cost * accessories_11_qty))
        self.label_accessories_11_weight.configure(text=self.float_to_str(accessories_11_weight * accessories_11_qty))
        self.label_accessories_11_space.configure(text=self.float_to_str(accessories_11_space * accessories_11_qty))
        self.label_accessories_11_dp.configure(text=str(accessories_11_dp))
        if accessories_11_qty > 0:
            self.label_accessories_11_notes.configure(text=str(accessories_11_notes))
        else:
            self.label_accessories_11_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    def accessories_qty_11_update(self, *args):
        accessories_11_qty = self.var_accessories_11_qty.get()
        accessories_11_cost   = int(self.label_hidden_accessories_11_cost.cget("text"))
        accessories_11_weight = int(self.label_hidden_accessories_11_weight.cget("text"))
        accessories_11_space  = float(self.label_hidden_accessories_11_space.cget("text"))
        accessories_11_dp     = self.label_hidden_accessories_11_dp.cget("text")
        accessories_11_notes  = self.label_hidden_accessories_11_notes.cget("text")
        self.label_accessories_11_cost.configure(text=self.float_to_str(accessories_11_cost * accessories_11_qty))
        self.label_accessories_11_weight.configure(text=self.float_to_str(accessories_11_weight * accessories_11_qty))
        self.label_accessories_11_space.configure(text=self.float_to_str(accessories_11_space * accessories_11_qty))
        self.label_accessories_11_dp.configure(text=str(accessories_11_dp))
        if accessories_11_qty > 0:
            self.label_accessories_11_notes.configure(text=str(accessories_11_notes))
        else:
            self.label_accessories_11_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    ######################################################################
    # Accessories Row 12 processing here                                 #
    ######################################################################
    def add_labels_buttons_accessories_12_canvas(self, canvas_type):
        self.label_hidden_accessories_12_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_12_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_12_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_12_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_12_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_12_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_hidden_accessories_12_turret_size = tk.Label(canvas_type, text="0", anchor="w")

        self.label_accessories_12_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_12_cost.grid(column=self.grid_col_cost,row=self.grid_row_accessories_12, sticky="w")
        self.label_accessories_12_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_12_weight.grid(column=self.grid_col_weight ,row=self.grid_row_accessories_12, sticky="w")
        self.label_accessories_12_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_12_space.grid(column=self.grid_col_spaces,row=self.grid_row_accessories_12, sticky="w")
        self.label_accessories_12_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_12_dp.grid(column=self.grid_col_dp,row=self.grid_row_accessories_12, sticky="w")
        self.label_accessories_12_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_accessories_12_notes.grid(column=self.grid_col_power_factors,row=self.grid_row_accessories_12, sticky="w", columnspan=4)

        self.var_accessories_12_qty = tk.IntVar()
        self.entry_accessories_12_qty = ttk.Entry(canvas_type, textvariable=self.var_accessories_12_qty, width=3)
        self.entry_accessories_12_qty.grid(column=self.grid_col_qty, row=self.grid_row_accessories_12, sticky="w")
        self.var_accessories_12_qty.trace_add("write", self.accessories_qty_12_update)

    def add_dropdown_accessories_12_canvas(self, canvas_type):
        self.selected_accessories_12 = tk.StringVar()
        self.selected_accessories_12.set("Accessories")
        options = self.get_accessories_options()
        # Create the dropdown widget
        self.accessories_12_dropdown = ttk.OptionMenu(canvas_type, self.selected_accessories_12, "Accessory", *options) #filled elsewhere
        self.accessories_12_dropdown.grid(column=self.grid_col_item, row=self.grid_row_accessories_12, sticky="w")
        self.selected_accessories_12.trace_add("write", self.on_select_accessories_12)

    def on_select_accessories_12(self, *args):
        selected_value = self.selected_accessories_12.get()
        for entry in self.accessories_list: #use the same self.accessories_list for every accessories dropdown
            accessories_name: str = entry.get("Accessory Name")
            if selected_value == accessories_name:
                accessories_cost:          str = entry.get("Cost")
                accessories_weight:        str = entry.get("Weight")
                accessories_space:         str = entry.get("Space")
                accessories_dp:            str = entry.get("DP")
                accessories_notes:         str = entry.get("Notes")
                accessories_turret_size:   str = entry.get("Turret Size")

                if accessories_cost == "":
                    accessories_cost = "0"
                if accessories_weight == "":
                    accessories_weight = "0"
                if accessories_space == "":
                    accessories_space = "0"

                self.label_hidden_accessories_12_name.configure(text=str(accessories_name))
                self.label_hidden_accessories_12_cost.configure(text=self.float_to_str(accessories_cost))
                self.label_hidden_accessories_12_weight.configure(text=self.float_to_str(accessories_weight))
                self.label_hidden_accessories_12_space.configure(text=self.float_to_str(accessories_space))
                self.label_hidden_accessories_12_dp.configure(text=str(accessories_dp))
                self.label_hidden_accessories_12_notes.configure(text=str(accessories_notes))
                self.label_hidden_accessories_12_turret_size.configure(text=str(accessories_turret_size))
                self.accessories_qty_12_update()
                self.recalculate()
                return#exit now

    def on_button_accessories_12_qty_up(self, *args):
        accessories_12_qty = self.var_accessories_12_qty.get()
        accessories_12_qty = accessories_12_qty + 1
        self.var_accessories_12_qty.set(value=accessories_12_qty)
        accessories_12_cost   = int(self.label_hidden_accessories_12_cost.cget("text"))
        accessories_12_weight = int(self.label_hidden_accessories_12_weight.cget("text"))
        accessories_12_space: str  = self.label_hidden_accessories_12_space.cget("text")
        accessories_12_dp:    str  = self.label_hidden_accessories_12_dp.cget("text")
        accessories_12_notes: str  = self.label_hidden_accessories_12_notes.cget("text")

        if accessories_12_space == "":
            accessories_12_space = 0.0
        else:
            accessories_12_space = float(accessories_12_space)

        self.label_accessories_12_cost.configure(text=self.float_to_str(accessories_12_cost * accessories_12_qty))
        self.label_accessories_12_weight.configure(text=self.float_to_str(accessories_12_weight * accessories_12_qty))
        self.label_accessories_12_space.configure(text=self.float_to_str(accessories_12_space * accessories_12_qty))
        self.label_accessories_12_dp.configure(text=str(accessories_12_dp))
        self.label_accessories_12_notes.configure(text=str(accessories_12_notes))
        self.accessories_special_processing()
        self.recalculate()

    def on_button_accessories_12_qty_down(self, *args):
        accessories_12_qty = self.var_accessories_12_qty.get()
        accessories_12_qty = max(accessories_12_qty - 1, 0)
        self.var_accessories_12_qty.set(value=accessories_12_qty)
        accessories_12_cost   = int(self.label_hidden_accessories_12_cost.cget("text"))
        accessories_12_weight = int(self.label_hidden_accessories_12_weight.cget("text"))
        accessories_12_space  = float(self.label_hidden_accessories_12_space.cget("text"))
        accessories_12_dp     = self.label_hidden_accessories_12_dp.cget("text")
        accessories_12_notes  = self.label_hidden_accessories_12_notes.cget("text")
        self.label_accessories_12_cost.configure(text=self.float_to_str(accessories_12_cost * accessories_12_qty))
        self.label_accessories_12_weight.configure(text=self.float_to_str(accessories_12_weight * accessories_12_qty))
        self.label_accessories_12_space.configure(text=self.float_to_str(accessories_12_space * accessories_12_qty))
        self.label_accessories_12_dp.configure(text=str(accessories_12_dp))
        if accessories_12_qty > 0:
            self.label_accessories_12_notes.configure(text=str(accessories_12_notes))
        else:
            self.label_accessories_12_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    def accessories_qty_12_update(self, *args):
        accessories_12_qty = self.var_accessories_12_qty.get()
        accessories_12_cost   = int(self.label_hidden_accessories_12_cost.cget("text"))
        accessories_12_weight = int(self.label_hidden_accessories_12_weight.cget("text"))
        accessories_12_space  = float(self.label_hidden_accessories_12_space.cget("text"))
        accessories_12_dp     = self.label_hidden_accessories_12_dp.cget("text")
        accessories_12_notes  = self.label_hidden_accessories_12_notes.cget("text")
        self.label_accessories_12_cost.configure(text=self.float_to_str(accessories_12_cost * accessories_12_qty))
        self.label_accessories_12_weight.configure(text=self.float_to_str(accessories_12_weight * accessories_12_qty))
        self.label_accessories_12_space.configure(text=self.float_to_str(accessories_12_space * accessories_12_qty))
        self.label_accessories_12_dp.configure(text=str(accessories_12_dp))
        if accessories_12_qty > 0:
            self.label_accessories_12_notes.configure(text=str(accessories_12_notes))
        else:
            self.label_accessories_12_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    ######################################################################
    # Accessories Row 13 processing here                                 #
    ######################################################################
    def add_labels_buttons_accessories_13_canvas(self, canvas_type):
        self.label_hidden_accessories_13_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_13_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_13_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_13_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_13_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_13_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_hidden_accessories_13_turret_size = tk.Label(canvas_type, text="0", anchor="w")

        self.label_accessories_13_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_13_cost.grid(column=self.grid_col_cost,row=self.grid_row_accessories_13, sticky="w")
        self.label_accessories_13_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_13_weight.grid(column=self.grid_col_weight ,row=self.grid_row_accessories_13, sticky="w")
        self.label_accessories_13_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_13_space.grid(column=self.grid_col_spaces,row=self.grid_row_accessories_13, sticky="w")
        self.label_accessories_13_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_13_dp.grid(column=self.grid_col_dp,row=self.grid_row_accessories_13, sticky="w")
        self.label_accessories_13_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_accessories_13_notes.grid(column=self.grid_col_power_factors,row=self.grid_row_accessories_13, sticky="w", columnspan=4)

        self.var_accessories_13_qty = tk.IntVar()
        self.entry_accessories_13_qty = ttk.Entry(canvas_type, textvariable=self.var_accessories_13_qty, width=3)
        self.entry_accessories_13_qty.grid(column=self.grid_col_qty, row=self.grid_row_accessories_13, sticky="w")
        self.var_accessories_13_qty.trace_add("write", self.accessories_qty_13_update)

    def add_dropdown_accessories_13_canvas(self, canvas_type):
        self.selected_accessories_13 = tk.StringVar()
        self.selected_accessories_13.set("Accessories")
        options = self.get_accessories_options()
        # Create the dropdown widget
        self.accessories_13_dropdown = ttk.OptionMenu(canvas_type, self.selected_accessories_13, "Accessory", *options) #filled elsewhere
        self.accessories_13_dropdown.grid(column=self.grid_col_item, row=self.grid_row_accessories_13, sticky="w")
        self.selected_accessories_13.trace_add("write", self.on_select_accessories_13)

    def on_select_accessories_13(self, *args):
        selected_value = self.selected_accessories_13.get()
        for entry in self.accessories_list: #use the same self.accessories_list for every accessories dropdown
            accessories_name: str = entry.get("Accessory Name")
            if selected_value == accessories_name:
                accessories_cost:          str = entry.get("Cost")
                accessories_weight:        str = entry.get("Weight")
                accessories_space:         str = entry.get("Space")
                accessories_dp:            str = entry.get("DP")
                accessories_notes:         str = entry.get("Notes")
                accessories_turret_size:   str = entry.get("Turret Size")

                if accessories_cost == "":
                    accessories_cost = "0"
                if accessories_weight == "":
                    accessories_weight = "0"
                if accessories_space == "":
                    accessories_space = "0"

                self.label_hidden_accessories_13_name.configure(text=str(accessories_name))
                self.label_hidden_accessories_13_cost.configure(text=self.float_to_str(accessories_cost))
                self.label_hidden_accessories_13_weight.configure(text=self.float_to_str(accessories_weight))
                self.label_hidden_accessories_13_space.configure(text=self.float_to_str(accessories_space))
                self.label_hidden_accessories_13_dp.configure(text=str(accessories_dp))
                self.label_hidden_accessories_13_notes.configure(text=str(accessories_notes))
                self.label_hidden_accessories_13_turret_size.configure(text=str(accessories_turret_size))
                self.accessories_qty_13_update()
                self.recalculate()
                return#exit now

    def on_button_accessories_13_qty_up(self, *args):
        accessories_13_qty = self.var_accessories_13_qty.get()
        accessories_13_qty = accessories_13_qty + 1
        self.var_accessories_13_qty.set(value=accessories_13_qty)
        accessories_13_cost   = int(self.label_hidden_accessories_13_cost.cget("text"))
        accessories_13_weight = int(self.label_hidden_accessories_13_weight.cget("text"))
        accessories_13_space: str  = self.label_hidden_accessories_13_space.cget("text")
        accessories_13_dp:    str  = self.label_hidden_accessories_13_dp.cget("text")
        accessories_13_notes: str  = self.label_hidden_accessories_13_notes.cget("text")

        if accessories_13_space == "":
            accessories_13_space = 0.0
        else:
            accessories_13_space = float(accessories_13_space)

        self.label_accessories_13_cost.configure(text=self.float_to_str(accessories_13_cost * accessories_13_qty))
        self.label_accessories_13_weight.configure(text=self.float_to_str(accessories_13_weight * accessories_13_qty))
        self.label_accessories_13_space.configure(text=self.float_to_str(accessories_13_space * accessories_13_qty))
        self.label_accessories_13_dp.configure(text=str(accessories_13_dp))
        self.label_accessories_13_notes.configure(text=str(accessories_13_notes))
        self.accessories_special_processing()
        self.recalculate()

    def on_button_accessories_13_qty_down(self, *args):
        accessories_13_qty = self.var_accessories_13_qty.get()
        accessories_13_qty = max(accessories_13_qty - 1, 0)
        self.var_accessories_13_qty.set(value=accessories_13_qty)
        accessories_13_cost   = int(self.label_hidden_accessories_13_cost.cget("text"))
        accessories_13_weight = int(self.label_hidden_accessories_13_weight.cget("text"))
        accessories_13_space  = float(self.label_hidden_accessories_13_space.cget("text"))
        accessories_13_dp     = self.label_hidden_accessories_13_dp.cget("text")
        accessories_13_notes  = self.label_hidden_accessories_13_notes.cget("text")
        self.label_accessories_13_cost.configure(text=self.float_to_str(accessories_13_cost * accessories_13_qty))
        self.label_accessories_13_weight.configure(text=self.float_to_str(accessories_13_weight * accessories_13_qty))
        self.label_accessories_13_space.configure(text=self.float_to_str(accessories_13_space * accessories_13_qty))
        self.label_accessories_13_dp.configure(text=str(accessories_13_dp))
        if accessories_13_qty > 0:
            self.label_accessories_13_notes.configure(text=str(accessories_13_notes))
        else:
            self.label_accessories_13_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    def accessories_qty_13_update(self, *args):
        accessories_13_qty = self.var_accessories_13_qty.get()
        accessories_13_cost   = int(self.label_hidden_accessories_13_cost.cget("text"))
        accessories_13_weight = int(self.label_hidden_accessories_13_weight.cget("text"))
        accessories_13_space  = float(self.label_hidden_accessories_13_space.cget("text"))
        accessories_13_dp     = self.label_hidden_accessories_13_dp.cget("text")
        accessories_13_notes  = self.label_hidden_accessories_13_notes.cget("text")
        self.label_accessories_13_cost.configure(text=self.float_to_str(accessories_13_cost * accessories_13_qty))
        self.label_accessories_13_weight.configure(text=self.float_to_str(accessories_13_weight * accessories_13_qty))
        self.label_accessories_13_space.configure(text=self.float_to_str(accessories_13_space * accessories_13_qty))
        self.label_accessories_13_dp.configure(text=str(accessories_13_dp))
        if accessories_13_qty > 0:
            self.label_accessories_13_notes.configure(text=str(accessories_13_notes))
        else:
            self.label_accessories_13_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    ######################################################################
    # Accessories Row 14 processing here                                 #
    ######################################################################
    def add_labels_buttons_accessories_14_canvas(self, canvas_type):
        self.label_hidden_accessories_14_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_14_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_14_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_14_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_14_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_14_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_hidden_accessories_14_turret_size = tk.Label(canvas_type, text="0", anchor="w")

        self.label_accessories_14_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_14_cost.grid(column=self.grid_col_cost,row=self.grid_row_accessories_14, sticky="w")
        self.label_accessories_14_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_14_weight.grid(column=self.grid_col_weight ,row=self.grid_row_accessories_14, sticky="w")
        self.label_accessories_14_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_14_space.grid(column=self.grid_col_spaces,row=self.grid_row_accessories_14, sticky="w")
        self.label_accessories_14_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_14_dp.grid(column=self.grid_col_dp,row=self.grid_row_accessories_14, sticky="w")
        self.label_accessories_14_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_accessories_14_notes.grid(column=self.grid_col_power_factors,row=self.grid_row_accessories_14, sticky="w", columnspan=4)

        self.var_accessories_14_qty = tk.IntVar()
        self.entry_accessories_14_qty = ttk.Entry(canvas_type, textvariable=self.var_accessories_14_qty, width=3)
        self.entry_accessories_14_qty.grid(column=self.grid_col_qty, row=self.grid_row_accessories_14, sticky="w")
        self.var_accessories_14_qty.trace_add("write", self.accessories_qty_14_update)

    def add_dropdown_accessories_14_canvas(self, canvas_type):
        self.selected_accessories_14 = tk.StringVar()
        self.selected_accessories_14.set("Accessories")
        options = self.get_accessories_options()
        # Create the dropdown widget
        self.accessories_14_dropdown = ttk.OptionMenu(canvas_type, self.selected_accessories_14, "Accessory", *options) #filled elsewhere
        self.accessories_14_dropdown.grid(column=self.grid_col_item, row=self.grid_row_accessories_14, sticky="w")
        self.selected_accessories_14.trace_add("write", self.on_select_accessories_14)

    def on_select_accessories_14(self, *args):
        selected_value = self.selected_accessories_14.get()
        for entry in self.accessories_list: #use the same self.accessories_list for every accessories dropdown
            accessories_name: str = entry.get("Accessory Name")
            if selected_value == accessories_name:
                accessories_cost:          str = entry.get("Cost")
                accessories_weight:        str = entry.get("Weight")
                accessories_space:         str = entry.get("Space")
                accessories_dp:            str = entry.get("DP")
                accessories_notes:         str = entry.get("Notes")
                accessories_turret_size:   str = entry.get("Turret Size")

                if accessories_cost == "":
                    accessories_cost = "0"
                if accessories_weight == "":
                    accessories_weight = "0"
                if accessories_space == "":
                    accessories_space = "0"

                self.label_hidden_accessories_14_name.configure(text=str(accessories_name))
                self.label_hidden_accessories_14_cost.configure(text=self.float_to_str(accessories_cost))
                self.label_hidden_accessories_14_weight.configure(text=self.float_to_str(accessories_weight))
                self.label_hidden_accessories_14_space.configure(text=self.float_to_str(accessories_space))
                self.label_hidden_accessories_14_dp.configure(text=str(accessories_dp))
                self.label_hidden_accessories_14_notes.configure(text=str(accessories_notes))
                self.label_hidden_accessories_14_turret_size.configure(text=str(accessories_turret_size))
                self.accessories_qty_14_update()
                self.recalculate()
                return#exit now

    def on_button_accessories_14_qty_up(self, *args):
        accessories_14_qty = self.var_accessories_14_qty.get()
        accessories_14_qty = accessories_14_qty + 1
        self.var_accessories_14_qty.set(value=accessories_14_qty)
        accessories_14_cost   = int(self.label_hidden_accessories_14_cost.cget("text"))
        accessories_14_weight = int(self.label_hidden_accessories_14_weight.cget("text"))
        accessories_14_space: str  = self.label_hidden_accessories_14_space.cget("text")
        accessories_14_dp:    str  = self.label_hidden_accessories_14_dp.cget("text")
        accessories_14_notes: str  = self.label_hidden_accessories_14_notes.cget("text")

        if accessories_14_space == "":
            accessories_14_space = 0.0
        else:
            accessories_14_space = float(accessories_14_space)

        self.label_accessories_14_cost.configure(text=self.float_to_str(accessories_14_cost * accessories_14_qty))
        self.label_accessories_14_weight.configure(text=self.float_to_str(accessories_14_weight * accessories_14_qty))
        self.label_accessories_14_space.configure(text=self.float_to_str(accessories_14_space * accessories_14_qty))
        self.label_accessories_14_dp.configure(text=str(accessories_14_dp))
        self.label_accessories_14_notes.configure(text=str(accessories_14_notes))
        self.accessories_special_processing()
        self.recalculate()

    def on_button_accessories_14_qty_down(self, *args):
        accessories_14_qty = self.var_accessories_14_qty.get()
        accessories_14_qty = max(accessories_14_qty - 1, 0)
        self.var_accessories_14_qty.set(value=accessories_14_qty)
        accessories_14_cost   = int(self.label_hidden_accessories_14_cost.cget("text"))
        accessories_14_weight = int(self.label_hidden_accessories_14_weight.cget("text"))
        accessories_14_space  = float(self.label_hidden_accessories_14_space.cget("text"))
        accessories_14_dp     = self.label_hidden_accessories_14_dp.cget("text")
        accessories_14_notes  = self.label_hidden_accessories_14_notes.cget("text")
        self.label_accessories_14_cost.configure(text=self.float_to_str(accessories_14_cost * accessories_14_qty))
        self.label_accessories_14_weight.configure(text=self.float_to_str(accessories_14_weight * accessories_14_qty))
        self.label_accessories_14_space.configure(text=self.float_to_str(accessories_14_space * accessories_14_qty))
        self.label_accessories_14_dp.configure(text=str(accessories_14_dp))
        if accessories_14_qty > 0:
            self.label_accessories_14_notes.configure(text=str(accessories_14_notes))
        else:
            self.label_accessories_14_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    def accessories_qty_14_update(self, *args):
        accessories_14_qty = self.var_accessories_14_qty.get()
        accessories_14_cost   = int(self.label_hidden_accessories_14_cost.cget("text"))
        accessories_14_weight = int(self.label_hidden_accessories_14_weight.cget("text"))
        accessories_14_space  = float(self.label_hidden_accessories_14_space.cget("text"))
        accessories_14_dp     = self.label_hidden_accessories_14_dp.cget("text")
        accessories_14_notes  = self.label_hidden_accessories_14_notes.cget("text")
        self.label_accessories_14_cost.configure(text=self.float_to_str(accessories_14_cost * accessories_14_qty))
        self.label_accessories_14_weight.configure(text=self.float_to_str(accessories_14_weight * accessories_14_qty))
        self.label_accessories_14_space.configure(text=self.float_to_str(accessories_14_space * accessories_14_qty))
        self.label_accessories_14_dp.configure(text=str(accessories_14_dp))
        if accessories_14_qty > 0:
            self.label_accessories_14_notes.configure(text=str(accessories_14_notes))
        else:
            self.label_accessories_14_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    ######################################################################
    # Accessories Row 15 processing here                                 #
    ######################################################################
    def add_labels_buttons_accessories_15_canvas(self, canvas_type):
        self.label_hidden_accessories_15_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_15_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_15_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_15_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_15_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_15_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_hidden_accessories_15_turret_size = tk.Label(canvas_type, text="0", anchor="w")

        self.label_accessories_15_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_15_cost.grid(column=self.grid_col_cost,row=self.grid_row_accessories_15, sticky="w")
        self.label_accessories_15_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_15_weight.grid(column=self.grid_col_weight ,row=self.grid_row_accessories_15, sticky="w")
        self.label_accessories_15_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_15_space.grid(column=self.grid_col_spaces,row=self.grid_row_accessories_15, sticky="w")
        self.label_accessories_15_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_15_dp.grid(column=self.grid_col_dp,row=self.grid_row_accessories_15, sticky="w")
        self.label_accessories_15_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_accessories_15_notes.grid(column=self.grid_col_power_factors,row=self.grid_row_accessories_15, sticky="w", columnspan=4)

        self.var_accessories_15_qty = tk.IntVar()
        self.entry_accessories_15_qty = ttk.Entry(canvas_type, textvariable=self.var_accessories_15_qty, width=3)
        self.entry_accessories_15_qty.grid(column=self.grid_col_qty, row=self.grid_row_accessories_15, sticky="w")
        self.var_accessories_15_qty.trace_add("write", self.accessories_qty_15_update)

    def add_dropdown_accessories_15_canvas(self, canvas_type):
        self.selected_accessories_15 = tk.StringVar()
        self.selected_accessories_15.set("Accessories")
        options = self.get_accessories_options()
        # Create the dropdown widget
        self.accessories_15_dropdown = ttk.OptionMenu(canvas_type, self.selected_accessories_15, "Accessory", *options) #filled elsewhere
        self.accessories_15_dropdown.grid(column=self.grid_col_item, row=self.grid_row_accessories_15, sticky="w")
        self.selected_accessories_15.trace_add("write", self.on_select_accessories_15)

    def on_select_accessories_15(self, *args):
        selected_value = self.selected_accessories_15.get()
        for entry in self.accessories_list: #use the same self.accessories_list for every accessories dropdown
            accessories_name: str = entry.get("Accessory Name")
            if selected_value == accessories_name:
                accessories_cost:          str = entry.get("Cost")
                accessories_weight:        str = entry.get("Weight")
                accessories_space:         str = entry.get("Space")
                accessories_dp:            str = entry.get("DP")
                accessories_notes:         str = entry.get("Notes")
                accessories_turret_size:   str = entry.get("Turret Size")

                if accessories_cost == "":
                    accessories_cost = "0"
                if accessories_weight == "":
                    accessories_weight = "0"
                if accessories_space == "":
                    accessories_space = "0"

                self.label_hidden_accessories_15_name.configure(text=str(accessories_name))
                self.label_hidden_accessories_15_cost.configure(text=self.float_to_str(accessories_cost))
                self.label_hidden_accessories_15_weight.configure(text=self.float_to_str(accessories_weight))
                self.label_hidden_accessories_15_space.configure(text=self.float_to_str(accessories_space))
                self.label_hidden_accessories_15_dp.configure(text=str(accessories_dp))
                self.label_hidden_accessories_15_notes.configure(text=str(accessories_notes))
                self.label_hidden_accessories_15_turret_size.configure(text=str(accessories_turret_size))
                self.accessories_qty_15_update()
                self.recalculate()
                return#exit now

    def on_button_accessories_15_qty_up(self, *args):
        accessories_15_qty = self.var_accessories_15_qty.get()
        accessories_15_qty = accessories_15_qty + 1
        self.var_accessories_15_qty.set(value=accessories_15_qty)
        accessories_15_cost   = int(self.label_hidden_accessories_15_cost.cget("text"))
        accessories_15_weight = int(self.label_hidden_accessories_15_weight.cget("text"))
        accessories_15_space: str  = self.label_hidden_accessories_15_space.cget("text")
        accessories_15_dp:    str  = self.label_hidden_accessories_15_dp.cget("text")
        accessories_15_notes: str  = self.label_hidden_accessories_15_notes.cget("text")

        if accessories_15_space == "":
            accessories_15_space = 0.0
        else:
            accessories_15_space = float(accessories_15_space)

        self.label_accessories_15_cost.configure(text=self.float_to_str(accessories_15_cost * accessories_15_qty))
        self.label_accessories_15_weight.configure(text=self.float_to_str(accessories_15_weight * accessories_15_qty))
        self.label_accessories_15_space.configure(text=self.float_to_str(accessories_15_space * accessories_15_qty))
        self.label_accessories_15_dp.configure(text=str(accessories_15_dp))
        self.label_accessories_15_notes.configure(text=str(accessories_15_notes))
        self.accessories_special_processing()
        self.recalculate()

    def on_button_accessories_15_qty_down(self, *args):
        accessories_15_qty = self.var_accessories_15_qty.get()
        accessories_15_qty = max(accessories_15_qty - 1, 0)
        self.var_accessories_15_qty.set(value=accessories_15_qty)
        accessories_15_cost   = int(self.label_hidden_accessories_15_cost.cget("text"))
        accessories_15_weight = int(self.label_hidden_accessories_15_weight.cget("text"))
        accessories_15_space  = float(self.label_hidden_accessories_15_space.cget("text"))
        accessories_15_dp     = self.label_hidden_accessories_15_dp.cget("text")
        accessories_15_notes  = self.label_hidden_accessories_15_notes.cget("text")
        self.label_accessories_15_cost.configure(text=self.float_to_str(accessories_15_cost * accessories_15_qty))
        self.label_accessories_15_weight.configure(text=self.float_to_str(accessories_15_weight * accessories_15_qty))
        self.label_accessories_15_space.configure(text=self.float_to_str(accessories_15_space * accessories_15_qty))
        self.label_accessories_15_dp.configure(text=str(accessories_15_dp))
        if accessories_15_qty > 0:
            self.label_accessories_15_notes.configure(text=str(accessories_15_notes))
        else:
            self.label_accessories_15_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    def accessories_qty_15_update(self, *args):
        accessories_15_qty = self.var_accessories_15_qty.get()
        accessories_15_cost   = int(self.label_hidden_accessories_15_cost.cget("text"))
        accessories_15_weight = int(self.label_hidden_accessories_15_weight.cget("text"))
        accessories_15_space  = float(self.label_hidden_accessories_15_space.cget("text"))
        accessories_15_dp     = self.label_hidden_accessories_15_dp.cget("text")
        accessories_15_notes  = self.label_hidden_accessories_15_notes.cget("text")
        self.label_accessories_15_cost.configure(text=self.float_to_str(accessories_15_cost * accessories_15_qty))
        self.label_accessories_15_weight.configure(text=self.float_to_str(accessories_15_weight * accessories_15_qty))
        self.label_accessories_15_space.configure(text=self.float_to_str(accessories_15_space * accessories_15_qty))
        self.label_accessories_15_dp.configure(text=str(accessories_15_dp))
        if accessories_15_qty > 0:
            self.label_accessories_15_notes.configure(text=str(accessories_15_notes))
        else:
            self.label_accessories_15_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    ######################################################################
    # Accessories Row 16 processing here                                 #
    ######################################################################
    def add_labels_buttons_accessories_16_canvas(self, canvas_type):
        self.label_hidden_accessories_16_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_16_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_16_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_16_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_16_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_16_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_hidden_accessories_16_turret_size = tk.Label(canvas_type, text="0", anchor="w")

        self.label_accessories_16_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_16_cost.grid(column=self.grid_col_cost,row=self.grid_row_accessories_16, sticky="w")
        self.label_accessories_16_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_16_weight.grid(column=self.grid_col_weight ,row=self.grid_row_accessories_16, sticky="w")
        self.label_accessories_16_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_16_space.grid(column=self.grid_col_spaces,row=self.grid_row_accessories_16, sticky="w")
        self.label_accessories_16_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_16_dp.grid(column=self.grid_col_dp,row=self.grid_row_accessories_16, sticky="w")
        self.label_accessories_16_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_accessories_16_notes.grid(column=self.grid_col_power_factors,row=self.grid_row_accessories_16, sticky="w", columnspan=4)

        self.var_accessories_16_qty = tk.IntVar()
        self.entry_accessories_16_qty = ttk.Entry(canvas_type, textvariable=self.var_accessories_16_qty, width=3)
        self.entry_accessories_16_qty.grid(column=self.grid_col_qty, row=self.grid_row_accessories_16, sticky="w")
        self.var_accessories_16_qty.trace_add("write", self.accessories_qty_16_update)

    def add_dropdown_accessories_16_canvas(self, canvas_type):
        self.selected_accessories_16 = tk.StringVar()
        self.selected_accessories_16.set("Accessories")
        options = self.get_accessories_options()
        # Create the dropdown widget
        self.accessories_16_dropdown = ttk.OptionMenu(canvas_type, self.selected_accessories_16, "Accessory", *options) #filled elsewhere
        self.accessories_16_dropdown.grid(column=self.grid_col_item, row=self.grid_row_accessories_16, sticky="w")
        self.selected_accessories_16.trace_add("write", self.on_select_accessories_16)

    def on_select_accessories_16(self, *args):
        selected_value = self.selected_accessories_16.get()
        for entry in self.accessories_list: #use the same self.accessories_list for every accessories dropdown
            accessories_name: str = entry.get("Accessory Name")
            if selected_value == accessories_name:
                accessories_cost:          str = entry.get("Cost")
                accessories_weight:        str = entry.get("Weight")
                accessories_space:         str = entry.get("Space")
                accessories_dp:            str = entry.get("DP")
                accessories_notes:         str = entry.get("Notes")
                accessories_turret_size:   str = entry.get("Turret Size")

                if accessories_cost == "":
                    accessories_cost = "0"
                if accessories_weight == "":
                    accessories_weight = "0"
                if accessories_space == "":
                    accessories_space = "0"

                self.label_hidden_accessories_16_name.configure(text=str(accessories_name))
                self.label_hidden_accessories_16_cost.configure(text=self.float_to_str(accessories_cost))
                self.label_hidden_accessories_16_weight.configure(text=self.float_to_str(accessories_weight))
                self.label_hidden_accessories_16_space.configure(text=self.float_to_str(accessories_space))
                self.label_hidden_accessories_16_dp.configure(text=str(accessories_dp))
                self.label_hidden_accessories_16_notes.configure(text=str(accessories_notes))
                self.label_hidden_accessories_16_turret_size.configure(text=str(accessories_turret_size))
                self.accessories_qty_16_update()
                self.recalculate()
                return#exit now

    def on_button_accessories_16_qty_up(self, *args):
        accessories_16_qty = self.var_accessories_16_qty.get()
        accessories_16_qty = accessories_16_qty + 1
        self.var_accessories_16_qty.set(value=accessories_16_qty)
        accessories_16_cost   = int(self.label_hidden_accessories_16_cost.cget("text"))
        accessories_16_weight = int(self.label_hidden_accessories_16_weight.cget("text"))
        accessories_16_space: str  = self.label_hidden_accessories_16_space.cget("text")
        accessories_16_dp:    str  = self.label_hidden_accessories_16_dp.cget("text")
        accessories_16_notes: str  = self.label_hidden_accessories_16_notes.cget("text")

        if accessories_16_space == "":
            accessories_16_space = 0.0
        else:
            accessories_16_space = float(accessories_16_space)

        self.label_accessories_16_cost.configure(text=self.float_to_str(accessories_16_cost * accessories_16_qty))
        self.label_accessories_16_weight.configure(text=self.float_to_str(accessories_16_weight * accessories_16_qty))
        self.label_accessories_16_space.configure(text=self.float_to_str(accessories_16_space * accessories_16_qty))
        self.label_accessories_16_dp.configure(text=str(accessories_16_dp))
        self.label_accessories_16_notes.configure(text=str(accessories_16_notes))
        self.accessories_special_processing()
        self.recalculate()

    def on_button_accessories_16_qty_down(self, *args):
        accessories_16_qty = self.var_accessories_16_qty.get()
        accessories_16_qty = max(accessories_16_qty - 1, 0)
        self.var_accessories_16_qty.set(value=accessories_16_qty)
        accessories_16_cost   = int(self.label_hidden_accessories_16_cost.cget("text"))
        accessories_16_weight = int(self.label_hidden_accessories_16_weight.cget("text"))
        accessories_16_space  = float(self.label_hidden_accessories_16_space.cget("text"))
        accessories_16_dp     = self.label_hidden_accessories_16_dp.cget("text")
        accessories_16_notes  = self.label_hidden_accessories_16_notes.cget("text")
        self.label_accessories_16_cost.configure(text=self.float_to_str(accessories_16_cost * accessories_16_qty))
        self.label_accessories_16_weight.configure(text=self.float_to_str(accessories_16_weight * accessories_16_qty))
        self.label_accessories_16_space.configure(text=self.float_to_str(accessories_16_space * accessories_16_qty))
        self.label_accessories_16_dp.configure(text=str(accessories_16_dp))
        if accessories_16_qty > 0:
            self.label_accessories_16_notes.configure(text=str(accessories_16_notes))
        else:
            self.label_accessories_16_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    def accessories_qty_16_update(self, *args):
        accessories_16_qty = self.var_accessories_16_qty.get()
        accessories_16_cost   = int(self.label_hidden_accessories_16_cost.cget("text"))
        accessories_16_weight = int(self.label_hidden_accessories_16_weight.cget("text"))
        accessories_16_space  = float(self.label_hidden_accessories_16_space.cget("text"))
        accessories_16_dp     = self.label_hidden_accessories_16_dp.cget("text")
        accessories_16_notes  = self.label_hidden_accessories_16_notes.cget("text")
        self.label_accessories_16_cost.configure(text=self.float_to_str(accessories_16_cost * accessories_16_qty))
        self.label_accessories_16_weight.configure(text=self.float_to_str(accessories_16_weight * accessories_16_qty))
        self.label_accessories_16_space.configure(text=self.float_to_str(accessories_16_space * accessories_16_qty))
        self.label_accessories_16_dp.configure(text=str(accessories_16_dp))
        if accessories_16_qty > 0:
            self.label_accessories_16_notes.configure(text=str(accessories_16_notes))
        else:
            self.label_accessories_16_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    ######################################################################
    # Accessories Row 17 processing here                                 #
    ######################################################################
    def add_labels_buttons_accessories_17_canvas(self, canvas_type):
        self.label_hidden_accessories_17_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_17_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_17_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_17_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_17_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_17_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_hidden_accessories_17_turret_size = tk.Label(canvas_type, text="0", anchor="w")

        self.label_accessories_17_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_17_cost.grid(column=self.grid_col_cost,row=self.grid_row_accessories_17, sticky="w")
        self.label_accessories_17_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_17_weight.grid(column=self.grid_col_weight ,row=self.grid_row_accessories_17, sticky="w")
        self.label_accessories_17_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_17_space.grid(column=self.grid_col_spaces,row=self.grid_row_accessories_17, sticky="w")
        self.label_accessories_17_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_17_dp.grid(column=self.grid_col_dp,row=self.grid_row_accessories_17, sticky="w")
        self.label_accessories_17_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_accessories_17_notes.grid(column=self.grid_col_power_factors,row=self.grid_row_accessories_17, sticky="w", columnspan=4)

        self.var_accessories_17_qty = tk.IntVar()
        self.entry_accessories_17_qty = ttk.Entry(canvas_type, textvariable=self.var_accessories_17_qty, width=3)
        self.entry_accessories_17_qty.grid(column=self.grid_col_qty, row=self.grid_row_accessories_17, sticky="w")
        self.var_accessories_17_qty.trace_add("write", self.accessories_qty_17_update)

    def add_dropdown_accessories_17_canvas(self, canvas_type):
        self.selected_accessories_17 = tk.StringVar()
        self.selected_accessories_17.set("Accessories")
        options = self.get_accessories_options()
        # Create the dropdown widget
        self.accessories_17_dropdown = ttk.OptionMenu(canvas_type, self.selected_accessories_17, "Accessory", *options) #filled elsewhere
        self.accessories_17_dropdown.grid(column=self.grid_col_item, row=self.grid_row_accessories_17, sticky="w")
        self.selected_accessories_17.trace_add("write", self.on_select_accessories_17)

    def on_select_accessories_17(self, *args):
        selected_value = self.selected_accessories_17.get()
        for entry in self.accessories_list: #use the same self.accessories_list for every accessories dropdown
            accessories_name: str = entry.get("Accessory Name")
            if selected_value == accessories_name:
                accessories_cost:          str = entry.get("Cost")
                accessories_weight:        str = entry.get("Weight")
                accessories_space:         str = entry.get("Space")
                accessories_dp:            str = entry.get("DP")
                accessories_notes:         str = entry.get("Notes")
                accessories_turret_size:   str = entry.get("Turret Size")

                if accessories_cost == "":
                    accessories_cost = "0"
                if accessories_weight == "":
                    accessories_weight = "0"
                if accessories_space == "":
                    accessories_space = "0"

                self.label_hidden_accessories_17_name.configure(text=str(accessories_name))
                self.label_hidden_accessories_17_cost.configure(text=self.float_to_str(accessories_cost))
                self.label_hidden_accessories_17_weight.configure(text=self.float_to_str(accessories_weight))
                self.label_hidden_accessories_17_space.configure(text=self.float_to_str(accessories_space))
                self.label_hidden_accessories_17_dp.configure(text=str(accessories_dp))
                self.label_hidden_accessories_17_notes.configure(text=str(accessories_notes))
                self.label_hidden_accessories_17_turret_size.configure(text=str(accessories_turret_size))
                self.accessories_qty_17_update()
                self.recalculate()
                return#exit now

    def on_button_accessories_17_qty_up(self, *args):
        accessories_17_qty = self.var_accessories_17_qty.get()
        accessories_17_qty = accessories_17_qty + 1
        self.var_accessories_17_qty.set(value=accessories_17_qty)
        accessories_17_cost   = int(self.label_hidden_accessories_17_cost.cget("text"))
        accessories_17_weight = int(self.label_hidden_accessories_17_weight.cget("text"))
        accessories_17_space: str  = self.label_hidden_accessories_17_space.cget("text")
        accessories_17_dp:    str  = self.label_hidden_accessories_17_dp.cget("text")
        accessories_17_notes: str  = self.label_hidden_accessories_17_notes.cget("text")

        if accessories_17_space == "":
            accessories_17_space = 0.0
        else:
            accessories_17_space = float(accessories_17_space)

        self.label_accessories_17_cost.configure(text=self.float_to_str(accessories_17_cost * accessories_17_qty))
        self.label_accessories_17_weight.configure(text=self.float_to_str(accessories_17_weight * accessories_17_qty))
        self.label_accessories_17_space.configure(text=self.float_to_str(accessories_17_space * accessories_17_qty))
        self.label_accessories_17_dp.configure(text=str(accessories_17_dp))
        self.label_accessories_17_notes.configure(text=str(accessories_17_notes))
        self.accessories_special_processing()
        self.recalculate()

    def on_button_accessories_17_qty_down(self, *args):
        accessories_17_qty = self.var_accessories_17_qty.get()
        accessories_17_qty = max(accessories_17_qty - 1, 0)
        self.var_accessories_17_qty.set(value=accessories_17_qty)
        accessories_17_cost   = int(self.label_hidden_accessories_17_cost.cget("text"))
        accessories_17_weight = int(self.label_hidden_accessories_17_weight.cget("text"))
        accessories_17_space  = float(self.label_hidden_accessories_17_space.cget("text"))
        accessories_17_dp     = self.label_hidden_accessories_17_dp.cget("text")
        accessories_17_notes  = self.label_hidden_accessories_17_notes.cget("text")
        self.label_accessories_17_cost.configure(text=self.float_to_str(accessories_17_cost * accessories_17_qty))
        self.label_accessories_17_weight.configure(text=self.float_to_str(accessories_17_weight * accessories_17_qty))
        self.label_accessories_17_space.configure(text=self.float_to_str(accessories_17_space * accessories_17_qty))
        self.label_accessories_17_dp.configure(text=str(accessories_17_dp))
        if accessories_17_qty > 0:
            self.label_accessories_17_notes.configure(text=str(accessories_17_notes))
        else:
            self.label_accessories_17_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    def accessories_qty_17_update(self, *args):
        accessories_17_qty = self.var_accessories_17_qty.get()
        accessories_17_cost   = int(self.label_hidden_accessories_17_cost.cget("text"))
        accessories_17_weight = int(self.label_hidden_accessories_17_weight.cget("text"))
        accessories_17_space  = float(self.label_hidden_accessories_17_space.cget("text"))
        accessories_17_dp     = self.label_hidden_accessories_17_dp.cget("text")
        accessories_17_notes  = self.label_hidden_accessories_17_notes.cget("text")
        self.label_accessories_17_cost.configure(text=self.float_to_str(accessories_17_cost * accessories_17_qty))
        self.label_accessories_17_weight.configure(text=self.float_to_str(accessories_17_weight * accessories_17_qty))
        self.label_accessories_17_space.configure(text=self.float_to_str(accessories_17_space * accessories_17_qty))
        self.label_accessories_17_dp.configure(text=str(accessories_17_dp))
        if accessories_17_qty > 0:
            self.label_accessories_17_notes.configure(text=str(accessories_17_notes))
        else:
            self.label_accessories_17_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    ######################################################################
    # Accessories Row 18 processing here                                 #
    ######################################################################
    def add_labels_buttons_accessories_18_canvas(self, canvas_type):
        self.label_hidden_accessories_18_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_18_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_18_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_18_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_18_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_18_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_hidden_accessories_18_turret_size = tk.Label(canvas_type, text="0", anchor="w")

        self.label_accessories_18_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_18_cost.grid(column=self.grid_col_cost,row=self.grid_row_accessories_18, sticky="w")
        self.label_accessories_18_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_18_weight.grid(column=self.grid_col_weight ,row=self.grid_row_accessories_18, sticky="w")
        self.label_accessories_18_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_18_space.grid(column=self.grid_col_spaces,row=self.grid_row_accessories_18, sticky="w")
        self.label_accessories_18_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_18_dp.grid(column=self.grid_col_dp,row=self.grid_row_accessories_18, sticky="w")
        self.label_accessories_18_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_accessories_18_notes.grid(column=self.grid_col_power_factors,row=self.grid_row_accessories_18, sticky="w", columnspan=4)

        self.var_accessories_18_qty = tk.IntVar()
        self.entry_accessories_18_qty = ttk.Entry(canvas_type, textvariable=self.var_accessories_18_qty, width=3)
        self.entry_accessories_18_qty.grid(column=self.grid_col_qty, row=self.grid_row_accessories_18, sticky="w")
        self.var_accessories_18_qty.trace_add("write", self.accessories_qty_18_update)

    def add_dropdown_accessories_18_canvas(self, canvas_type):
        self.selected_accessories_18 = tk.StringVar()
        self.selected_accessories_18.set("Accessories")
        options = self.get_accessories_options()
        # Create the dropdown widget
        self.accessories_18_dropdown = ttk.OptionMenu(canvas_type, self.selected_accessories_18, "Accessory", *options) #filled elsewhere
        self.accessories_18_dropdown.grid(column=self.grid_col_item, row=self.grid_row_accessories_18, sticky="w")
        self.selected_accessories_18.trace_add("write", self.on_select_accessories_18)

    def on_select_accessories_18(self, *args):
        selected_value = self.selected_accessories_18.get()
        for entry in self.accessories_list: #use the same self.accessories_list for every accessories dropdown
            accessories_name: str = entry.get("Accessory Name")
            if selected_value == accessories_name:
                accessories_cost:          str = entry.get("Cost")
                accessories_weight:        str = entry.get("Weight")
                accessories_space:         str = entry.get("Space")
                accessories_dp:            str = entry.get("DP")
                accessories_notes:         str = entry.get("Notes")
                accessories_turret_size:   str = entry.get("Turret Size")

                if accessories_cost == "":
                    accessories_cost = "0"
                if accessories_weight == "":
                    accessories_weight = "0"
                if accessories_space == "":
                    accessories_space = "0"

                self.label_hidden_accessories_18_name.configure(text=str(accessories_name))
                self.label_hidden_accessories_18_cost.configure(text=self.float_to_str(accessories_cost))
                self.label_hidden_accessories_18_weight.configure(text=self.float_to_str(accessories_weight))
                self.label_hidden_accessories_18_space.configure(text=self.float_to_str(accessories_space))
                self.label_hidden_accessories_18_dp.configure(text=str(accessories_dp))
                self.label_hidden_accessories_18_notes.configure(text=str(accessories_notes))
                self.label_hidden_accessories_18_turret_size.configure(text=str(accessories_turret_size))
                self.accessories_qty_18_update()
                self.recalculate()
                return#exit now

    def on_button_accessories_18_qty_up(self, *args):
        accessories_18_qty = self.var_accessories_18_qty.get()
        accessories_18_qty = accessories_18_qty + 1
        self.var_accessories_18_qty.set(value=accessories_18_qty)
        accessories_18_cost   = int(self.label_hidden_accessories_18_cost.cget("text"))
        accessories_18_weight = int(self.label_hidden_accessories_18_weight.cget("text"))
        accessories_18_space: str  = self.label_hidden_accessories_18_space.cget("text")
        accessories_18_dp:    str  = self.label_hidden_accessories_18_dp.cget("text")
        accessories_18_notes: str  = self.label_hidden_accessories_18_notes.cget("text")

        if accessories_18_space == "":
            accessories_18_space = 0.0
        else:
            accessories_18_space = float(accessories_18_space)

        self.label_accessories_18_cost.configure(text=self.float_to_str(accessories_18_cost * accessories_18_qty))
        self.label_accessories_18_weight.configure(text=self.float_to_str(accessories_18_weight * accessories_18_qty))
        self.label_accessories_18_space.configure(text=self.float_to_str(accessories_18_space * accessories_18_qty))
        self.label_accessories_18_dp.configure(text=str(accessories_18_dp))
        self.label_accessories_18_notes.configure(text=str(accessories_18_notes))
        self.accessories_special_processing()
        self.recalculate()

    def on_button_accessories_18_qty_down(self, *args):
        accessories_18_qty = self.var_accessories_18_qty.get()
        accessories_18_qty = max(accessories_18_qty - 1, 0)
        self.var_accessories_18_qty.set(value=accessories_18_qty)
        accessories_18_cost   = int(self.label_hidden_accessories_18_cost.cget("text"))
        accessories_18_weight = int(self.label_hidden_accessories_18_weight.cget("text"))
        accessories_18_space  = float(self.label_hidden_accessories_18_space.cget("text"))
        accessories_18_dp     = self.label_hidden_accessories_18_dp.cget("text")
        accessories_18_notes  = self.label_hidden_accessories_18_notes.cget("text")
        self.label_accessories_18_cost.configure(text=self.float_to_str(accessories_18_cost * accessories_18_qty))
        self.label_accessories_18_weight.configure(text=self.float_to_str(accessories_18_weight * accessories_18_qty))
        self.label_accessories_18_space.configure(text=self.float_to_str(accessories_18_space * accessories_18_qty))
        self.label_accessories_18_dp.configure(text=str(accessories_18_dp))
        if accessories_18_qty > 0:
            self.label_accessories_18_notes.configure(text=str(accessories_18_notes))
        else:
            self.label_accessories_18_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    def accessories_qty_18_update(self, *args):
        accessories_18_qty = self.var_accessories_18_qty.get()
        accessories_18_cost   = int(self.label_hidden_accessories_18_cost.cget("text"))
        accessories_18_weight = int(self.label_hidden_accessories_18_weight.cget("text"))
        accessories_18_space  = float(self.label_hidden_accessories_18_space.cget("text"))
        accessories_18_dp     = self.label_hidden_accessories_18_dp.cget("text")
        accessories_18_notes  = self.label_hidden_accessories_18_notes.cget("text")
        self.label_accessories_18_cost.configure(text=self.float_to_str(accessories_18_cost * accessories_18_qty))
        self.label_accessories_18_weight.configure(text=self.float_to_str(accessories_18_weight * accessories_18_qty))
        self.label_accessories_18_space.configure(text=self.float_to_str(accessories_18_space * accessories_18_qty))
        self.label_accessories_18_dp.configure(text=str(accessories_18_dp))
        if accessories_18_qty > 0:
            self.label_accessories_18_notes.configure(text=str(accessories_18_notes))
        else:
            self.label_accessories_18_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    ######################################################################
    # Accessories Row 19 processing here                                 #
    ######################################################################
    def add_labels_buttons_accessories_19_canvas(self, canvas_type):
        self.label_hidden_accessories_19_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_19_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_19_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_19_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_19_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_19_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_hidden_accessories_19_turret_size = tk.Label(canvas_type, text="0", anchor="w")

        self.label_accessories_19_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_19_cost.grid(column=self.grid_col_cost,row=self.grid_row_accessories_19, sticky="w")
        self.label_accessories_19_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_19_weight.grid(column=self.grid_col_weight ,row=self.grid_row_accessories_19, sticky="w")
        self.label_accessories_19_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_19_space.grid(column=self.grid_col_spaces,row=self.grid_row_accessories_19, sticky="w")
        self.label_accessories_19_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_19_dp.grid(column=self.grid_col_dp,row=self.grid_row_accessories_19, sticky="w")
        self.label_accessories_19_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_accessories_19_notes.grid(column=self.grid_col_power_factors,row=self.grid_row_accessories_19, sticky="w", columnspan=4)

        self.var_accessories_19_qty = tk.IntVar()
        self.entry_accessories_19_qty = ttk.Entry(canvas_type, textvariable=self.var_accessories_19_qty, width=3)
        self.entry_accessories_19_qty.grid(column=self.grid_col_qty, row=self.grid_row_accessories_19, sticky="w")
        self.var_accessories_19_qty.trace_add("write", self.accessories_qty_19_update)

    def add_dropdown_accessories_19_canvas(self, canvas_type):
        self.selected_accessories_19 = tk.StringVar()
        self.selected_accessories_19.set("Accessories")
        options = self.get_accessories_options()
        # Create the dropdown widget
        self.accessories_19_dropdown = ttk.OptionMenu(canvas_type, self.selected_accessories_19, "Accessory", *options) #filled elsewhere
        self.accessories_19_dropdown.grid(column=self.grid_col_item, row=self.grid_row_accessories_19, sticky="w")
        self.selected_accessories_19.trace_add("write", self.on_select_accessories_19)

    def on_select_accessories_19(self, *args):
        selected_value = self.selected_accessories_19.get()
        for entry in self.accessories_list: #use the same self.accessories_list for every accessories dropdown
            accessories_name: str = entry.get("Accessory Name")
            if selected_value == accessories_name:
                accessories_cost:          str = entry.get("Cost")
                accessories_weight:        str = entry.get("Weight")
                accessories_space:         str = entry.get("Space")
                accessories_dp:            str = entry.get("DP")
                accessories_notes:         str = entry.get("Notes")
                accessories_turret_size:   str = entry.get("Turret Size")

                if accessories_cost == "":
                    accessories_cost = "0"
                if accessories_weight == "":
                    accessories_weight = "0"
                if accessories_space == "":
                    accessories_space = "0"

                self.label_hidden_accessories_19_name.configure(text=str(accessories_name))
                self.label_hidden_accessories_19_cost.configure(text=self.float_to_str(accessories_cost))
                self.label_hidden_accessories_19_weight.configure(text=self.float_to_str(accessories_weight))
                self.label_hidden_accessories_19_space.configure(text=self.float_to_str(accessories_space))
                self.label_hidden_accessories_19_dp.configure(text=str(accessories_dp))
                self.label_hidden_accessories_19_notes.configure(text=str(accessories_notes))
                self.label_hidden_accessories_19_turret_size.configure(text=str(accessories_turret_size))
                self.accessories_qty_19_update()
                self.recalculate()
                return#exit now

    def on_button_accessories_19_qty_up(self, *args):
        accessories_19_qty = self.var_accessories_19_qty.get()
        accessories_19_qty = accessories_19_qty + 1
        self.var_accessories_19_qty.set(value=accessories_19_qty)
        accessories_19_cost   = int(self.label_hidden_accessories_19_cost.cget("text"))
        accessories_19_weight = int(self.label_hidden_accessories_19_weight.cget("text"))
        accessories_19_space: str  = self.label_hidden_accessories_19_space.cget("text")
        accessories_19_dp:    str  = self.label_hidden_accessories_19_dp.cget("text")
        accessories_19_notes: str  = self.label_hidden_accessories_19_notes.cget("text")

        if accessories_19_space == "":
            accessories_19_space = 0.0
        else:
            accessories_19_space = float(accessories_19_space)

        self.label_accessories_19_cost.configure(text=self.float_to_str(accessories_19_cost * accessories_19_qty))
        self.label_accessories_19_weight.configure(text=self.float_to_str(accessories_19_weight * accessories_19_qty))
        self.label_accessories_19_space.configure(text=self.float_to_str(accessories_19_space * accessories_19_qty))
        self.label_accessories_19_dp.configure(text=str(accessories_19_dp))
        self.label_accessories_19_notes.configure(text=str(accessories_19_notes))
        self.accessories_special_processing()
        self.recalculate()

    def on_button_accessories_19_qty_down(self, *args):
        accessories_19_qty = self.var_accessories_19_qty.get()
        accessories_19_qty = max(accessories_19_qty - 1, 0)
        self.var_accessories_19_qty.set(value=accessories_19_qty)
        accessories_19_cost   = int(self.label_hidden_accessories_19_cost.cget("text"))
        accessories_19_weight = int(self.label_hidden_accessories_19_weight.cget("text"))
        accessories_19_space  = float(self.label_hidden_accessories_19_space.cget("text"))
        accessories_19_dp     = self.label_hidden_accessories_19_dp.cget("text")
        accessories_19_notes  = self.label_hidden_accessories_19_notes.cget("text")
        self.label_accessories_19_cost.configure(text=self.float_to_str(accessories_19_cost * accessories_19_qty))
        self.label_accessories_19_weight.configure(text=self.float_to_str(accessories_19_weight * accessories_19_qty))
        self.label_accessories_19_space.configure(text=self.float_to_str(accessories_19_space * accessories_19_qty))
        self.label_accessories_19_dp.configure(text=str(accessories_19_dp))
        if accessories_19_qty > 0:
            self.label_accessories_19_notes.configure(text=str(accessories_19_notes))
        else:
            self.label_accessories_19_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    def accessories_qty_19_update(self, *args):
        accessories_19_qty = self.var_accessories_19_qty.get()
        accessories_19_cost   = int(self.label_hidden_accessories_19_cost.cget("text"))
        accessories_19_weight = int(self.label_hidden_accessories_19_weight.cget("text"))
        accessories_19_space  = float(self.label_hidden_accessories_19_space.cget("text"))
        accessories_19_dp     = self.label_hidden_accessories_19_dp.cget("text")
        accessories_19_notes  = self.label_hidden_accessories_19_notes.cget("text")
        self.label_accessories_19_cost.configure(text=self.float_to_str(accessories_19_cost * accessories_19_qty))
        self.label_accessories_19_weight.configure(text=self.float_to_str(accessories_19_weight * accessories_19_qty))
        self.label_accessories_19_space.configure(text=self.float_to_str(accessories_19_space * accessories_19_qty))
        self.label_accessories_19_dp.configure(text=str(accessories_19_dp))
        if accessories_19_qty > 0:
            self.label_accessories_19_notes.configure(text=str(accessories_19_notes))
        else:
            self.label_accessories_19_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    ######################################################################
    # Accessories Row 20 processing here                                 #
    ######################################################################
    def add_labels_buttons_accessories_20_canvas(self, canvas_type):
        self.label_hidden_accessories_20_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_20_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_20_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_20_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_20_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_20_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_hidden_accessories_20_turret_size = tk.Label(canvas_type, text="0", anchor="w")

        self.label_accessories_20_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_20_cost.grid(column=self.grid_col_cost,row=self.grid_row_accessories_20, sticky="w")
        self.label_accessories_20_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_20_weight.grid(column=self.grid_col_weight ,row=self.grid_row_accessories_20, sticky="w")
        self.label_accessories_20_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_20_space.grid(column=self.grid_col_spaces,row=self.grid_row_accessories_20, sticky="w")
        self.label_accessories_20_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_20_dp.grid(column=self.grid_col_dp,row=self.grid_row_accessories_20, sticky="w")
        self.label_accessories_20_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_accessories_20_notes.grid(column=self.grid_col_power_factors,row=self.grid_row_accessories_20, sticky="w", columnspan=4)

        self.var_accessories_20_qty = tk.IntVar()
        self.entry_accessories_20_qty = ttk.Entry(canvas_type, textvariable=self.var_accessories_20_qty, width=3)
        self.entry_accessories_20_qty.grid(column=self.grid_col_qty, row=self.grid_row_accessories_20, sticky="w")
        self.var_accessories_20_qty.trace_add("write", self.accessories_qty_20_update)

    def add_dropdown_accessories_20_canvas(self, canvas_type):
        self.selected_accessories_20 = tk.StringVar()
        self.selected_accessories_20.set("Accessories")
        options = self.get_accessories_options()
        # Create the dropdown widget
        self.accessories_20_dropdown = ttk.OptionMenu(canvas_type, self.selected_accessories_20, "Accessory", *options) #filled elsewhere
        self.accessories_20_dropdown.grid(column=self.grid_col_item, row=self.grid_row_accessories_20, sticky="w")
        self.selected_accessories_20.trace_add("write", self.on_select_accessories_20)

    def on_select_accessories_20(self, *args):
        selected_value = self.selected_accessories_20.get()
        for entry in self.accessories_list: #use the same self.accessories_list for every accessories dropdown
            accessories_name: str = entry.get("Accessory Name")
            if selected_value == accessories_name:
                accessories_cost:          str = entry.get("Cost")
                accessories_weight:        str = entry.get("Weight")
                accessories_space:         str = entry.get("Space")
                accessories_dp:            str = entry.get("DP")
                accessories_notes:         str = entry.get("Notes")
                accessories_turret_size:   str = entry.get("Turret Size")

                if accessories_cost == "":
                    accessories_cost = "0"
                if accessories_weight == "":
                    accessories_weight = "0"
                if accessories_space == "":
                    accessories_space = "0"

                self.label_hidden_accessories_20_name.configure(text=str(accessories_name))
                self.label_hidden_accessories_20_cost.configure(text=self.float_to_str(accessories_cost))
                self.label_hidden_accessories_20_weight.configure(text=self.float_to_str(accessories_weight))
                self.label_hidden_accessories_20_space.configure(text=self.float_to_str(accessories_space))
                self.label_hidden_accessories_20_dp.configure(text=str(accessories_dp))
                self.label_hidden_accessories_20_notes.configure(text=str(accessories_notes))
                self.label_hidden_accessories_20_turret_size.configure(text=str(accessories_turret_size))
                self.accessories_qty_20_update()
                self.recalculate()
                return#exit now

    def on_button_accessories_20_qty_up(self, *args):
        accessories_20_qty = self.var_accessories_20_qty.get()
        accessories_20_qty = accessories_20_qty + 1
        self.var_accessories_20_qty.set(value=accessories_20_qty)
        accessories_20_cost   = int(self.label_hidden_accessories_20_cost.cget("text"))
        accessories_20_weight = int(self.label_hidden_accessories_20_weight.cget("text"))
        accessories_20_space: str  = self.label_hidden_accessories_20_space.cget("text")
        accessories_20_dp:    str  = self.label_hidden_accessories_20_dp.cget("text")
        accessories_20_notes: str  = self.label_hidden_accessories_20_notes.cget("text")

        if accessories_20_space == "":
            accessories_20_space = 0.0
        else:
            accessories_20_space = float(accessories_20_space)

        self.label_accessories_20_cost.configure(text=self.float_to_str(accessories_20_cost * accessories_20_qty))
        self.label_accessories_20_weight.configure(text=self.float_to_str(accessories_20_weight * accessories_20_qty))
        self.label_accessories_20_space.configure(text=self.float_to_str(accessories_20_space * accessories_20_qty))
        self.label_accessories_20_dp.configure(text=str(accessories_20_dp))
        self.label_accessories_20_notes.configure(text=str(accessories_20_notes))
        self.accessories_special_processing()
        self.recalculate()

    def on_button_accessories_20_qty_down(self, *args):
        accessories_20_qty = self.var_accessories_20_qty.get()
        accessories_20_qty = max(accessories_20_qty - 1, 0)
        self.var_accessories_20_qty.set(value=accessories_20_qty)
        accessories_20_cost   = int(self.label_hidden_accessories_20_cost.cget("text"))
        accessories_20_weight = int(self.label_hidden_accessories_20_weight.cget("text"))
        accessories_20_space  = float(self.label_hidden_accessories_20_space.cget("text"))
        accessories_20_dp     = self.label_hidden_accessories_20_dp.cget("text")
        accessories_20_notes  = self.label_hidden_accessories_20_notes.cget("text")
        self.label_accessories_20_cost.configure(text=self.float_to_str(accessories_20_cost * accessories_20_qty))
        self.label_accessories_20_weight.configure(text=self.float_to_str(accessories_20_weight * accessories_20_qty))
        self.label_accessories_20_space.configure(text=self.float_to_str(accessories_20_space * accessories_20_qty))
        self.label_accessories_20_dp.configure(text=str(accessories_20_dp))
        if accessories_20_qty > 0:
            self.label_accessories_20_notes.configure(text=str(accessories_20_notes))
        else:
            self.label_accessories_20_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    def accessories_qty_20_update(self, *args):
        accessories_20_qty = self.var_accessories_20_qty.get()
        accessories_20_cost   = int(self.label_hidden_accessories_20_cost.cget("text"))
        accessories_20_weight = int(self.label_hidden_accessories_20_weight.cget("text"))
        accessories_20_space  = float(self.label_hidden_accessories_20_space.cget("text"))
        accessories_20_dp     = self.label_hidden_accessories_20_dp.cget("text")
        accessories_20_notes  = self.label_hidden_accessories_20_notes.cget("text")
        self.label_accessories_20_cost.configure(text=self.float_to_str(accessories_20_cost * accessories_20_qty))
        self.label_accessories_20_weight.configure(text=self.float_to_str(accessories_20_weight * accessories_20_qty))
        self.label_accessories_20_space.configure(text=self.float_to_str(accessories_20_space * accessories_20_qty))
        self.label_accessories_20_dp.configure(text=str(accessories_20_dp))
        if accessories_20_qty > 0:
            self.label_accessories_20_notes.configure(text=str(accessories_20_notes))
        else:
            self.label_accessories_20_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    ######################################################################
    # Accessories Row 21 processing here                                 #
    ######################################################################
    def add_labels_buttons_accessories_21_canvas(self, canvas_type):
        self.label_hidden_accessories_21_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_21_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_21_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_21_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_21_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_21_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_hidden_accessories_21_turret_size = tk.Label(canvas_type, text="0", anchor="w")

        self.label_accessories_21_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_21_cost.grid(column=self.grid_col_cost,row=self.grid_row_accessories_21, sticky="w")
        self.label_accessories_21_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_21_weight.grid(column=self.grid_col_weight ,row=self.grid_row_accessories_21, sticky="w")
        self.label_accessories_21_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_21_space.grid(column=self.grid_col_spaces,row=self.grid_row_accessories_21, sticky="w")
        self.label_accessories_21_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_21_dp.grid(column=self.grid_col_dp,row=self.grid_row_accessories_21, sticky="w")
        self.label_accessories_21_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_accessories_21_notes.grid(column=self.grid_col_power_factors,row=self.grid_row_accessories_21, sticky="w", columnspan=4)

        self.var_accessories_21_qty = tk.IntVar()
        self.entry_accessories_21_qty = ttk.Entry(canvas_type, textvariable=self.var_accessories_21_qty, width=3)
        self.entry_accessories_21_qty.grid(column=self.grid_col_qty, row=self.grid_row_accessories_21, sticky="w")
        self.var_accessories_21_qty.trace_add("write", self.accessories_qty_21_update)

    def add_dropdown_accessories_21_canvas(self, canvas_type):
        self.selected_accessories_21 = tk.StringVar()
        self.selected_accessories_21.set("Accessories")
        options = self.get_accessories_options()
        # Create the dropdown widget
        self.accessories_21_dropdown = ttk.OptionMenu(canvas_type, self.selected_accessories_21, "Accessory", *options) #filled elsewhere
        self.accessories_21_dropdown.grid(column=self.grid_col_item, row=self.grid_row_accessories_21, sticky="w")
        self.selected_accessories_21.trace_add("write", self.on_select_accessories_21)

    def on_select_accessories_21(self, *args):
        selected_value = self.selected_accessories_21.get()
        for entry in self.accessories_list: #use the same self.accessories_list for every accessories dropdown
            accessories_name: str = entry.get("Accessory Name")
            if selected_value == accessories_name:
                accessories_cost:          str = entry.get("Cost")
                accessories_weight:        str = entry.get("Weight")
                accessories_space:         str = entry.get("Space")
                accessories_dp:            str = entry.get("DP")
                accessories_notes:         str = entry.get("Notes")
                accessories_turret_size:   str = entry.get("Turret Size")

                if accessories_cost == "":
                    accessories_cost = "0"
                if accessories_weight == "":
                    accessories_weight = "0"
                if accessories_space == "":
                    accessories_space = "0"

                self.label_hidden_accessories_21_name.configure(text=str(accessories_name))
                self.label_hidden_accessories_21_cost.configure(text=self.float_to_str(accessories_cost))
                self.label_hidden_accessories_21_weight.configure(text=self.float_to_str(accessories_weight))
                self.label_hidden_accessories_21_space.configure(text=self.float_to_str(accessories_space))
                self.label_hidden_accessories_21_dp.configure(text=str(accessories_dp))
                self.label_hidden_accessories_21_notes.configure(text=str(accessories_notes))
                self.label_hidden_accessories_21_turret_size.configure(text=str(accessories_turret_size))
                self.accessories_qty_21_update()
                self.recalculate()
                return#exit now

    def on_button_accessories_21_qty_up(self, *args):
        accessories_21_qty = self.var_accessories_21_qty.get()
        accessories_21_qty = accessories_21_qty + 1
        self.var_accessories_21_qty.set(value=accessories_21_qty)
        accessories_21_cost   = int(self.label_hidden_accessories_21_cost.cget("text"))
        accessories_21_weight = int(self.label_hidden_accessories_21_weight.cget("text"))
        accessories_21_space: str  = self.label_hidden_accessories_21_space.cget("text")
        accessories_21_dp:    str  = self.label_hidden_accessories_21_dp.cget("text")
        accessories_21_notes: str  = self.label_hidden_accessories_21_notes.cget("text")

        if accessories_21_space == "":
            accessories_21_space = 0.0
        else:
            accessories_21_space = float(accessories_21_space)

        self.label_accessories_21_cost.configure(text=self.float_to_str(accessories_21_cost * accessories_21_qty))
        self.label_accessories_21_weight.configure(text=self.float_to_str(accessories_21_weight * accessories_21_qty))
        self.label_accessories_21_space.configure(text=self.float_to_str(accessories_21_space * accessories_21_qty))
        self.label_accessories_21_dp.configure(text=str(accessories_21_dp))
        self.label_accessories_21_notes.configure(text=str(accessories_21_notes))
        self.accessories_special_processing()
        self.recalculate()

    def on_button_accessories_21_qty_down(self, *args):
        accessories_21_qty = self.var_accessories_21_qty.get()
        accessories_21_qty = max(accessories_21_qty - 1, 0)
        self.var_accessories_21_qty.set(value=accessories_21_qty)
        accessories_21_cost   = int(self.label_hidden_accessories_21_cost.cget("text"))
        accessories_21_weight = int(self.label_hidden_accessories_21_weight.cget("text"))
        accessories_21_space  = float(self.label_hidden_accessories_21_space.cget("text"))
        accessories_21_dp     = self.label_hidden_accessories_21_dp.cget("text")
        accessories_21_notes  = self.label_hidden_accessories_21_notes.cget("text")
        self.label_accessories_21_cost.configure(text=self.float_to_str(accessories_21_cost * accessories_21_qty))
        self.label_accessories_21_weight.configure(text=self.float_to_str(accessories_21_weight * accessories_21_qty))
        self.label_accessories_21_space.configure(text=self.float_to_str(accessories_21_space * accessories_21_qty))
        self.label_accessories_21_dp.configure(text=str(accessories_21_dp))
        if accessories_21_qty > 0:
            self.label_accessories_21_notes.configure(text=str(accessories_21_notes))
        else:
            self.label_accessories_21_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    def accessories_qty_21_update(self, *args):
        accessories_21_qty = self.var_accessories_21_qty.get()
        accessories_21_cost   = int(self.label_hidden_accessories_21_cost.cget("text"))
        accessories_21_weight = int(self.label_hidden_accessories_21_weight.cget("text"))
        accessories_21_space  = float(self.label_hidden_accessories_21_space.cget("text"))
        accessories_21_dp     = self.label_hidden_accessories_21_dp.cget("text")
        accessories_21_notes  = self.label_hidden_accessories_21_notes.cget("text")
        self.label_accessories_21_cost.configure(text=self.float_to_str(accessories_21_cost * accessories_21_qty))
        self.label_accessories_21_weight.configure(text=self.float_to_str(accessories_21_weight * accessories_21_qty))
        self.label_accessories_21_space.configure(text=self.float_to_str(accessories_21_space * accessories_21_qty))
        self.label_accessories_21_dp.configure(text=str(accessories_21_dp))
        if accessories_21_qty > 0:
            self.label_accessories_21_notes.configure(text=str(accessories_21_notes))
        else:
            self.label_accessories_21_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    ######################################################################
    # Accessories Row 22 processing here                                 #
    ######################################################################
    def add_labels_buttons_accessories_22_canvas(self, canvas_type):
        self.label_hidden_accessories_22_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_22_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_22_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_22_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_22_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_22_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_hidden_accessories_22_turret_size = tk.Label(canvas_type, text="0", anchor="w")

        self.label_accessories_22_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_22_cost.grid(column=self.grid_col_cost,row=self.grid_row_accessories_22, sticky="w")
        self.label_accessories_22_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_22_weight.grid(column=self.grid_col_weight ,row=self.grid_row_accessories_22, sticky="w")
        self.label_accessories_22_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_22_space.grid(column=self.grid_col_spaces,row=self.grid_row_accessories_22, sticky="w")
        self.label_accessories_22_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_22_dp.grid(column=self.grid_col_dp,row=self.grid_row_accessories_22, sticky="w")
        self.label_accessories_22_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_accessories_22_notes.grid(column=self.grid_col_power_factors,row=self.grid_row_accessories_22, sticky="w", columnspan=4)

        self.var_accessories_22_qty = tk.IntVar()
        self.entry_accessories_22_qty = ttk.Entry(canvas_type, textvariable=self.var_accessories_22_qty, width=3)
        self.entry_accessories_22_qty.grid(column=self.grid_col_qty, row=self.grid_row_accessories_22, sticky="w")
        self.var_accessories_22_qty.trace_add("write", self.accessories_qty_22_update)

    def add_dropdown_accessories_22_canvas(self, canvas_type):
        self.selected_accessories_22 = tk.StringVar()
        self.selected_accessories_22.set("Accessories")
        options = self.get_accessories_options()
        # Create the dropdown widget
        self.accessories_22_dropdown = ttk.OptionMenu(canvas_type, self.selected_accessories_22, "Accessory", *options) #filled elsewhere
        self.accessories_22_dropdown.grid(column=self.grid_col_item, row=self.grid_row_accessories_22, sticky="w")
        self.selected_accessories_22.trace_add("write", self.on_select_accessories_22)

    def on_select_accessories_22(self, *args):
        selected_value = self.selected_accessories_22.get()
        for entry in self.accessories_list: #use the same self.accessories_list for every accessories dropdown
            accessories_name: str = entry.get("Accessory Name")
            if selected_value == accessories_name:
                accessories_cost:          str = entry.get("Cost")
                accessories_weight:        str = entry.get("Weight")
                accessories_space:         str = entry.get("Space")
                accessories_dp:            str = entry.get("DP")
                accessories_notes:         str = entry.get("Notes")
                accessories_turret_size:   str = entry.get("Turret Size")

                if accessories_cost == "":
                    accessories_cost = "0"
                if accessories_weight == "":
                    accessories_weight = "0"
                if accessories_space == "":
                    accessories_space = "0"

                self.label_hidden_accessories_22_name.configure(text=str(accessories_name))
                self.label_hidden_accessories_22_cost.configure(text=self.float_to_str(accessories_cost))
                self.label_hidden_accessories_22_weight.configure(text=self.float_to_str(accessories_weight))
                self.label_hidden_accessories_22_space.configure(text=self.float_to_str(accessories_space))
                self.label_hidden_accessories_22_dp.configure(text=str(accessories_dp))
                self.label_hidden_accessories_22_notes.configure(text=str(accessories_notes))
                self.label_hidden_accessories_22_turret_size.configure(text=str(accessories_turret_size))
                self.accessories_qty_22_update()
                self.recalculate()
                return#exit now

    def on_button_accessories_22_qty_up(self, *args):
        accessories_22_qty = self.var_accessories_22_qty.get()
        accessories_22_qty = accessories_22_qty + 1
        self.var_accessories_22_qty.set(value=accessories_22_qty)
        accessories_22_cost   = int(self.label_hidden_accessories_22_cost.cget("text"))
        accessories_22_weight = int(self.label_hidden_accessories_22_weight.cget("text"))
        accessories_22_space: str  = self.label_hidden_accessories_22_space.cget("text")
        accessories_22_dp:    str  = self.label_hidden_accessories_22_dp.cget("text")
        accessories_22_notes: str  = self.label_hidden_accessories_22_notes.cget("text")

        if accessories_22_space == "":
            accessories_22_space = 0.0
        else:
            accessories_22_space = float(accessories_22_space)

        self.label_accessories_22_cost.configure(text=self.float_to_str(accessories_22_cost * accessories_22_qty))
        self.label_accessories_22_weight.configure(text=self.float_to_str(accessories_22_weight * accessories_22_qty))
        self.label_accessories_22_space.configure(text=self.float_to_str(accessories_22_space * accessories_22_qty))
        self.label_accessories_22_dp.configure(text=str(accessories_22_dp))
        self.label_accessories_22_notes.configure(text=str(accessories_22_notes))
        self.accessories_special_processing()
        self.recalculate()

    def on_button_accessories_22_qty_down(self, *args):
        accessories_22_qty = self.var_accessories_22_qty.get()
        accessories_22_qty = max(accessories_22_qty - 1, 0)
        self.var_accessories_22_qty.set(value=accessories_22_qty)
        accessories_22_cost   = int(self.label_hidden_accessories_22_cost.cget("text"))
        accessories_22_weight = int(self.label_hidden_accessories_22_weight.cget("text"))
        accessories_22_space  = float(self.label_hidden_accessories_22_space.cget("text"))
        accessories_22_dp     = self.label_hidden_accessories_22_dp.cget("text")
        accessories_22_notes  = self.label_hidden_accessories_22_notes.cget("text")
        self.label_accessories_22_cost.configure(text=self.float_to_str(accessories_22_cost * accessories_22_qty))
        self.label_accessories_22_weight.configure(text=self.float_to_str(accessories_22_weight * accessories_22_qty))
        self.label_accessories_22_space.configure(text=self.float_to_str(accessories_22_space * accessories_22_qty))
        self.label_accessories_22_dp.configure(text=str(accessories_22_dp))
        if accessories_22_qty > 0:
            self.label_accessories_22_notes.configure(text=str(accessories_22_notes))
        else:
            self.label_accessories_22_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    def accessories_qty_22_update(self, *args):
        accessories_22_qty = self.var_accessories_22_qty.get()
        accessories_22_cost   = int(self.label_hidden_accessories_22_cost.cget("text"))
        accessories_22_weight = int(self.label_hidden_accessories_22_weight.cget("text"))
        accessories_22_space  = float(self.label_hidden_accessories_22_space.cget("text"))
        accessories_22_dp     = self.label_hidden_accessories_22_dp.cget("text")
        accessories_22_notes  = self.label_hidden_accessories_22_notes.cget("text")
        self.label_accessories_22_cost.configure(text=self.float_to_str(accessories_22_cost * accessories_22_qty))
        self.label_accessories_22_weight.configure(text=self.float_to_str(accessories_22_weight * accessories_22_qty))
        self.label_accessories_22_space.configure(text=self.float_to_str(accessories_22_space * accessories_22_qty))
        self.label_accessories_22_dp.configure(text=str(accessories_22_dp))
        if accessories_22_qty > 0:
            self.label_accessories_22_notes.configure(text=str(accessories_22_notes))
        else:
            self.label_accessories_22_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    ######################################################################
    # Accessories Row 23 processing here                                 #
    ######################################################################
    def add_labels_buttons_accessories_23_canvas(self, canvas_type):
        self.label_hidden_accessories_23_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_23_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_23_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_23_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_23_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_23_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_hidden_accessories_23_turret_size = tk.Label(canvas_type, text="0", anchor="w")

        self.label_accessories_23_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_23_cost.grid(column=self.grid_col_cost,row=self.grid_row_accessories_23, sticky="w")
        self.label_accessories_23_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_23_weight.grid(column=self.grid_col_weight ,row=self.grid_row_accessories_23, sticky="w")
        self.label_accessories_23_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_23_space.grid(column=self.grid_col_spaces,row=self.grid_row_accessories_23, sticky="w")
        self.label_accessories_23_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_23_dp.grid(column=self.grid_col_dp,row=self.grid_row_accessories_23, sticky="w")
        self.label_accessories_23_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_accessories_23_notes.grid(column=self.grid_col_power_factors,row=self.grid_row_accessories_23, sticky="w", columnspan=4)

        self.var_accessories_23_qty = tk.IntVar()
        self.entry_accessories_23_qty = ttk.Entry(canvas_type, textvariable=self.var_accessories_23_qty, width=3)
        self.entry_accessories_23_qty.grid(column=self.grid_col_qty, row=self.grid_row_accessories_23, sticky="w")
        self.var_accessories_23_qty.trace_add("write", self.accessories_qty_23_update)

    def add_dropdown_accessories_23_canvas(self, canvas_type):
        self.selected_accessories_23 = tk.StringVar()
        self.selected_accessories_23.set("Accessories")
        options = self.get_accessories_options()
        # Create the dropdown widget
        self.accessories_23_dropdown = ttk.OptionMenu(canvas_type, self.selected_accessories_23, "Accessory", *options) #filled elsewhere
        self.accessories_23_dropdown.grid(column=self.grid_col_item, row=self.grid_row_accessories_23, sticky="w")
        self.selected_accessories_23.trace_add("write", self.on_select_accessories_23)

    def on_select_accessories_23(self, *args):
        selected_value = self.selected_accessories_23.get()
        for entry in self.accessories_list: #use the same self.accessories_list for every accessories dropdown
            accessories_name: str = entry.get("Accessory Name")
            if selected_value == accessories_name:
                accessories_cost:          str = entry.get("Cost")
                accessories_weight:        str = entry.get("Weight")
                accessories_space:         str = entry.get("Space")
                accessories_dp:            str = entry.get("DP")
                accessories_notes:         str = entry.get("Notes")
                accessories_turret_size:   str = entry.get("Turret Size")

                if accessories_cost == "":
                    accessories_cost = "0"
                if accessories_weight == "":
                    accessories_weight = "0"
                if accessories_space == "":
                    accessories_space = "0"

                self.label_hidden_accessories_23_name.configure(text=str(accessories_name))
                self.label_hidden_accessories_23_cost.configure(text=self.float_to_str(accessories_cost))
                self.label_hidden_accessories_23_weight.configure(text=self.float_to_str(accessories_weight))
                self.label_hidden_accessories_23_space.configure(text=self.float_to_str(accessories_space))
                self.label_hidden_accessories_23_dp.configure(text=str(accessories_dp))
                self.label_hidden_accessories_23_notes.configure(text=str(accessories_notes))
                self.label_hidden_accessories_23_turret_size.configure(text=str(accessories_turret_size))
                self.accessories_qty_23_update()
                self.recalculate()
                return#exit now

    def on_button_accessories_23_qty_up(self, *args):
        accessories_23_qty = self.var_accessories_23_qty.get()
        accessories_23_qty = accessories_23_qty + 1
        self.var_accessories_23_qty.set(value=accessories_23_qty)
        accessories_23_cost   = int(self.label_hidden_accessories_23_cost.cget("text"))
        accessories_23_weight = int(self.label_hidden_accessories_23_weight.cget("text"))
        accessories_23_space: str  = self.label_hidden_accessories_23_space.cget("text")
        accessories_23_dp:    str  = self.label_hidden_accessories_23_dp.cget("text")
        accessories_23_notes: str  = self.label_hidden_accessories_23_notes.cget("text")

        if accessories_23_space == "":
            accessories_23_space = 0.0
        else:
            accessories_23_space = float(accessories_23_space)

        self.label_accessories_23_cost.configure(text=self.float_to_str(accessories_23_cost * accessories_23_qty))
        self.label_accessories_23_weight.configure(text=self.float_to_str(accessories_23_weight * accessories_23_qty))
        self.label_accessories_23_space.configure(text=self.float_to_str(accessories_23_space * accessories_23_qty))
        self.label_accessories_23_dp.configure(text=str(accessories_23_dp))
        self.label_accessories_23_notes.configure(text=str(accessories_23_notes))
        self.accessories_special_processing()
        self.recalculate()

    def on_button_accessories_23_qty_down(self, *args):
        accessories_23_qty = self.var_accessories_23_qty.get()
        accessories_23_qty = max(accessories_23_qty - 1, 0)
        self.var_accessories_23_qty.set(value=accessories_23_qty)
        accessories_23_cost   = int(self.label_hidden_accessories_23_cost.cget("text"))
        accessories_23_weight = int(self.label_hidden_accessories_23_weight.cget("text"))
        accessories_23_space  = float(self.label_hidden_accessories_23_space.cget("text"))
        accessories_23_dp     = self.label_hidden_accessories_23_dp.cget("text")
        accessories_23_notes  = self.label_hidden_accessories_23_notes.cget("text")
        self.label_accessories_23_cost.configure(text=self.float_to_str(accessories_23_cost * accessories_23_qty))
        self.label_accessories_23_weight.configure(text=self.float_to_str(accessories_23_weight * accessories_23_qty))
        self.label_accessories_23_space.configure(text=self.float_to_str(accessories_23_space * accessories_23_qty))
        self.label_accessories_23_dp.configure(text=str(accessories_23_dp))
        if accessories_23_qty > 0:
            self.label_accessories_23_notes.configure(text=str(accessories_23_notes))
        else:
            self.label_accessories_23_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    def accessories_qty_23_update(self, *args):
        accessories_23_qty = self.var_accessories_23_qty.get()
        accessories_23_cost   = int(self.label_hidden_accessories_23_cost.cget("text"))
        accessories_23_weight = int(self.label_hidden_accessories_23_weight.cget("text"))
        accessories_23_space  = float(self.label_hidden_accessories_23_space.cget("text"))
        accessories_23_dp     = self.label_hidden_accessories_23_dp.cget("text")
        accessories_23_notes  = self.label_hidden_accessories_23_notes.cget("text")
        self.label_accessories_23_cost.configure(text=self.float_to_str(accessories_23_cost * accessories_23_qty))
        self.label_accessories_23_weight.configure(text=self.float_to_str(accessories_23_weight * accessories_23_qty))
        self.label_accessories_23_space.configure(text=self.float_to_str(accessories_23_space * accessories_23_qty))
        self.label_accessories_23_dp.configure(text=str(accessories_23_dp))
        if accessories_23_qty > 0:
            self.label_accessories_23_notes.configure(text=str(accessories_23_notes))
        else:
            self.label_accessories_23_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    ######################################################################
    # Accessories Row 24 processing here                                 #
    ######################################################################
    def add_labels_buttons_accessories_24_canvas(self, canvas_type):
        self.label_hidden_accessories_24_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_24_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_24_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_24_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_24_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_24_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_hidden_accessories_24_turret_size = tk.Label(canvas_type, text="0", anchor="w")

        self.label_accessories_24_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_24_cost.grid(column=self.grid_col_cost,row=self.grid_row_accessories_24, sticky="w")
        self.label_accessories_24_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_24_weight.grid(column=self.grid_col_weight ,row=self.grid_row_accessories_24, sticky="w")
        self.label_accessories_24_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_24_space.grid(column=self.grid_col_spaces,row=self.grid_row_accessories_24, sticky="w")
        self.label_accessories_24_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_24_dp.grid(column=self.grid_col_dp,row=self.grid_row_accessories_24, sticky="w")
        self.label_accessories_24_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_accessories_24_notes.grid(column=self.grid_col_power_factors,row=self.grid_row_accessories_24, sticky="w", columnspan=4)

        self.var_accessories_24_qty = tk.IntVar()
        self.entry_accessories_24_qty = ttk.Entry(canvas_type, textvariable=self.var_accessories_24_qty, width=3)
        self.entry_accessories_24_qty.grid(column=self.grid_col_qty, row=self.grid_row_accessories_24, sticky="w")
        self.var_accessories_24_qty.trace_add("write", self.accessories_qty_24_update)

    def add_dropdown_accessories_24_canvas(self, canvas_type):
        self.selected_accessories_24 = tk.StringVar()
        self.selected_accessories_24.set("Accessories")
        options = self.get_accessories_options()
        # Create the dropdown widget
        self.accessories_24_dropdown = ttk.OptionMenu(canvas_type, self.selected_accessories_24, "Accessory", *options) #filled elsewhere
        self.accessories_24_dropdown.grid(column=self.grid_col_item, row=self.grid_row_accessories_24, sticky="w")
        self.selected_accessories_24.trace_add("write", self.on_select_accessories_24)

    def on_select_accessories_24(self, *args):
        selected_value = self.selected_accessories_24.get()
        for entry in self.accessories_list: #use the same self.accessories_list for every accessories dropdown
            accessories_name: str = entry.get("Accessory Name")
            if selected_value == accessories_name:
                accessories_cost:          str = entry.get("Cost")
                accessories_weight:        str = entry.get("Weight")
                accessories_space:         str = entry.get("Space")
                accessories_dp:            str = entry.get("DP")
                accessories_notes:         str = entry.get("Notes")
                accessories_turret_size:   str = entry.get("Turret Size")

                if accessories_cost == "":
                    accessories_cost = "0"
                if accessories_weight == "":
                    accessories_weight = "0"
                if accessories_space == "":
                    accessories_space = "0"

                self.label_hidden_accessories_24_name.configure(text=str(accessories_name))
                self.label_hidden_accessories_24_cost.configure(text=self.float_to_str(accessories_cost))
                self.label_hidden_accessories_24_weight.configure(text=self.float_to_str(accessories_weight))
                self.label_hidden_accessories_24_space.configure(text=self.float_to_str(accessories_space))
                self.label_hidden_accessories_24_dp.configure(text=str(accessories_dp))
                self.label_hidden_accessories_24_notes.configure(text=str(accessories_notes))
                self.label_hidden_accessories_24_turret_size.configure(text=str(accessories_turret_size))
                self.accessories_qty_24_update()
                self.recalculate()
                return#exit now

    def on_button_accessories_24_qty_up(self, *args):
        accessories_24_qty = self.var_accessories_24_qty.get()
        accessories_24_qty = accessories_24_qty + 1
        self.var_accessories_24_qty.set(value=accessories_24_qty)
        accessories_24_cost   = int(self.label_hidden_accessories_24_cost.cget("text"))
        accessories_24_weight = int(self.label_hidden_accessories_24_weight.cget("text"))
        accessories_24_space: str  = self.label_hidden_accessories_24_space.cget("text")
        accessories_24_dp:    str  = self.label_hidden_accessories_24_dp.cget("text")
        accessories_24_notes: str  = self.label_hidden_accessories_24_notes.cget("text")

        if accessories_24_space == "":
            accessories_24_space = 0.0
        else:
            accessories_24_space = float(accessories_24_space)

        self.label_accessories_24_cost.configure(text=self.float_to_str(accessories_24_cost * accessories_24_qty))
        self.label_accessories_24_weight.configure(text=self.float_to_str(accessories_24_weight * accessories_24_qty))
        self.label_accessories_24_space.configure(text=self.float_to_str(accessories_24_space * accessories_24_qty))
        self.label_accessories_24_dp.configure(text=str(accessories_24_dp))
        self.label_accessories_24_notes.configure(text=str(accessories_24_notes))
        self.accessories_special_processing()
        self.recalculate()

    def on_button_accessories_24_qty_down(self, *args):
        accessories_24_qty = self.var_accessories_24_qty.get()
        accessories_24_qty = max(accessories_24_qty - 1, 0)
        self.var_accessories_24_qty.set(value=accessories_24_qty)
        accessories_24_cost   = int(self.label_hidden_accessories_24_cost.cget("text"))
        accessories_24_weight = int(self.label_hidden_accessories_24_weight.cget("text"))
        accessories_24_space  = float(self.label_hidden_accessories_24_space.cget("text"))
        accessories_24_dp     = self.label_hidden_accessories_24_dp.cget("text")
        accessories_24_notes  = self.label_hidden_accessories_24_notes.cget("text")
        self.label_accessories_24_cost.configure(text=self.float_to_str(accessories_24_cost * accessories_24_qty))
        self.label_accessories_24_weight.configure(text=self.float_to_str(accessories_24_weight * accessories_24_qty))
        self.label_accessories_24_space.configure(text=self.float_to_str(accessories_24_space * accessories_24_qty))
        self.label_accessories_24_dp.configure(text=str(accessories_24_dp))
        if accessories_24_qty > 0:
            self.label_accessories_24_notes.configure(text=str(accessories_24_notes))
        else:
            self.label_accessories_24_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    def accessories_qty_24_update(self, *args):
        accessories_24_qty = self.var_accessories_24_qty.get()
        accessories_24_cost   = int(self.label_hidden_accessories_24_cost.cget("text"))
        accessories_24_weight = int(self.label_hidden_accessories_24_weight.cget("text"))
        accessories_24_space  = float(self.label_hidden_accessories_24_space.cget("text"))
        accessories_24_dp     = self.label_hidden_accessories_24_dp.cget("text")
        accessories_24_notes  = self.label_hidden_accessories_24_notes.cget("text")
        self.label_accessories_24_cost.configure(text=self.float_to_str(accessories_24_cost * accessories_24_qty))
        self.label_accessories_24_weight.configure(text=self.float_to_str(accessories_24_weight * accessories_24_qty))
        self.label_accessories_24_space.configure(text=self.float_to_str(accessories_24_space * accessories_24_qty))
        self.label_accessories_24_dp.configure(text=str(accessories_24_dp))
        if accessories_24_qty > 0:
            self.label_accessories_24_notes.configure(text=str(accessories_24_notes))
        else:
            self.label_accessories_24_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    ######################################################################
    # Accessories Row 25 processing here                                 #
    ######################################################################
    def add_labels_buttons_accessories_25_canvas(self, canvas_type):
        self.label_hidden_accessories_25_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_25_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_25_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_25_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_25_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_25_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_hidden_accessories_25_turret_size = tk.Label(canvas_type, text="0", anchor="w")

        self.label_accessories_25_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_25_cost.grid(column=self.grid_col_cost,row=self.grid_row_accessories_25, sticky="w")
        self.label_accessories_25_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_25_weight.grid(column=self.grid_col_weight ,row=self.grid_row_accessories_25, sticky="w")
        self.label_accessories_25_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_25_space.grid(column=self.grid_col_spaces,row=self.grid_row_accessories_25, sticky="w")
        self.label_accessories_25_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_25_dp.grid(column=self.grid_col_dp,row=self.grid_row_accessories_25, sticky="w")
        self.label_accessories_25_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_accessories_25_notes.grid(column=self.grid_col_power_factors,row=self.grid_row_accessories_25, sticky="w", columnspan=4)

        self.var_accessories_25_qty = tk.IntVar()
        self.entry_accessories_25_qty = ttk.Entry(canvas_type, textvariable=self.var_accessories_25_qty, width=3)
        self.entry_accessories_25_qty.grid(column=self.grid_col_qty, row=self.grid_row_accessories_25, sticky="w")
        self.var_accessories_25_qty.trace_add("write", self.accessories_qty_25_update)

    def add_dropdown_accessories_25_canvas(self, canvas_type):
        self.selected_accessories_25 = tk.StringVar()
        self.selected_accessories_25.set("Accessories")
        options = self.get_accessories_options()
        # Create the dropdown widget
        self.accessories_25_dropdown = ttk.OptionMenu(canvas_type, self.selected_accessories_25, "Accessory", *options) #filled elsewhere
        self.accessories_25_dropdown.grid(column=self.grid_col_item, row=self.grid_row_accessories_25, sticky="w")
        self.selected_accessories_25.trace_add("write", self.on_select_accessories_25)

    def on_select_accessories_25(self, *args):
        selected_value = self.selected_accessories_25.get()
        for entry in self.accessories_list: #use the same self.accessories_list for every accessories dropdown
            accessories_name: str = entry.get("Accessory Name")
            if selected_value == accessories_name:
                accessories_cost:          str = entry.get("Cost")
                accessories_weight:        str = entry.get("Weight")
                accessories_space:         str = entry.get("Space")
                accessories_dp:            str = entry.get("DP")
                accessories_notes:         str = entry.get("Notes")
                accessories_turret_size:   str = entry.get("Turret Size")

                if accessories_cost == "":
                    accessories_cost = "0"
                if accessories_weight == "":
                    accessories_weight = "0"
                if accessories_space == "":
                    accessories_space = "0"

                self.label_hidden_accessories_25_name.configure(text=str(accessories_name))
                self.label_hidden_accessories_25_cost.configure(text=self.float_to_str(accessories_cost))
                self.label_hidden_accessories_25_weight.configure(text=self.float_to_str(accessories_weight))
                self.label_hidden_accessories_25_space.configure(text=self.float_to_str(accessories_space))
                self.label_hidden_accessories_25_dp.configure(text=str(accessories_dp))
                self.label_hidden_accessories_25_notes.configure(text=str(accessories_notes))
                self.label_hidden_accessories_25_turret_size.configure(text=str(accessories_turret_size))
                self.accessories_qty_25_update()
                self.recalculate()
                return#exit now

    def on_button_accessories_25_qty_up(self, *args):
        accessories_25_qty = self.var_accessories_25_qty.get()
        accessories_25_qty = accessories_25_qty + 1
        self.var_accessories_25_qty.set(value=accessories_25_qty)
        accessories_25_cost   = int(self.label_hidden_accessories_25_cost.cget("text"))
        accessories_25_weight = int(self.label_hidden_accessories_25_weight.cget("text"))
        accessories_25_space: str  = self.label_hidden_accessories_25_space.cget("text")
        accessories_25_dp:    str  = self.label_hidden_accessories_25_dp.cget("text")
        accessories_25_notes: str  = self.label_hidden_accessories_25_notes.cget("text")

        if accessories_25_space == "":
            accessories_25_space = 0.0
        else:
            accessories_25_space = float(accessories_25_space)

        self.label_accessories_25_cost.configure(text=self.float_to_str(accessories_25_cost * accessories_25_qty))
        self.label_accessories_25_weight.configure(text=self.float_to_str(accessories_25_weight * accessories_25_qty))
        self.label_accessories_25_space.configure(text=self.float_to_str(accessories_25_space * accessories_25_qty))
        self.label_accessories_25_dp.configure(text=str(accessories_25_dp))
        self.label_accessories_25_notes.configure(text=str(accessories_25_notes))
        self.accessories_special_processing()
        self.recalculate()

    def on_button_accessories_25_qty_down(self, *args):
        accessories_25_qty = self.var_accessories_25_qty.get()
        accessories_25_qty = max(accessories_25_qty - 1, 0)
        self.var_accessories_25_qty.set(value=accessories_25_qty)
        accessories_25_cost   = int(self.label_hidden_accessories_25_cost.cget("text"))
        accessories_25_weight = int(self.label_hidden_accessories_25_weight.cget("text"))
        accessories_25_space  = float(self.label_hidden_accessories_25_space.cget("text"))
        accessories_25_dp     = self.label_hidden_accessories_25_dp.cget("text")
        accessories_25_notes  = self.label_hidden_accessories_25_notes.cget("text")
        self.label_accessories_25_cost.configure(text=self.float_to_str(accessories_25_cost * accessories_25_qty))
        self.label_accessories_25_weight.configure(text=self.float_to_str(accessories_25_weight * accessories_25_qty))
        self.label_accessories_25_space.configure(text=self.float_to_str(accessories_25_space * accessories_25_qty))
        self.label_accessories_25_dp.configure(text=str(accessories_25_dp))
        if accessories_25_qty > 0:
            self.label_accessories_25_notes.configure(text=str(accessories_25_notes))
        else:
            self.label_accessories_25_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    def accessories_qty_25_update(self, *args):
        accessories_25_qty = self.var_accessories_25_qty.get()
        accessories_25_cost   = int(self.label_hidden_accessories_25_cost.cget("text"))
        accessories_25_weight = int(self.label_hidden_accessories_25_weight.cget("text"))
        accessories_25_space  = float(self.label_hidden_accessories_25_space.cget("text"))
        accessories_25_dp     = self.label_hidden_accessories_25_dp.cget("text")
        accessories_25_notes  = self.label_hidden_accessories_25_notes.cget("text")
        self.label_accessories_25_cost.configure(text=self.float_to_str(accessories_25_cost * accessories_25_qty))
        self.label_accessories_25_weight.configure(text=self.float_to_str(accessories_25_weight * accessories_25_qty))
        self.label_accessories_25_space.configure(text=self.float_to_str(accessories_25_space * accessories_25_qty))
        self.label_accessories_25_dp.configure(text=str(accessories_25_dp))
        if accessories_25_qty > 0:
            self.label_accessories_25_notes.configure(text=str(accessories_25_notes))
        else:
            self.label_accessories_25_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    ######################################################################
    # Accessories Row 26 processing here                                 #
    ######################################################################
    def add_labels_buttons_accessories_26_canvas(self, canvas_type):
        self.label_hidden_accessories_26_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_26_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_26_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_26_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_26_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_26_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_hidden_accessories_26_turret_size = tk.Label(canvas_type, text="0", anchor="w")

        self.label_accessories_26_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_26_cost.grid(column=self.grid_col_cost,row=self.grid_row_accessories_26, sticky="w")
        self.label_accessories_26_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_26_weight.grid(column=self.grid_col_weight ,row=self.grid_row_accessories_26, sticky="w")
        self.label_accessories_26_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_26_space.grid(column=self.grid_col_spaces,row=self.grid_row_accessories_26, sticky="w")
        self.label_accessories_26_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_26_dp.grid(column=self.grid_col_dp,row=self.grid_row_accessories_26, sticky="w")
        self.label_accessories_26_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_accessories_26_notes.grid(column=self.grid_col_power_factors,row=self.grid_row_accessories_26, sticky="w", columnspan=4)

        self.var_accessories_26_qty = tk.IntVar()
        self.entry_accessories_26_qty = ttk.Entry(canvas_type, textvariable=self.var_accessories_26_qty, width=3)
        self.entry_accessories_26_qty.grid(column=self.grid_col_qty, row=self.grid_row_accessories_26, sticky="w")
        self.var_accessories_26_qty.trace_add("write", self.accessories_qty_26_update)

    def add_dropdown_accessories_26_canvas(self, canvas_type):
        self.selected_accessories_26 = tk.StringVar()
        self.selected_accessories_26.set("Accessories")
        options = self.get_accessories_options()
        # Create the dropdown widget
        self.accessories_26_dropdown = ttk.OptionMenu(canvas_type, self.selected_accessories_26, "Accessory", *options) #filled elsewhere
        self.accessories_26_dropdown.grid(column=self.grid_col_item, row=self.grid_row_accessories_26, sticky="w")
        self.selected_accessories_26.trace_add("write", self.on_select_accessories_26)

    def on_select_accessories_26(self, *args):
        selected_value = self.selected_accessories_26.get()
        for entry in self.accessories_list: #use the same self.accessories_list for every accessories dropdown
            accessories_name: str = entry.get("Accessory Name")
            if selected_value == accessories_name:
                accessories_cost:          str = entry.get("Cost")
                accessories_weight:        str = entry.get("Weight")
                accessories_space:         str = entry.get("Space")
                accessories_dp:            str = entry.get("DP")
                accessories_notes:         str = entry.get("Notes")
                accessories_turret_size:   str = entry.get("Turret Size")

                if accessories_cost == "":
                    accessories_cost = "0"
                if accessories_weight == "":
                    accessories_weight = "0"
                if accessories_space == "":
                    accessories_space = "0"

                self.label_hidden_accessories_26_name.configure(text=str(accessories_name))
                self.label_hidden_accessories_26_cost.configure(text=self.float_to_str(accessories_cost))
                self.label_hidden_accessories_26_weight.configure(text=self.float_to_str(accessories_weight))
                self.label_hidden_accessories_26_space.configure(text=self.float_to_str(accessories_space))
                self.label_hidden_accessories_26_dp.configure(text=str(accessories_dp))
                self.label_hidden_accessories_26_notes.configure(text=str(accessories_notes))
                self.label_hidden_accessories_26_turret_size.configure(text=str(accessories_turret_size))
                self.accessories_qty_26_update()
                self.recalculate()
                return#exit now

    def on_button_accessories_26_qty_up(self, *args):
        accessories_26_qty = self.var_accessories_26_qty.get()
        accessories_26_qty = accessories_26_qty + 1
        self.var_accessories_26_qty.set(value=accessories_26_qty)
        accessories_26_cost   = int(self.label_hidden_accessories_26_cost.cget("text"))
        accessories_26_weight = int(self.label_hidden_accessories_26_weight.cget("text"))
        accessories_26_space: str  = self.label_hidden_accessories_26_space.cget("text")
        accessories_26_dp:    str  = self.label_hidden_accessories_26_dp.cget("text")
        accessories_26_notes: str  = self.label_hidden_accessories_26_notes.cget("text")

        if accessories_26_space == "":
            accessories_26_space = 0.0
        else:
            accessories_26_space = float(accessories_26_space)

        self.label_accessories_26_cost.configure(text=self.float_to_str(accessories_26_cost * accessories_26_qty))
        self.label_accessories_26_weight.configure(text=self.float_to_str(accessories_26_weight * accessories_26_qty))
        self.label_accessories_26_space.configure(text=self.float_to_str(accessories_26_space * accessories_26_qty))
        self.label_accessories_26_dp.configure(text=str(accessories_26_dp))
        self.label_accessories_26_notes.configure(text=str(accessories_26_notes))
        self.accessories_special_processing()
        self.recalculate()

    def on_button_accessories_26_qty_down(self, *args):
        accessories_26_qty = self.var_accessories_26_qty.get()
        accessories_26_qty = max(accessories_26_qty - 1, 0)
        self.var_accessories_26_qty.set(value=accessories_26_qty)
        accessories_26_cost   = int(self.label_hidden_accessories_26_cost.cget("text"))
        accessories_26_weight = int(self.label_hidden_accessories_26_weight.cget("text"))
        accessories_26_space  = float(self.label_hidden_accessories_26_space.cget("text"))
        accessories_26_dp     = self.label_hidden_accessories_26_dp.cget("text")
        accessories_26_notes  = self.label_hidden_accessories_26_notes.cget("text")
        self.label_accessories_26_cost.configure(text=self.float_to_str(accessories_26_cost * accessories_26_qty))
        self.label_accessories_26_weight.configure(text=self.float_to_str(accessories_26_weight * accessories_26_qty))
        self.label_accessories_26_space.configure(text=self.float_to_str(accessories_26_space * accessories_26_qty))
        self.label_accessories_26_dp.configure(text=str(accessories_26_dp))
        if accessories_26_qty > 0:
            self.label_accessories_26_notes.configure(text=str(accessories_26_notes))
        else:
            self.label_accessories_26_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    def accessories_qty_26_update(self, *args):
        accessories_26_qty = self.var_accessories_26_qty.get()
        accessories_26_cost   = int(self.label_hidden_accessories_26_cost.cget("text"))
        accessories_26_weight = int(self.label_hidden_accessories_26_weight.cget("text"))
        accessories_26_space  = float(self.label_hidden_accessories_26_space.cget("text"))
        accessories_26_dp     = self.label_hidden_accessories_26_dp.cget("text")
        accessories_26_notes  = self.label_hidden_accessories_26_notes.cget("text")
        self.label_accessories_26_cost.configure(text=self.float_to_str(accessories_26_cost * accessories_26_qty))
        self.label_accessories_26_weight.configure(text=self.float_to_str(accessories_26_weight * accessories_26_qty))
        self.label_accessories_26_space.configure(text=self.float_to_str(accessories_26_space * accessories_26_qty))
        self.label_accessories_26_dp.configure(text=str(accessories_26_dp))
        if accessories_26_qty > 0:
            self.label_accessories_26_notes.configure(text=str(accessories_26_notes))
        else:
            self.label_accessories_26_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    ######################################################################
    # Accessories Row 27 processing here                                 #
    ######################################################################
    def add_labels_buttons_accessories_27_canvas(self, canvas_type):
        self.label_hidden_accessories_27_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_27_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_27_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_27_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_27_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_27_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_hidden_accessories_27_turret_size = tk.Label(canvas_type, text="0", anchor="w")

        self.label_accessories_27_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_27_cost.grid(column=self.grid_col_cost,row=self.grid_row_accessories_27, sticky="w")
        self.label_accessories_27_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_27_weight.grid(column=self.grid_col_weight ,row=self.grid_row_accessories_27, sticky="w")
        self.label_accessories_27_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_27_space.grid(column=self.grid_col_spaces,row=self.grid_row_accessories_27, sticky="w")
        self.label_accessories_27_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_27_dp.grid(column=self.grid_col_dp,row=self.grid_row_accessories_27, sticky="w")
        self.label_accessories_27_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_accessories_27_notes.grid(column=self.grid_col_power_factors,row=self.grid_row_accessories_27, sticky="w", columnspan=4)

        self.var_accessories_27_qty = tk.IntVar()
        self.entry_accessories_27_qty = ttk.Entry(canvas_type, textvariable=self.var_accessories_27_qty, width=3)
        self.entry_accessories_27_qty.grid(column=self.grid_col_qty, row=self.grid_row_accessories_27, sticky="w")
        self.var_accessories_27_qty.trace_add("write", self.accessories_qty_27_update)

    def add_dropdown_accessories_27_canvas(self, canvas_type):
        self.selected_accessories_27 = tk.StringVar()
        self.selected_accessories_27.set("Accessories")
        options = self.get_accessories_options()
        # Create the dropdown widget
        self.accessories_27_dropdown = ttk.OptionMenu(canvas_type, self.selected_accessories_27, "Accessory", *options) #filled elsewhere
        self.accessories_27_dropdown.grid(column=self.grid_col_item, row=self.grid_row_accessories_27, sticky="w")
        self.selected_accessories_27.trace_add("write", self.on_select_accessories_27)

    def on_select_accessories_27(self, *args):
        selected_value = self.selected_accessories_27.get()
        for entry in self.accessories_list: #use the same self.accessories_list for every accessories dropdown
            accessories_name: str = entry.get("Accessory Name")
            if selected_value == accessories_name:
                accessories_cost:          str = entry.get("Cost")
                accessories_weight:        str = entry.get("Weight")
                accessories_space:         str = entry.get("Space")
                accessories_dp:            str = entry.get("DP")
                accessories_notes:         str = entry.get("Notes")
                accessories_turret_size:   str = entry.get("Turret Size")

                if accessories_cost == "":
                    accessories_cost = "0"
                if accessories_weight == "":
                    accessories_weight = "0"
                if accessories_space == "":
                    accessories_space = "0"

                self.label_hidden_accessories_27_name.configure(text=str(accessories_name))
                self.label_hidden_accessories_27_cost.configure(text=self.float_to_str(accessories_cost))
                self.label_hidden_accessories_27_weight.configure(text=self.float_to_str(accessories_weight))
                self.label_hidden_accessories_27_space.configure(text=self.float_to_str(accessories_space))
                self.label_hidden_accessories_27_dp.configure(text=str(accessories_dp))
                self.label_hidden_accessories_27_notes.configure(text=str(accessories_notes))
                self.label_hidden_accessories_27_turret_size.configure(text=str(accessories_turret_size))
                self.accessories_qty_27_update()
                self.recalculate()
                return#exit now

    def on_button_accessories_27_qty_up(self, *args):
        accessories_27_qty = self.var_accessories_27_qty.get()
        accessories_27_qty = accessories_27_qty + 1
        self.var_accessories_27_qty.set(value=accessories_27_qty)
        accessories_27_cost   = int(self.label_hidden_accessories_27_cost.cget("text"))
        accessories_27_weight = int(self.label_hidden_accessories_27_weight.cget("text"))
        accessories_27_space: str  = self.label_hidden_accessories_27_space.cget("text")
        accessories_27_dp:    str  = self.label_hidden_accessories_27_dp.cget("text")
        accessories_27_notes: str  = self.label_hidden_accessories_27_notes.cget("text")

        if accessories_27_space == "":
            accessories_27_space = 0.0
        else:
            accessories_27_space = float(accessories_27_space)

        self.label_accessories_27_cost.configure(text=self.float_to_str(accessories_27_cost * accessories_27_qty))
        self.label_accessories_27_weight.configure(text=self.float_to_str(accessories_27_weight * accessories_27_qty))
        self.label_accessories_27_space.configure(text=self.float_to_str(accessories_27_space * accessories_27_qty))
        self.label_accessories_27_dp.configure(text=str(accessories_27_dp))
        self.label_accessories_27_notes.configure(text=str(accessories_27_notes))
        self.accessories_special_processing()
        self.recalculate()

    def on_button_accessories_27_qty_down(self, *args):
        accessories_27_qty = self.var_accessories_27_qty.get()
        accessories_27_qty = max(accessories_27_qty - 1, 0)
        self.var_accessories_27_qty.set(value=accessories_27_qty)
        accessories_27_cost   = int(self.label_hidden_accessories_27_cost.cget("text"))
        accessories_27_weight = int(self.label_hidden_accessories_27_weight.cget("text"))
        accessories_27_space  = float(self.label_hidden_accessories_27_space.cget("text"))
        accessories_27_dp     = self.label_hidden_accessories_27_dp.cget("text")
        accessories_27_notes  = self.label_hidden_accessories_27_notes.cget("text")
        self.label_accessories_27_cost.configure(text=self.float_to_str(accessories_27_cost * accessories_27_qty))
        self.label_accessories_27_weight.configure(text=self.float_to_str(accessories_27_weight * accessories_27_qty))
        self.label_accessories_27_space.configure(text=self.float_to_str(accessories_27_space * accessories_27_qty))
        self.label_accessories_27_dp.configure(text=str(accessories_27_dp))
        if accessories_27_qty > 0:
            self.label_accessories_27_notes.configure(text=str(accessories_27_notes))
        else:
            self.label_accessories_27_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    def accessories_qty_27_update(self, *args):
        accessories_27_qty = self.var_accessories_27_qty.get()
        accessories_27_cost   = int(self.label_hidden_accessories_27_cost.cget("text"))
        accessories_27_weight = int(self.label_hidden_accessories_27_weight.cget("text"))
        accessories_27_space  = float(self.label_hidden_accessories_27_space.cget("text"))
        accessories_27_dp     = self.label_hidden_accessories_27_dp.cget("text")
        accessories_27_notes  = self.label_hidden_accessories_27_notes.cget("text")
        self.label_accessories_27_cost.configure(text=self.float_to_str(accessories_27_cost * accessories_27_qty))
        self.label_accessories_27_weight.configure(text=self.float_to_str(accessories_27_weight * accessories_27_qty))
        self.label_accessories_27_space.configure(text=self.float_to_str(accessories_27_space * accessories_27_qty))
        self.label_accessories_27_dp.configure(text=str(accessories_27_dp))
        if accessories_27_qty > 0:
            self.label_accessories_27_notes.configure(text=str(accessories_27_notes))
        else:
            self.label_accessories_27_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    ######################################################################
    # Accessories Row 28 processing here                                 #
    ######################################################################
    def add_labels_buttons_accessories_28_canvas(self, canvas_type):
        self.label_hidden_accessories_28_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_28_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_28_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_28_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_28_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_28_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_hidden_accessories_28_turret_size = tk.Label(canvas_type, text="0", anchor="w")

        self.label_accessories_28_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_28_cost.grid(column=self.grid_col_cost,row=self.grid_row_accessories_28, sticky="w")
        self.label_accessories_28_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_28_weight.grid(column=self.grid_col_weight ,row=self.grid_row_accessories_28, sticky="w")
        self.label_accessories_28_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_28_space.grid(column=self.grid_col_spaces,row=self.grid_row_accessories_28, sticky="w")
        self.label_accessories_28_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_28_dp.grid(column=self.grid_col_dp,row=self.grid_row_accessories_28, sticky="w")
        self.label_accessories_28_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_accessories_28_notes.grid(column=self.grid_col_power_factors,row=self.grid_row_accessories_28, sticky="w", columnspan=4)

        self.var_accessories_28_qty = tk.IntVar()
        self.entry_accessories_28_qty = ttk.Entry(canvas_type, textvariable=self.var_accessories_28_qty, width=3)
        self.entry_accessories_28_qty.grid(column=self.grid_col_qty, row=self.grid_row_accessories_28, sticky="w")
        self.var_accessories_28_qty.trace_add("write", self.accessories_qty_28_update)

    def add_dropdown_accessories_28_canvas(self, canvas_type):
        self.selected_accessories_28 = tk.StringVar()
        self.selected_accessories_28.set("Accessories")
        options = self.get_accessories_options()
        # Create the dropdown widget
        self.accessories_28_dropdown = ttk.OptionMenu(canvas_type, self.selected_accessories_28, "Accessory", *options) #filled elsewhere
        self.accessories_28_dropdown.grid(column=self.grid_col_item, row=self.grid_row_accessories_28, sticky="w")
        self.selected_accessories_28.trace_add("write", self.on_select_accessories_28)

    def on_select_accessories_28(self, *args):
        selected_value = self.selected_accessories_28.get()
        for entry in self.accessories_list: #use the same self.accessories_list for every accessories dropdown
            accessories_name: str = entry.get("Accessory Name")
            if selected_value == accessories_name:
                accessories_cost:          str = entry.get("Cost")
                accessories_weight:        str = entry.get("Weight")
                accessories_space:         str = entry.get("Space")
                accessories_dp:            str = entry.get("DP")
                accessories_notes:         str = entry.get("Notes")
                accessories_turret_size:   str = entry.get("Turret Size")

                if accessories_cost == "":
                    accessories_cost = "0"
                if accessories_weight == "":
                    accessories_weight = "0"
                if accessories_space == "":
                    accessories_space = "0"

                self.label_hidden_accessories_28_name.configure(text=str(accessories_name))
                self.label_hidden_accessories_28_cost.configure(text=self.float_to_str(accessories_cost))
                self.label_hidden_accessories_28_weight.configure(text=self.float_to_str(accessories_weight))
                self.label_hidden_accessories_28_space.configure(text=self.float_to_str(accessories_space))
                self.label_hidden_accessories_28_dp.configure(text=str(accessories_dp))
                self.label_hidden_accessories_28_notes.configure(text=str(accessories_notes))
                self.label_hidden_accessories_28_turret_size.configure(text=str(accessories_turret_size))
                self.accessories_qty_28_update()
                self.recalculate()
                return#exit now

    def on_button_accessories_28_qty_up(self, *args):
        accessories_28_qty = self.var_accessories_28_qty.get()
        accessories_28_qty = accessories_28_qty + 1
        self.var_accessories_28_qty.set(value=accessories_28_qty)
        accessories_28_cost   = int(self.label_hidden_accessories_28_cost.cget("text"))
        accessories_28_weight = int(self.label_hidden_accessories_28_weight.cget("text"))
        accessories_28_space: str  = self.label_hidden_accessories_28_space.cget("text")
        accessories_28_dp:    str  = self.label_hidden_accessories_28_dp.cget("text")
        accessories_28_notes: str  = self.label_hidden_accessories_28_notes.cget("text")

        if accessories_28_space == "":
            accessories_28_space = 0.0
        else:
            accessories_28_space = float(accessories_28_space)

        self.label_accessories_28_cost.configure(text=self.float_to_str(accessories_28_cost * accessories_28_qty))
        self.label_accessories_28_weight.configure(text=self.float_to_str(accessories_28_weight * accessories_28_qty))
        self.label_accessories_28_space.configure(text=self.float_to_str(accessories_28_space * accessories_28_qty))
        self.label_accessories_28_dp.configure(text=str(accessories_28_dp))
        self.label_accessories_28_notes.configure(text=str(accessories_28_notes))
        self.accessories_special_processing()
        self.recalculate()

    def on_button_accessories_28_qty_down(self, *args):
        accessories_28_qty = self.var_accessories_28_qty.get()
        accessories_28_qty = max(accessories_28_qty - 1, 0)
        self.var_accessories_28_qty.set(value=accessories_28_qty)
        accessories_28_cost   = int(self.label_hidden_accessories_28_cost.cget("text"))
        accessories_28_weight = int(self.label_hidden_accessories_28_weight.cget("text"))
        accessories_28_space  = float(self.label_hidden_accessories_28_space.cget("text"))
        accessories_28_dp     = self.label_hidden_accessories_28_dp.cget("text")
        accessories_28_notes  = self.label_hidden_accessories_28_notes.cget("text")
        self.label_accessories_28_cost.configure(text=self.float_to_str(accessories_28_cost * accessories_28_qty))
        self.label_accessories_28_weight.configure(text=self.float_to_str(accessories_28_weight * accessories_28_qty))
        self.label_accessories_28_space.configure(text=self.float_to_str(accessories_28_space * accessories_28_qty))
        self.label_accessories_28_dp.configure(text=str(accessories_28_dp))
        if accessories_28_qty > 0:
            self.label_accessories_28_notes.configure(text=str(accessories_28_notes))
        else:
            self.label_accessories_28_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    def accessories_qty_28_update(self, *args):
        accessories_28_qty = self.var_accessories_28_qty.get()
        accessories_28_cost   = int(self.label_hidden_accessories_28_cost.cget("text"))
        accessories_28_weight = int(self.label_hidden_accessories_28_weight.cget("text"))
        accessories_28_space  = float(self.label_hidden_accessories_28_space.cget("text"))
        accessories_28_dp     = self.label_hidden_accessories_28_dp.cget("text")
        accessories_28_notes  = self.label_hidden_accessories_28_notes.cget("text")
        self.label_accessories_28_cost.configure(text=self.float_to_str(accessories_28_cost * accessories_28_qty))
        self.label_accessories_28_weight.configure(text=self.float_to_str(accessories_28_weight * accessories_28_qty))
        self.label_accessories_28_space.configure(text=self.float_to_str(accessories_28_space * accessories_28_qty))
        self.label_accessories_28_dp.configure(text=str(accessories_28_dp))
        if accessories_28_qty > 0:
            self.label_accessories_28_notes.configure(text=str(accessories_28_notes))
        else:
            self.label_accessories_28_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    ######################################################################
    # Accessories Row 29 processing here                                 #
    ######################################################################
    def add_labels_buttons_accessories_29_canvas(self, canvas_type):
        self.label_hidden_accessories_29_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_29_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_29_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_29_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_29_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_29_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_hidden_accessories_29_turret_size = tk.Label(canvas_type, text="0", anchor="w")

        self.label_accessories_29_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_29_cost.grid(column=self.grid_col_cost,row=self.grid_row_accessories_29, sticky="w")
        self.label_accessories_29_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_29_weight.grid(column=self.grid_col_weight ,row=self.grid_row_accessories_29, sticky="w")
        self.label_accessories_29_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_29_space.grid(column=self.grid_col_spaces,row=self.grid_row_accessories_29, sticky="w")
        self.label_accessories_29_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_29_dp.grid(column=self.grid_col_dp,row=self.grid_row_accessories_29, sticky="w")
        self.label_accessories_29_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_accessories_29_notes.grid(column=self.grid_col_power_factors,row=self.grid_row_accessories_29, sticky="w", columnspan=4)

        self.var_accessories_29_qty = tk.IntVar()
        self.entry_accessories_29_qty = ttk.Entry(canvas_type, textvariable=self.var_accessories_29_qty, width=3)
        self.entry_accessories_29_qty.grid(column=self.grid_col_qty, row=self.grid_row_accessories_29, sticky="w")
        self.var_accessories_29_qty.trace_add("write", self.accessories_qty_29_update)

    def add_dropdown_accessories_29_canvas(self, canvas_type):
        self.selected_accessories_29 = tk.StringVar()
        self.selected_accessories_29.set("Accessories")
        options = self.get_accessories_options()
        # Create the dropdown widget
        self.accessories_29_dropdown = ttk.OptionMenu(canvas_type, self.selected_accessories_29, "Accessory", *options) #filled elsewhere
        self.accessories_29_dropdown.grid(column=self.grid_col_item, row=self.grid_row_accessories_29, sticky="w")
        self.selected_accessories_29.trace_add("write", self.on_select_accessories_29)

    def on_select_accessories_29(self, *args):
        selected_value = self.selected_accessories_29.get()
        for entry in self.accessories_list: #use the same self.accessories_list for every accessories dropdown
            accessories_name: str = entry.get("Accessory Name")
            if selected_value == accessories_name:
                accessories_cost:          str = entry.get("Cost")
                accessories_weight:        str = entry.get("Weight")
                accessories_space:         str = entry.get("Space")
                accessories_dp:            str = entry.get("DP")
                accessories_notes:         str = entry.get("Notes")
                accessories_turret_size:   str = entry.get("Turret Size")

                if accessories_cost == "":
                    accessories_cost = "0"
                if accessories_weight == "":
                    accessories_weight = "0"
                if accessories_space == "":
                    accessories_space = "0"

                self.label_hidden_accessories_29_name.configure(text=str(accessories_name))
                self.label_hidden_accessories_29_cost.configure(text=self.float_to_str(accessories_cost))
                self.label_hidden_accessories_29_weight.configure(text=self.float_to_str(accessories_weight))
                self.label_hidden_accessories_29_space.configure(text=self.float_to_str(accessories_space))
                self.label_hidden_accessories_29_dp.configure(text=str(accessories_dp))
                self.label_hidden_accessories_29_notes.configure(text=str(accessories_notes))
                self.label_hidden_accessories_29_turret_size.configure(text=str(accessories_turret_size))
                self.accessories_qty_29_update()
                self.recalculate()
                return#exit now

    def on_button_accessories_29_qty_up(self, *args):
        accessories_29_qty = self.var_accessories_29_qty.get()
        accessories_29_qty = accessories_29_qty + 1
        self.var_accessories_29_qty.set(value=accessories_29_qty)
        accessories_29_cost   = int(self.label_hidden_accessories_29_cost.cget("text"))
        accessories_29_weight = int(self.label_hidden_accessories_29_weight.cget("text"))
        accessories_29_space: str  = self.label_hidden_accessories_29_space.cget("text")
        accessories_29_dp:    str  = self.label_hidden_accessories_29_dp.cget("text")
        accessories_29_notes: str  = self.label_hidden_accessories_29_notes.cget("text")

        if accessories_29_space == "":
            accessories_29_space = 0.0
        else:
            accessories_29_space = float(accessories_29_space)

        self.label_accessories_29_cost.configure(text=self.float_to_str(accessories_29_cost * accessories_29_qty))
        self.label_accessories_29_weight.configure(text=self.float_to_str(accessories_29_weight * accessories_29_qty))
        self.label_accessories_29_space.configure(text=self.float_to_str(accessories_29_space * accessories_29_qty))
        self.label_accessories_29_dp.configure(text=str(accessories_29_dp))
        self.label_accessories_29_notes.configure(text=str(accessories_29_notes))
        self.accessories_special_processing()
        self.recalculate()

    def on_button_accessories_29_qty_down(self, *args):
        accessories_29_qty = self.var_accessories_29_qty.get()
        accessories_29_qty = max(accessories_29_qty - 1, 0)
        self.var_accessories_29_qty.set(value=accessories_29_qty)
        accessories_29_cost   = int(self.label_hidden_accessories_29_cost.cget("text"))
        accessories_29_weight = int(self.label_hidden_accessories_29_weight.cget("text"))
        accessories_29_space  = float(self.label_hidden_accessories_29_space.cget("text"))
        accessories_29_dp     = self.label_hidden_accessories_29_dp.cget("text")
        accessories_29_notes  = self.label_hidden_accessories_29_notes.cget("text")
        self.label_accessories_29_cost.configure(text=self.float_to_str(accessories_29_cost * accessories_29_qty))
        self.label_accessories_29_weight.configure(text=self.float_to_str(accessories_29_weight * accessories_29_qty))
        self.label_accessories_29_space.configure(text=self.float_to_str(accessories_29_space * accessories_29_qty))
        self.label_accessories_29_dp.configure(text=str(accessories_29_dp))
        if accessories_29_qty > 0:
            self.label_accessories_29_notes.configure(text=str(accessories_29_notes))
        else:
            self.label_accessories_29_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    def accessories_qty_29_update(self, *args):
        accessories_29_qty = self.var_accessories_29_qty.get()
        accessories_29_cost   = int(self.label_hidden_accessories_29_cost.cget("text"))
        accessories_29_weight = int(self.label_hidden_accessories_29_weight.cget("text"))
        accessories_29_space  = float(self.label_hidden_accessories_29_space.cget("text"))
        accessories_29_dp     = self.label_hidden_accessories_29_dp.cget("text")
        accessories_29_notes  = self.label_hidden_accessories_29_notes.cget("text")
        self.label_accessories_29_cost.configure(text=self.float_to_str(accessories_29_cost * accessories_29_qty))
        self.label_accessories_29_weight.configure(text=self.float_to_str(accessories_29_weight * accessories_29_qty))
        self.label_accessories_29_space.configure(text=self.float_to_str(accessories_29_space * accessories_29_qty))
        self.label_accessories_29_dp.configure(text=str(accessories_29_dp))
        if accessories_29_qty > 0:
            self.label_accessories_29_notes.configure(text=str(accessories_29_notes))
        else:
            self.label_accessories_29_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    ######################################################################
    # Accessories Row 30 processing here                                 #
    ######################################################################
    def add_labels_buttons_accessories_30_canvas(self, canvas_type):
        self.label_hidden_accessories_30_name = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_30_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_30_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_30_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_30_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_accessories_30_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_hidden_accessories_30_turret_size = tk.Label(canvas_type, text="0", anchor="w")

        self.label_accessories_30_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_30_cost.grid(column=self.grid_col_cost,row=self.grid_row_accessories_30, sticky="w")
        self.label_accessories_30_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_30_weight.grid(column=self.grid_col_weight ,row=self.grid_row_accessories_30, sticky="w")
        self.label_accessories_30_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_30_space.grid(column=self.grid_col_spaces,row=self.grid_row_accessories_30, sticky="w")
        self.label_accessories_30_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_accessories_30_dp.grid(column=self.grid_col_dp,row=self.grid_row_accessories_30, sticky="w")
        self.label_accessories_30_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_accessories_30_notes.grid(column=self.grid_col_power_factors,row=self.grid_row_accessories_30, sticky="w", columnspan=4)

        self.var_accessories_30_qty = tk.IntVar()
        self.entry_accessories_30_qty = ttk.Entry(canvas_type, textvariable=self.var_accessories_30_qty, width=3)
        self.entry_accessories_30_qty.grid(column=self.grid_col_qty, row=self.grid_row_accessories_30, sticky="w")
        self.var_accessories_30_qty.trace_add("write", self.accessories_qty_30_update)

    def add_dropdown_accessories_30_canvas(self, canvas_type):
        self.selected_accessories_30 = tk.StringVar()
        self.selected_accessories_30.set("Accessories")
        options = self.get_accessories_options()
        # Create the dropdown widget
        self.accessories_30_dropdown = ttk.OptionMenu(canvas_type, self.selected_accessories_30, "Accessory", *options) #filled elsewhere
        self.accessories_30_dropdown.grid(column=self.grid_col_item, row=self.grid_row_accessories_30, sticky="w")
        self.selected_accessories_30.trace_add("write", self.on_select_accessories_30)

    def on_select_accessories_30(self, *args):
        selected_value = self.selected_accessories_30.get()
        for entry in self.accessories_list: #use the same self.accessories_list for every accessories dropdown
            accessories_name: str = entry.get("Accessory Name")
            if selected_value == accessories_name:
                accessories_cost:          str = entry.get("Cost")
                accessories_weight:        str = entry.get("Weight")
                accessories_space:         str = entry.get("Space")
                accessories_dp:            str = entry.get("DP")
                accessories_notes:         str = entry.get("Notes")
                accessories_turret_size:   str = entry.get("Turret Size")

                if accessories_cost == "":
                    accessories_cost = "0"
                if accessories_weight == "":
                    accessories_weight = "0"
                if accessories_space == "":
                    accessories_space = "0"

                self.label_hidden_accessories_30_name.configure(text=str(accessories_name))
                self.label_hidden_accessories_30_cost.configure(text=self.float_to_str(accessories_cost))
                self.label_hidden_accessories_30_weight.configure(text=self.float_to_str(accessories_weight))
                self.label_hidden_accessories_30_space.configure(text=self.float_to_str(accessories_space))
                self.label_hidden_accessories_30_dp.configure(text=str(accessories_dp))
                self.label_hidden_accessories_30_notes.configure(text=str(accessories_notes))
                self.label_hidden_accessories_30_turret_size.configure(text=str(accessories_turret_size))
                self.accessories_qty_30_update()
                self.recalculate()
                return#exit now

    def on_button_accessories_30_qty_up(self, *args):
        accessories_30_qty = self.var_accessories_30_qty.get()
        accessories_30_qty = accessories_30_qty + 1
        self.var_accessories_30_qty.set(value=accessories_30_qty)
        accessories_30_cost   = int(self.label_hidden_accessories_30_cost.cget("text"))
        accessories_30_weight = int(self.label_hidden_accessories_30_weight.cget("text"))
        accessories_30_space: str  = self.label_hidden_accessories_30_space.cget("text")
        accessories_30_dp:    str  = self.label_hidden_accessories_30_dp.cget("text")
        accessories_30_notes: str  = self.label_hidden_accessories_30_notes.cget("text")
        if accessories_30_space == "":
            accessories_30_space = 0.0
        else:
            accessories_30_space = float(accessories_30_space)
        self.label_accessories_30_cost.configure(text=self.float_to_str(accessories_30_cost * accessories_30_qty))
        self.label_accessories_30_weight.configure(text=self.float_to_str(accessories_30_weight * accessories_30_qty))
        self.label_accessories_30_space.configure(text=self.float_to_str(accessories_30_space * accessories_30_qty))
        self.label_accessories_30_dp.configure(text=str(accessories_30_dp))
        self.label_accessories_30_notes.configure(text=str(accessories_30_notes))
        self.accessories_special_processing()
        self.recalculate()

    def on_button_accessories_30_qty_down(self, *args):
        accessories_30_qty = self.var_accessories_30_qty.get()
        accessories_30_qty = max(accessories_30_qty - 1, 0)
        self.var_accessories_30_qty.set(value=accessories_30_qty)
        accessories_30_cost   = int(self.label_hidden_accessories_30_cost.cget("text"))
        accessories_30_weight = int(self.label_hidden_accessories_30_weight.cget("text"))
        accessories_30_space  = float(self.label_hidden_accessories_30_space.cget("text"))
        accessories_30_dp     = self.label_hidden_accessories_30_dp.cget("text")
        accessories_30_notes  = self.label_hidden_accessories_30_notes.cget("text")
        self.label_accessories_30_cost.configure(text=self.float_to_str(accessories_30_cost * accessories_30_qty))
        self.label_accessories_30_weight.configure(text=self.float_to_str(accessories_30_weight * accessories_30_qty))
        self.label_accessories_30_space.configure(text=self.float_to_str(accessories_30_space * accessories_30_qty))
        self.label_accessories_30_dp.configure(text=str(accessories_30_dp))
        if accessories_30_qty > 0:
            self.label_accessories_30_notes.configure(text=str(accessories_30_notes))
        else:
            self.label_accessories_30_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    def accessories_qty_30_update(self, *args):
        accessories_30_qty = self.var_accessories_30_qty.get()
        accessories_30_cost   = int(self.label_hidden_accessories_30_cost.cget("text"))
        accessories_30_weight = int(self.label_hidden_accessories_30_weight.cget("text"))
        accessories_30_space  = float(self.label_hidden_accessories_30_space.cget("text"))
        accessories_30_dp     = self.label_hidden_accessories_30_dp.cget("text")
        accessories_30_notes  = self.label_hidden_accessories_30_notes.cget("text")
        self.label_accessories_30_cost.configure(text=self.float_to_str(accessories_30_cost * accessories_30_qty))
        self.label_accessories_30_weight.configure(text=self.float_to_str(accessories_30_weight * accessories_30_qty))
        self.label_accessories_30_space.configure(text=self.float_to_str(accessories_30_space * accessories_30_qty))
        self.label_accessories_30_dp.configure(text=str(accessories_30_dp))
        if accessories_30_qty > 0:
            self.label_accessories_30_notes.configure(text=str(accessories_30_notes))
        else:
            self.label_accessories_30_notes.configure(text=str(""))
        self.accessories_special_processing()
        self.recalculate()

    def load_accessories_processing_list(self):
        self.accessories_processing_list: list = []
        entry_dict: dict = {0: self.selected_accessories_1, 1: self.label_accessories_1_cost, 2: self.label_accessories_1_weight, 3: self.var_accessories_1_qty, 4: self.label_hidden_accessories_hc_1}
        self.accessories_processing_list.append(entry_dict)
        entry_dict: dict = {0: self.selected_accessories_2, 1: self.label_accessories_2_cost, 2: self.label_accessories_2_weight, 3: self.var_accessories_2_qty, 4: self.label_hidden_accessories_hc_2}
        self.accessories_processing_list.append(entry_dict)
        entry_dict: dict = {0: self.selected_accessories_3, 1: self.label_accessories_3_cost, 2: self.label_accessories_3_weight, 3: self.var_accessories_3_qty, 4: self.label_hidden_accessories_hc_3}
        self.accessories_processing_list.append(entry_dict)
        entry_dict: dict = {0: self.selected_accessories_4, 1: self.label_accessories_4_cost, 2: self.label_accessories_4_weight, 3: self.var_accessories_4_qty, 4: self.label_hidden_accessories_hc_4}
        self.accessories_processing_list.append(entry_dict)
        entry_dict: dict = {0: self.selected_accessories_5, 1: self.label_accessories_5_cost, 2: self.label_accessories_5_weight, 3: self.var_accessories_5_qty, 4: self.label_hidden_accessories_hc_5}
        self.accessories_processing_list.append(entry_dict)
        entry_dict: dict = {0: self.selected_accessories_6, 1: self.label_accessories_6_cost, 2: self.label_accessories_6_weight, 3: self.var_accessories_6_qty, 4: self.label_hidden_accessories_hc_6}
        self.accessories_processing_list.append(entry_dict)
        entry_dict: dict = {0: self.selected_accessories_7, 1: self.label_accessories_7_cost, 2: self.label_accessories_7_weight, 3: self.var_accessories_7_qty, 4: self.label_hidden_accessories_hc_7}
        self.accessories_processing_list.append(entry_dict)
        entry_dict: dict = {0: self.selected_accessories_8, 1: self.label_accessories_8_cost, 2: self.label_accessories_8_weight, 3: self.var_accessories_8_qty, 4: self.label_hidden_accessories_hc_8}
        self.accessories_processing_list.append(entry_dict)
        entry_dict: dict = {0: self.selected_accessories_9, 1: self.label_accessories_9_cost, 2: self.label_accessories_9_weight, 3: self.var_accessories_9_qty, 4: self.label_hidden_accessories_hc_9}
        self.accessories_processing_list.append(entry_dict)
        entry_dict: dict = {0: self.selected_accessories_10, 1: self.label_accessories_10_cost, 2: self.label_accessories_10_weight, 3: self.var_accessories_10_qty, 4: self.label_hidden_accessories_hc_10}
        self.accessories_processing_list.append(entry_dict)
        entry_dict: dict = {0: self.selected_accessories_11, 1: self.label_accessories_11_cost, 2: self.label_accessories_11_weight, 3: self.var_accessories_11_qty, 4: self.label_hidden_accessories_hc_11}
        self.accessories_processing_list.append(entry_dict)
        entry_dict: dict = {0: self.selected_accessories_12, 1: self.label_accessories_12_cost, 2: self.label_accessories_12_weight, 3: self.var_accessories_12_qty, 4: self.label_hidden_accessories_hc_12}
        self.accessories_processing_list.append(entry_dict)
        entry_dict: dict = {0: self.selected_accessories_13, 1: self.label_accessories_13_cost, 2: self.label_accessories_13_weight, 3: self.var_accessories_13_qty, 4: self.label_hidden_accessories_hc_13}
        self.accessories_processing_list.append(entry_dict)
        entry_dict: dict = {0: self.selected_accessories_14, 1: self.label_accessories_14_cost, 2: self.label_accessories_14_weight, 3: self.var_accessories_14_qty, 4: self.label_hidden_accessories_hc_14}
        self.accessories_processing_list.append(entry_dict)
        entry_dict: dict = {0: self.selected_accessories_15, 1: self.label_accessories_15_cost, 2: self.label_accessories_15_weight, 3: self.var_accessories_15_qty, 4: self.label_hidden_accessories_hc_15}
        self.accessories_processing_list.append(entry_dict)
        entry_dict: dict = {0: self.selected_accessories_16, 1: self.label_accessories_16_cost, 2: self.label_accessories_16_weight, 3: self.var_accessories_16_qty, 4: self.label_hidden_accessories_hc_16}
        self.accessories_processing_list.append(entry_dict)
        entry_dict: dict = {0: self.selected_accessories_17, 1: self.label_accessories_17_cost, 2: self.label_accessories_17_weight, 3: self.var_accessories_17_qty, 4: self.label_hidden_accessories_hc_17}
        self.accessories_processing_list.append(entry_dict)
        entry_dict: dict = {0: self.selected_accessories_18, 1: self.label_accessories_18_cost, 2: self.label_accessories_18_weight, 3: self.var_accessories_18_qty, 4: self.label_hidden_accessories_hc_18}
        self.accessories_processing_list.append(entry_dict)
        entry_dict: dict = {0: self.selected_accessories_19, 1: self.label_accessories_19_cost, 2: self.label_accessories_19_weight, 3: self.var_accessories_19_qty, 4: self.label_hidden_accessories_hc_19}
        self.accessories_processing_list.append(entry_dict)
        entry_dict: dict = {0: self.selected_accessories_20, 1: self.label_accessories_20_cost, 2: self.label_accessories_20_weight, 3: self.var_accessories_20_qty, 4: self.label_hidden_accessories_hc_20}
        self.accessories_processing_list.append(entry_dict)
        entry_dict: dict = {0: self.selected_accessories_21, 1: self.label_accessories_21_cost, 2: self.label_accessories_21_weight, 3: self.var_accessories_21_qty, 4: self.label_hidden_accessories_hc_21}
        self.accessories_processing_list.append(entry_dict)
        entry_dict: dict = {0: self.selected_accessories_22, 1: self.label_accessories_22_cost, 2: self.label_accessories_22_weight, 3: self.var_accessories_22_qty, 4: self.label_hidden_accessories_hc_22}
        self.accessories_processing_list.append(entry_dict)
        entry_dict: dict = {0: self.selected_accessories_23, 1: self.label_accessories_23_cost, 2: self.label_accessories_23_weight, 3: self.var_accessories_23_qty, 4: self.label_hidden_accessories_hc_23}
        self.accessories_processing_list.append(entry_dict)
        entry_dict: dict = {0: self.selected_accessories_24, 1: self.label_accessories_24_cost, 2: self.label_accessories_24_weight, 3: self.var_accessories_24_qty, 4: self.label_hidden_accessories_hc_24}
        self.accessories_processing_list.append(entry_dict)
        entry_dict: dict = {0: self.selected_accessories_25, 1: self.label_accessories_25_cost, 2: self.label_accessories_25_weight, 3: self.var_accessories_25_qty, 4: self.label_hidden_accessories_hc_25}
        self.accessories_processing_list.append(entry_dict)
        entry_dict: dict = {0: self.selected_accessories_26, 1: self.label_accessories_26_cost, 2: self.label_accessories_26_weight, 3: self.var_accessories_26_qty, 4: self.label_hidden_accessories_hc_26}
        self.accessories_processing_list.append(entry_dict)
        entry_dict: dict = {0: self.selected_accessories_27, 1: self.label_accessories_27_cost, 2: self.label_accessories_27_weight, 3: self.var_accessories_27_qty, 4: self.label_hidden_accessories_hc_27}
        self.accessories_processing_list.append(entry_dict)
        entry_dict: dict = {0: self.selected_accessories_28, 1: self.label_accessories_28_cost, 2: self.label_accessories_28_weight, 3: self.var_accessories_28_qty, 4: self.label_hidden_accessories_hc_28}
        self.accessories_processing_list.append(entry_dict)
        entry_dict: dict = {0: self.selected_accessories_29, 1: self.label_accessories_29_cost, 2: self.label_accessories_29_weight, 3: self.var_accessories_29_qty, 4: self.label_hidden_accessories_hc_29}
        self.accessories_processing_list.append(entry_dict)
        entry_dict: dict = {0: self.selected_accessories_30, 1: self.label_accessories_30_cost, 2: self.label_accessories_30_weight, 3: self.var_accessories_30_qty, 4: self.label_hidden_accessories_hc_30}
        self.accessories_processing_list.append(entry_dict)

    def accessories_special_processing(self):
        """ Examine each Accessories line for any special processing.
            Examples include:
            1) Ramplate value is based off of allocated front armor
            2) HD SHocks/HD Brakes cost is based on number of tires
            3) Active Suspension raises HC
            4) Front WheelGuards lowers HC
            5) Spoiler/Airdram raises HC if there's two of them"""
        local_armor_cost:         float = float(self.label_hidden_body_armor_cost.cget("text"))
        local_armor_weight:       float = float(self.label_hidden_body_armor_weight.cget("text"))
        local_outer_armor_cost:   float = float(self.label_hidden_outer_armor_cost.cget("text"))
        local_outer_armor_weight: float = float(self.label_hidden_outer_armor_weight.cget("text"))
        local_inner_armor_cost:   float = float(self.label_hidden_inner_armor_cost.cget("text"))
        local_inner_armor_weight: float = float(self.label_hidden_inner_armor_weight.cget("text"))
        local_outer_front_armor:    int = int(self.var_outer_front_armor_allocation_qty.get())
        local_inner_front_armor:    int = int(self.var_inner_front_armor_allocation_qty.get())

        total_tire_qty: int = self.var_front_tire_qty.get()
        total_tire_qty = total_tire_qty + self.var_rear_tire_qty.get()
        outer_armor_selection: str = self.label_hidden_outer_armor_selection.cget("text")
        inner_armor_selection: str = self.label_hidden_inner_armor_selection.cget("text")

        for entry in self.accessories_processing_list:
            selected_value = entry[0]
            selected_cost_label = entry[1]
            selected_weight_label = entry[2]
            selected_qty = entry[3]
            selected_hidden_hc = entry[4]
            name: str = selected_value.get()
            qty: int = selected_qty.get()
            if qty > 0: #don't bother looking at this if the qty is zero, just move on
                match name:
                    #HC adjustment
                    case "Active Suspension":
                        selected_hidden_hc.configure(text="1")
                        self.hc_addition()
                    case "Wheelguards, Front - Plastic":
                        local_armor_cost_factor: float = 0.0
                        local_armor_weight_factor: float = 0.0
                        if outer_armor_selection.find("Plastic") > -1:
                            local_armor_cost_factor = local_outer_armor_cost
                            local_armor_weight_factor = local_outer_armor_weight
                        elif inner_armor_selection.find("Plastic") > -1:
                            local_armor_cost_factor = local_inner_armor_cost
                            local_armor_weight_factor = local_inner_armor_weight
                        item_cost: float = local_armor_cost_factor * 10.0 * qty
                        item_weight: float = local_armor_weight_factor * 4.0 * qty
                        selected_cost_label.configure(text=self.float_to_str(item_cost))
                        selected_weight_label.configure(text=self.float_to_str(item_weight))
                        selected_hidden_hc.configure(text="-1")
                        self.hc_addition()
                    case "Wheelguards, Front - MET":
                        local_armor_cost_factor: float = 0.0
                        local_armor_weight_factor: float = 0.0
                        if outer_armor_selection.find("MET") > -1:
                            local_armor_cost_factor = local_outer_armor_cost
                            local_armor_weight_factor = local_outer_armor_weight
                        elif inner_armor_selection.find("MET") > -1:
                            local_armor_cost_factor = local_inner_armor_cost
                            local_armor_weight_factor = local_inner_armor_weight
                        item_cost: float = local_armor_cost_factor * 10.0 * qty
                        item_weight: float = local_armor_weight_factor * 4.0 * qty
                        selected_cost_label.configure(text=self.float_to_str(item_cost))
                        selected_weight_label.configure(text=self.float_to_str(item_weight))
                        selected_hidden_hc.configure(text="-1")
                        self.hc_addition()
                    case "Wheelguards, Rear - Plastic" | "Wheelhubs":
                        local_armor_cost_factor: float = 0.0
                        local_armor_weight_factor: float = 0.0
                        if outer_armor_selection.find("Plastic") > -1:
                            local_armor_cost_factor = local_outer_armor_cost
                            local_armor_weight_factor = local_outer_armor_weight
                        elif inner_armor_selection.find("Plastic") > -1:
                            local_armor_cost_factor = local_inner_armor_cost
                            local_armor_weight_factor = local_inner_armor_weight
                        item_cost: float = local_armor_cost_factor * 10.0 * qty
                        item_weight: float = local_armor_weight_factor * 4.0 * qty
                        selected_cost_label.configure(text=self.float_to_str(item_cost))
                        selected_weight_label.configure(text=self.float_to_str(item_weight))
                    case "Wheelguards, Rear - Metal":
                        local_armor_cost_factor: float = 0.0
                        local_armor_weight_factor: float = 0.0
                        if outer_armor_selection.find("MET") > -1:
                            local_armor_cost_factor = local_outer_armor_cost
                            local_armor_weight_factor = local_outer_armor_weight
                        elif inner_armor_selection.find("MET") > -1:
                            local_armor_cost_factor = local_inner_armor_cost
                            local_armor_weight_factor = local_inner_armor_weight
                        item_cost: float = local_armor_cost_factor * 10.0 * qty
                        item_weight: float = local_armor_weight_factor * 4.0 * qty
                        selected_cost_label.configure(text=self.float_to_str(item_cost))
                        selected_weight_label.configure(text=self.float_to_str(item_weight))
                    case "Wheelhubsguards, Rear - Plastic" | "Wheelhubs - Plastic":
                        local_armor_cost_factor: float = 0.0
                        local_armor_weight_factor: float = 0.0
                        if outer_armor_selection.find("Plastic") > -1:
                            local_armor_cost_factor = local_outer_armor_cost
                            local_armor_weight_factor = local_outer_armor_weight
                        elif inner_armor_selection.find("Plastic") > -1:
                            local_armor_cost_factor = local_inner_armor_cost
                            local_armor_weight_factor = local_inner_armor_weight
                        item_cost: float = local_armor_cost_factor * 10.0 * qty
                        item_weight: float = local_armor_weight_factor * 4.0 * qty
                        selected_cost_label.configure(text=self.float_to_str(item_cost))
                        selected_weight_label.configure(text=self.float_to_str(item_weight))
                    case "Wheelguards, Rear - Metal" | "Wheelhubs - Metal":
                        local_armor_cost_factor: float = 0.0
                        local_armor_weight_factor: float = 0.0
                        if outer_armor_selection.find("MET") > -1:
                            local_armor_cost_factor = local_outer_armor_cost
                            local_armor_weight_factor = local_outer_armor_weight
                        elif inner_armor_selection.find("MET") > -1:
                            local_armor_cost_factor = local_inner_armor_cost
                            local_armor_weight_factor = local_inner_armor_weight
                        item_cost: float = local_armor_cost_factor * 10.0 * qty
                        item_weight: float = local_armor_weight_factor * 4.0 * qty
                        selected_cost_label.configure(text=self.float_to_str(item_cost))
                        selected_weight_label.configure(text=self.float_to_str(item_weight))
                    #Cost/Weight adjusted by tire count
                    case "Heavy-duty Brakes":
                        selected_cost_label.configure(text=str(total_tire_qty * 100))
                    case "Heavy-duty Shock Absorbers":
                        selected_cost_label.configure(text=str(total_tire_qty * 400))
                        selected_weight_label.configure(text=str(total_tire_qty * 5))
                    case "High Torque Motors (HTM)":
                        selected_cost_label.configure(text=str(total_tire_qty * 100))
                    case "High Torque Motors, Heavy Duty (HDHTM)":
                        selected_cost_label.configure(text=str(total_tire_qty * 200))
                    case "Overdrive":
                        selected_cost_label.configure(text=str(total_tire_qty * 100))
                    #Cost/weight adjusted by front armor count
                    case "Ramplate":
                        #cost = front armor cost * 1.5
                        #weight = front armor weight * .5
                        total_ramplate_cost: float = float(1.5 * (local_armor_cost * local_outer_armor_cost * local_outer_front_armor + local_armor_cost * local_inner_armor_cost * local_inner_front_armor))
                        total_ramplate_weight: float = float(0.5 * (local_armor_weight * local_outer_armor_weight * local_outer_front_armor + local_armor_weight * local_inner_armor_weight * local_inner_front_armor))
                        selected_cost_label.configure(text=self.float_to_str(total_ramplate_cost))
                        selected_weight_label.configure(text=self.float_to_str(total_ramplate_weight))
                    case "Spoilers and Airdams, plastic":
                        local_armor_cost_factor: float = 0.0
                        local_armor_weight_factor: float = 0.0
                        if outer_armor_selection.find("Plastic") > -1:
                            local_armor_cost_factor = local_outer_armor_cost
                            local_armor_weight_factor = local_outer_armor_weight
                        elif inner_armor_selection.find("Plastic") > -1:
                            local_armor_cost_factor = local_inner_armor_cost
                            local_armor_weight_factor = local_inner_armor_weight
                        item_cost: float = local_armor_cost * local_armor_cost_factor * 25.0 * qty
                        item_weight: float = local_armor_weight * local_armor_weight_factor * 10.0 * qty
                        selected_cost_label.configure(text=self.float_to_str(item_cost))
                        selected_weight_label.configure(text=self.float_to_str(item_weight))
                    case "Spoilers and Airdams, Metal Airfoil":
                        local_armor_cost_factor: float = 0.0
                        local_armor_weight_factor: float = 0.0
                        if outer_armor_selection.find("MET") > -1:
                            local_armor_cost_factor = local_outer_armor_cost
                            local_armor_weight_factor = local_outer_armor_weight
                        elif inner_armor_selection.find("MET") > -1:
                            local_armor_cost_factor = local_inner_armor_cost
                            local_armor_weight_factor = local_inner_armor_weight
                        item_cost: float = local_armor_cost * local_armor_cost_factor * 10.0 * qty
                        item_weight: float = local_armor_weight * local_armor_weight_factor * 2.0 * qty
                        selected_cost_label.configure(text=self.float_to_str(item_cost))
                        selected_weight_label.configure(text=self.float_to_str(item_weight))

    ######################################################################
    # Component Armor Common processing here                             #
    ######################################################################

    def add_dropdown_component_armor_canvas(self, canvas_type):
        self.add_dropdown_component_armor_canvas_1(canvas_type)
        self.add_dropdown_component_armor_canvas_2(canvas_type)
        self.add_dropdown_component_armor_canvas_3(canvas_type)
        self.add_dropdown_component_armor_canvas_4(canvas_type)
        self.add_dropdown_component_armor_canvas_5(canvas_type)
        self.add_dropdown_component_armor_facing_1_canvas(canvas_type)
        self.add_dropdown_component_armor_facing_2_canvas(canvas_type)
        self.add_dropdown_component_armor_facing_3_canvas(canvas_type)
        self.add_dropdown_component_armor_facing_4_canvas(canvas_type)
        self.add_dropdown_component_armor_facing_5_canvas(canvas_type)

    def get_component_armor_dictionaries(self):
        self.component_armor_list = []
        entry_dict: dict = {"Component Armor": "Component Armor",                "Cost": "0",    "Weight": "0",   "Abbr": "None"}
        self.component_armor_list.append(entry_dict)
        entry_dict: dict = {"Component Armor": "Normal Plastic Component Armor", "Cost": "1",    "Weight": "1",   "Abbr": "Normal"}
        self.component_armor_list.append(entry_dict)
        entry_dict: dict = {"Component Armor": "FP Plastic Component Armor",     "Cost": "2",    "Weight": "1",   "Abbr": "FP"}
        self.component_armor_list.append(entry_dict)
        entry_dict: dict = {"Component Armor": "LR Plastic Component Armor",     "Cost": "1.1",  "Weight": "1.1", "Abbr": "LR"}
        self.component_armor_list.append(entry_dict)
        entry_dict: dict = {"Component Armor": "LRFP Plastic Component Armor",   "Cost": "2.5",  "Weight": "1.1", "Abbr": "LRFP"}
        self.component_armor_list.append(entry_dict)
        entry_dict: dict = {"Component Armor": "RP Plastic Component Armor",     "Cost": "2",    "Weight": "1",   "Abbr": "RP"}
        self.component_armor_list.append(entry_dict)
        entry_dict: dict = {"Component Armor": "RPFP Plastic Component Armor",   "Cost": "4",    "Weight": "1",   "Abbr": "RPFP"}
        self.component_armor_list.append(entry_dict)
        entry_dict: dict = {"Component Armor": "MET Component Armor",            "Cost": "2.5",  "Weight": "5",   "Abbr": "MET"}
        self.component_armor_list.append(entry_dict)
        entry_dict: dict = {"Component Armor": "LR MET Component Armor",         "Cost": "2.75", "Weight": "5",   "Abbr": "LR MET"}
        self.component_armor_list.append(entry_dict)

    def get_component_armor_options(self):
        options: list = []
        for entry in self.component_armor_list:
            component_armor_name: str = entry.get("Component Armor")
            options.append(component_armor_name)
        return options

    def add_component_armor_rows(self, canvas_type):
        self.add_labels_buttons_component_armor_row_1(canvas_type)
        self.add_labels_buttons_component_armor_row_2(canvas_type)
        self.add_labels_buttons_component_armor_row_3(canvas_type)
        self.add_labels_buttons_component_armor_row_4(canvas_type)
        self.add_labels_buttons_component_armor_row_5(canvas_type)

    def get_component_armor_facing_dictionaries(self):
        self.component_armor_facing_list = []
        entry_dict: dict = {"Facing": "Facing"}
        self.component_armor_facing_list.append(entry_dict)
        entry_dict: dict = {"Facing": "Front"}
        self.component_armor_facing_list.append(entry_dict)
        entry_dict: dict = {"Facing": "Back"}
        self.component_armor_facing_list.append(entry_dict)
        entry_dict: dict = {"Facing": "Left"}
        self.component_armor_facing_list.append(entry_dict)
        entry_dict: dict = {"Facing": "Right"}
        self.component_armor_facing_list.append(entry_dict)
        entry_dict: dict = {"Facing": "Top"}
        self.component_armor_facing_list.append(entry_dict)
        entry_dict: dict = {"Facing": "Underbody"}
        self.component_armor_facing_list.append(entry_dict)
        entry_dict: dict = {"Facing": "Driver"}
        self.component_armor_facing_list.append(entry_dict)
        entry_dict: dict = {"Facing": "Gunner"}
        self.component_armor_facing_list.append(entry_dict)
        entry_dict: dict = {"Facing": "Driver & Gunner"}
        self.component_armor_facing_list.append(entry_dict)
        entry_dict: dict = {"Facing": "Power Plant"}
        self.component_armor_facing_list.append(entry_dict)
        entry_dict: dict = {"Facing": "Gas Tank"}
        self.component_armor_facing_list.append(entry_dict)

    ######################################################################
    # Component Armor Row 1 processing here                              #
    ######################################################################

    def add_dropdown_component_armor_canvas_1(self, canvas_type):
        self.get_component_armor_dictionaries()
        self.selected_component_armor_1 = tk.StringVar()
        self.selected_component_armor_1.set("Component Armor")
        options = self.get_component_armor_options()
        # Create the dropdown widget
        self.component_armor_dropdown_1 = ttk.OptionMenu(canvas_type, self.selected_component_armor_1, "Component Armor",*options) #filled elsewhere
        self.component_armor_dropdown_1.grid(column=self.grid_col_item, row=self.grid_row_component_armor_1, sticky="w")
        self.selected_component_armor_1.trace_add("write", self.on_select_component_armor_1)

    def add_labels_buttons_component_armor_row_1(self, canvas_type):
        up_arrow = "\u2191"
        down_arrow = "\u2193"

        self.label_hidden_component_armor_1_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_component_armor_1_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_component_armor_1_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_component_armor_1_space = tk.Label(canvas_type, text="0", anchor="w")

        self.label_component_armor_1_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_component_armor_1_cost.grid(column=self.grid_col_cost,row=self.grid_row_component_armor_1, sticky="w")
        self.label_component_armor_1_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_component_armor_1_weight.grid(column=self.grid_col_weight ,row=self.grid_row_component_armor_1, sticky="w")
        self.label_component_armor_1_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_component_armor_1_space.grid(column=self.grid_col_spaces,row=self.grid_row_component_armor_1, sticky="w")
        self.label_component_armor_1_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_component_armor_1_dp.grid(column=self.grid_col_dp,row=self.grid_row_component_armor_1, sticky="w")

        self.var_component_armor_spaces_qty_1 = tk.IntVar()
        self.entry_component_armor_spaces_qty = ttk.Entry(canvas_type, textvariable=self.var_component_armor_spaces_qty_1, width=3)
        self.entry_component_armor_spaces_qty.grid(column=self.grid_col_qty,row=self.grid_row_component_armor_1, sticky="w")
        self.var_component_armor_spaces_qty_1.trace_add("write", self.on_changed_component_armor_spaces_1)

        self.button_component_armor_spaces_1_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_component_armor_spaces_1_qty_up)
        self.button_component_armor_spaces_1_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_component_armor_1, sticky="w")
        self.button_component_armor_spaces_1_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_component_armor_spaces_1_qty_down)
        self.button_component_armor_spaces_1_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_component_armor_1, sticky="w")

        self.var_component_armor_count_qty_1 = tk.IntVar()
        self.entry_component_armor_count_qty = ttk.Entry(canvas_type, textvariable=self.var_component_armor_count_qty_1, width=3)
        self.entry_component_armor_count_qty.grid(column=self.grid_right_qty,row=self.grid_row_component_armor_1, sticky="w")
        self.var_component_armor_count_qty_1.trace_add("write", self.on_changed_component_armor_count_1)

        self.button_component_armor_count_1_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_component_armor_count_1_qty_up)
        self.button_component_armor_count_1_qty_up.grid(column=self.grid_right_up_button,row=self.grid_row_component_armor_1, sticky="w")
        self.button_component_armor_count_1_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_component_armor_count_1_qty_down)
        self.button_component_armor_count_1_qty_down.grid(column=self.grid_right_down_button,row=self.grid_row_component_armor_1, sticky="w")

    def on_select_component_armor_1(self, *args):
        selected_value = self.selected_component_armor_1.get()
        for entry in self.component_armor_list:
            armor_type: str = entry.get("Component Armor")
            if selected_value == armor_type:
                component_armor_adjustment_cost = float(entry.get("Cost"))
                component_armor_adjustment_weight = float(entry.get("Weight"))
                component_armor_cost: float = 5.0
                component_armor_weight:  float = 2.0
                component_armor_spaces_qty = self.var_component_armor_spaces_qty_1.get()
                component_armor_count_qty = self.var_component_armor_count_qty_1.get()

                calculated_armor_cost = component_armor_adjustment_cost * component_armor_cost * component_armor_spaces_qty * component_armor_count_qty
                calculated_armor_weight = component_armor_adjustment_weight * component_armor_weight * component_armor_spaces_qty * component_armor_count_qty

                #calculate that the weight of the armor choice doesn't exceed 20 lbs per space
                if component_armor_weight * component_armor_count_qty * component_armor_adjustment_weight > 20.0:
                    if component_armor_adjustment_weight > 0.0:
                        component_armor_count_qty = min(10, int(10.0/component_armor_adjustment_weight))
                        self.var_component_armor_count_qty_1.set(component_armor_count_qty)


                self.label_hidden_component_armor_1_cost.configure(text=str(component_armor_adjustment_cost*component_armor_cost))
                self.label_hidden_component_armor_1_weight.configure(text=str(component_armor_adjustment_weight*component_armor_weight))
                self.label_hidden_component_armor_1_dp.configure(text=str(component_armor_count_qty))
                self.label_hidden_component_armor_1_space.configure(text=str(1))

                self.label_component_armor_1_cost.configure(text=str(calculated_armor_cost))
                self.label_component_armor_1_weight.configure(text=str(calculated_armor_weight))
                self.label_component_armor_1_space.configure(text=str(1))
                self.label_component_armor_1_dp.configure(text="1")
                self.calculate_component_armor_1(self.canvas_type)
                self.recalculate()

    def on_changed_component_armor_spaces_1(self, *args):
        self.calculate_component_armor_1(self.canvas_type)

    def calculate_component_armor_1(self, canvas_type):
        component_armor_space_qty = self.var_component_armor_spaces_qty_1.get()
        component_armor_count_qty = self.var_component_armor_count_qty_1.get()
        component_armor_cost_adjustment: float = float(self.label_hidden_component_armor_1_cost.cget("text"))
        component_armor_weight_adjustment: float = float(self.label_hidden_component_armor_1_weight.cget("text"))

        if component_armor_space_qty > 0 and component_armor_count_qty > 0:
            component_armor_1_cost:   float = 0.0
            component_armor_1_weight: float = 0.0
            component_armor_1_dp = component_armor_count_qty
            if self.is_cycle:
                component_armor_1_spaces = 0.5
            else:
                component_armor_1_spaces = 1
            component_armor_1_cost =  component_armor_space_qty * component_armor_count_qty * component_armor_cost_adjustment
            component_armor_1_weight =  component_armor_space_qty * component_armor_count_qty * component_armor_weight_adjustment
        else:
            component_armor_1_cost = 0
            component_armor_1_weight = 0
            component_armor_1_dp = 0
            component_armor_1_spaces = 0
        self.label_component_armor_1_cost.configure(text=self.float_to_str(component_armor_1_cost))
        self.label_component_armor_1_weight.configure(text=self.float_to_str(component_armor_1_weight))
        self.label_component_armor_1_dp.configure(text=str(component_armor_1_dp))
        self.label_component_armor_1_space.configure(text=str(component_armor_1_spaces))
        self.recalculate()

    def on_button_component_armor_spaces_1_qty_up(self, *args):
        component_armor_space_qty = self.var_component_armor_spaces_qty_1.get()
        component_armor_space_qty = component_armor_space_qty + 1
        component_armor_space_qty = min(component_armor_space_qty, 10)
        self.var_component_armor_spaces_qty_1.set(component_armor_space_qty)
        self.calculate_component_armor_1(self.canvas_type)

    def on_button_component_armor_spaces_1_qty_down(self, *args):
        component_armor_space_qty = self.var_component_armor_spaces_qty_1.get()
        component_armor_space_qty = component_armor_space_qty - 1
        component_armor_space_qty = max(component_armor_space_qty, 0)
        self.var_component_armor_spaces_qty_1.set(component_armor_space_qty)
        self.calculate_component_armor_1(self.canvas_type)

    def on_changed_component_armor_count_1(self, *args):
        self.calculate_component_armor_1(self.canvas_type)

    def on_button_component_armor_count_1_qty_up(self, *args):
        component_armor_count_qty = self.var_component_armor_count_qty_1.get()
        component_armor_count_qty = component_armor_count_qty + 1
        component_armor_weight_adjustment: float = float(self.label_hidden_component_armor_1_weight.cget("text"))
        #calculate that the weight of the armor choice doesn't exceed 20 lbs per space
        if component_armor_count_qty * component_armor_weight_adjustment > 20.0:
            component_armor_count_qty = component_armor_count_qty - 1
        self.var_component_armor_count_qty_1.set(component_armor_count_qty)
        self.calculate_component_armor_1(self.canvas_type)

    def on_button_component_armor_count_1_qty_down(self, *args):
        component_armor_count_qty = self.var_component_armor_count_qty_1.get()
        component_armor_count_qty = component_armor_count_qty - 1
        component_armor_count_qty = max(component_armor_count_qty, 0)
        self.var_component_armor_count_qty_1.set(component_armor_count_qty)
        self.calculate_component_armor_1(self.canvas_type)

    def add_dropdown_component_armor_facing_1_canvas(self, canvas_type):
        self.selected_component_armor_facing_1 = tk.StringVar()
        self.selected_component_armor_facing_1.set("Component Armor")
        options = ["Facing", "Front", "Back", "Left", "Right", "Top", "Underbody", "Driver", "Gunner", "Driver & Gunner", "Power Plant", "Gas Tank"]
        # Create the dropdown widget
        self.component_armor_facing_dropdown_1 = ttk.OptionMenu(canvas_type, self.selected_component_armor_facing_1, "Facing", *options) #filled elsewhere
        self.component_armor_facing_dropdown_1.grid(column=self.grid_col_max_weight, row=self.grid_row_component_armor_1, sticky="w")

    ######################################################################
    # Component Armor Row 2 processing here                              #
    ######################################################################

    def add_dropdown_component_armor_canvas_2(self, canvas_type):
        self.get_component_armor_dictionaries()
        self.selected_component_armor_2 = tk.StringVar()
        self.selected_component_armor_2.set("Component Armor")
        options = self.get_component_armor_options()
        # Create the dropdown widget
        self.component_armor_dropdown_2 = ttk.OptionMenu(canvas_type, self.selected_component_armor_2, "Component Armor", *options) #filled elsewhere
        self.component_armor_dropdown_2.grid(column=self.grid_col_item, row=self.grid_row_component_armor_2, sticky="w")
        self.selected_component_armor_2.trace_add("write", self.on_select_component_armor_2)

    def add_labels_buttons_component_armor_row_2(self, canvas_type):
        up_arrow = "\u2191"
        down_arrow = "\u2193"

        self.label_hidden_component_armor_2_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_component_armor_2_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_component_armor_2_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_component_armor_2_space = tk.Label(canvas_type, text="0", anchor="w")

        self.label_component_armor_2_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_component_armor_2_cost.grid(column=self.grid_col_cost,row=self.grid_row_component_armor_2, sticky="w")
        self.label_component_armor_2_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_component_armor_2_weight.grid(column=self.grid_col_weight ,row=self.grid_row_component_armor_2, sticky="w")
        self.label_component_armor_2_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_component_armor_2_space.grid(column=self.grid_col_spaces,row=self.grid_row_component_armor_2, sticky="w")
        self.label_component_armor_2_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_component_armor_2_dp.grid(column=self.grid_col_dp,row=self.grid_row_component_armor_2, sticky="w")

        self.var_component_armor_spaces_qty_2 = tk.IntVar()
        self.entry_component_armor_spaces_qty = ttk.Entry(canvas_type, textvariable=self.var_component_armor_spaces_qty_2, width=3)
        self.entry_component_armor_spaces_qty.grid(column=self.grid_col_qty,row=self.grid_row_component_armor_2, sticky="w")
        self.var_component_armor_spaces_qty_2.trace_add("write", self.on_changed_component_armor_spaces_2)

        self.button_component_armor_spaces_2_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_component_armor_spaces_2_qty_up)
        self.button_component_armor_spaces_2_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_component_armor_2, sticky="w")
        self.button_component_armor_spaces_2_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_component_armor_spaces_2_qty_down)
        self.button_component_armor_spaces_2_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_component_armor_2, sticky="w")

        self.var_component_armor_count_qty_2 = tk.IntVar()
        self.entry_component_armor_count_qty = ttk.Entry(canvas_type, textvariable=self.var_component_armor_count_qty_2, width=3)
        self.entry_component_armor_count_qty.grid(column=self.grid_right_qty,row=self.grid_row_component_armor_2, sticky="w")
        self.var_component_armor_count_qty_2.trace_add("write", self.on_changed_component_armor_count_2)

        self.button_component_armor_count_2_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_component_armor_count_2_qty_up)
        self.button_component_armor_count_2_qty_up.grid(column=self.grid_right_up_button,row=self.grid_row_component_armor_2, sticky="w")
        self.button_component_armor_count_2_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_component_armor_count_2_qty_down)
        self.button_component_armor_count_2_qty_down.grid(column=self.grid_right_down_button,row=self.grid_row_component_armor_2, sticky="w")

    def on_select_component_armor_2(self, *args):
        selected_value = self.selected_component_armor_2.get()
        for entry in self.component_armor_list:
            armor_type: str = entry.get("Component Armor")
            if selected_value == armor_type:
                component_armor_adjustment_cost = float(entry.get("Cost"))
                component_armor_adjustment_weight = float(entry.get("Weight"))
                component_armor_cost: float = 5.0
                component_armor_weight:  float = 2.0
                component_armor_spaces_qty = self.var_component_armor_spaces_qty_2.get()
                component_armor_count_qty = self.var_component_armor_count_qty_2.get()

                calculated_armor_cost = component_armor_adjustment_cost * component_armor_cost * component_armor_spaces_qty * component_armor_count_qty
                calculated_armor_weight = component_armor_adjustment_weight * component_armor_weight * component_armor_spaces_qty * component_armor_count_qty

                #calculate that the weight of the armor choice doesn't exceed 20 lbs per space
                if component_armor_weight * component_armor_count_qty * component_armor_adjustment_weight > 20.0:
                    if component_armor_adjustment_weight > 0.0:
                        component_armor_count_qty = min(10, int(10.0/component_armor_adjustment_weight))
                        self.var_component_armor_count_qty_2.set(component_armor_count_qty)


                self.label_hidden_component_armor_2_cost.configure(text=str(component_armor_adjustment_cost*component_armor_cost))
                self.label_hidden_component_armor_2_weight.configure(text=str(component_armor_adjustment_weight*component_armor_weight))
                self.label_hidden_component_armor_2_dp.configure(text=str(component_armor_count_qty))
                self.label_hidden_component_armor_2_space.configure(text=str(1))

                self.label_component_armor_2_cost.configure(text=str(calculated_armor_cost))
                self.label_component_armor_2_weight.configure(text=str(calculated_armor_weight))
                self.label_component_armor_2_space.configure(text=str(1))
                self.label_component_armor_2_dp.configure(text="1")
                self.calculate_component_armor_2(self.canvas_type)
                self.recalculate()

    def on_changed_component_armor_spaces_2(self, *args):
        self.calculate_component_armor_2(self.canvas_type)

    def calculate_component_armor_2(self, canvas_type):
        component_armor_space_qty = self.var_component_armor_spaces_qty_2.get()
        component_armor_count_qty = self.var_component_armor_count_qty_2.get()
        component_armor_cost_adjustment: float = float(self.label_hidden_component_armor_2_cost.cget("text"))
        component_armor_weight_adjustment: float = float(self.label_hidden_component_armor_2_weight.cget("text"))

        if component_armor_space_qty > 0 and component_armor_count_qty > 0:
            component_armor_2_cost:   float = 0.0
            component_armor_2_weight: float = 0.0
            component_armor_2_dp = component_armor_count_qty
            if self.is_cycle:
                component_armor_2_spaces = 0.5
            else:
                component_armor_2_spaces = 1
            component_armor_2_cost =  component_armor_space_qty * component_armor_count_qty * component_armor_cost_adjustment
            component_armor_2_weight =  component_armor_space_qty * component_armor_count_qty * component_armor_weight_adjustment
        else:
            component_armor_2_cost = 0
            component_armor_2_weight = 0
            component_armor_2_dp = 0
            component_armor_2_spaces = 0
        self.label_component_armor_2_cost.configure(text=self.float_to_str(component_armor_2_cost))
        self.label_component_armor_2_weight.configure(text=self.float_to_str(component_armor_2_weight))
        self.label_component_armor_2_dp.configure(text=str(component_armor_2_dp))
        self.label_component_armor_2_space.configure(text=str(component_armor_2_spaces))
        self.recalculate()

    def on_button_component_armor_spaces_2_qty_up(self, *args):
        component_armor_space_qty = self.var_component_armor_spaces_qty_2.get()
        component_armor_space_qty = component_armor_space_qty + 1
        component_armor_space_qty = min(component_armor_space_qty, 10)
        self.var_component_armor_spaces_qty_2.set(component_armor_space_qty)
        self.calculate_component_armor_2(self.canvas_type)

    def on_button_component_armor_spaces_2_qty_down(self, *args):
        component_armor_space_qty = self.var_component_armor_spaces_qty_2.get()
        component_armor_space_qty = component_armor_space_qty - 1
        component_armor_space_qty = max(component_armor_space_qty, 0)
        self.var_component_armor_spaces_qty_2.set(component_armor_space_qty)
        self.calculate_component_armor_2(self.canvas_type)

    def on_changed_component_armor_count_2(self, *args):
        self.calculate_component_armor_2(self.canvas_type)

    def on_button_component_armor_count_2_qty_up(self, *args):
        component_armor_count_qty = self.var_component_armor_count_qty_2.get()
        component_armor_count_qty = component_armor_count_qty + 1
        component_armor_weight_adjustment: float = float(self.label_hidden_component_armor_2_weight.cget("text"))
        #calculate that the weight of the armor choice doesn't exceed 20 lbs per space
        if component_armor_count_qty * component_armor_weight_adjustment > 20.0:
            component_armor_count_qty = component_armor_count_qty - 1
        self.var_component_armor_count_qty_2.set(component_armor_count_qty)
        self.calculate_component_armor_2(self.canvas_type)

    def on_button_component_armor_count_2_qty_down(self, *args):
        component_armor_count_qty = self.var_component_armor_count_qty_2.get()
        component_armor_count_qty = component_armor_count_qty - 1
        component_armor_count_qty = max(component_armor_count_qty, 0)
        self.var_component_armor_count_qty_2.set(component_armor_count_qty)
        self.calculate_component_armor_2(self.canvas_type)

    def add_dropdown_component_armor_facing_2_canvas(self, canvas_type):
        self.selected_component_armor_facing_2 = tk.StringVar()
        self.selected_component_armor_facing_2.set("Component Armor")
        options = ["Facing", "Front", "Back", "Left", "Right", "Top", "Underbody", "Driver", "Gunner", "Driver & Gunner", "Power Plant", "Gas Tank"]
        # Create the dropdown widget
        self.component_armor_facing_dropdown_2 = ttk.OptionMenu(canvas_type, self.selected_component_armor_facing_2, "Facing", *options) #filled elsewhere
        self.component_armor_facing_dropdown_2.grid(column=self.grid_col_max_weight, row=self.grid_row_component_armor_2, sticky="w")

    ######################################################################
    # Component Armor Row 3 processing here                              #
    ######################################################################

    def add_dropdown_component_armor_canvas_3(self, canvas_type):
        self.get_component_armor_dictionaries()
        self.selected_component_armor_3 = tk.StringVar()
        self.selected_component_armor_3.set("Component Armor")
        options = self.get_component_armor_options()
        # Create the dropdown widget
        self.component_armor_dropdown_3 = ttk.OptionMenu(canvas_type, self.selected_component_armor_3, "Component Armor", *options) #filled elsewhere
        self.component_armor_dropdown_3.grid(column=self.grid_col_item, row=self.grid_row_component_armor_3, sticky="w")
        self.selected_component_armor_3.trace_add("write", self.on_select_component_armor_3)

    def add_labels_buttons_component_armor_row_3(self, canvas_type):
        up_arrow = "\u2191"
        down_arrow = "\u2193"

        self.label_hidden_component_armor_3_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_component_armor_3_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_component_armor_3_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_component_armor_3_space = tk.Label(canvas_type, text="0", anchor="w")

        self.label_component_armor_3_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_component_armor_3_cost.grid(column=self.grid_col_cost,row=self.grid_row_component_armor_3, sticky="w")
        self.label_component_armor_3_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_component_armor_3_weight.grid(column=self.grid_col_weight ,row=self.grid_row_component_armor_3, sticky="w")
        self.label_component_armor_3_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_component_armor_3_space.grid(column=self.grid_col_spaces,row=self.grid_row_component_armor_3, sticky="w")
        self.label_component_armor_3_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_component_armor_3_dp.grid(column=self.grid_col_dp,row=self.grid_row_component_armor_3, sticky="w")

        self.var_component_armor_spaces_qty_3 = tk.IntVar()
        self.entry_component_armor_spaces_qty = ttk.Entry(canvas_type, textvariable=self.var_component_armor_spaces_qty_3, width=3)
        self.entry_component_armor_spaces_qty.grid(column=self.grid_col_qty,row=self.grid_row_component_armor_3, sticky="w")
        self.var_component_armor_spaces_qty_3.trace_add("write", self.on_changed_component_armor_spaces_3)

        self.button_component_armor_spaces_3_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_component_armor_spaces_3_qty_up)
        self.button_component_armor_spaces_3_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_component_armor_3, sticky="w")
        self.button_component_armor_spaces_3_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_component_armor_spaces_3_qty_down)
        self.button_component_armor_spaces_3_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_component_armor_3, sticky="w")

        self.var_component_armor_count_qty_3 = tk.IntVar()
        self.entry_component_armor_count_qty = ttk.Entry(canvas_type, textvariable=self.var_component_armor_count_qty_3, width=3)
        self.entry_component_armor_count_qty.grid(column=self.grid_right_qty,row=self.grid_row_component_armor_3, sticky="w")
        self.var_component_armor_count_qty_3.trace_add("write", self.on_changed_component_armor_count_3)

        self.button_component_armor_count_3_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_component_armor_count_3_qty_up)
        self.button_component_armor_count_3_qty_up.grid(column=self.grid_right_up_button,row=self.grid_row_component_armor_3, sticky="w")
        self.button_component_armor_count_3_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_component_armor_count_3_qty_down)
        self.button_component_armor_count_3_qty_down.grid(column=self.grid_right_down_button,row=self.grid_row_component_armor_3, sticky="w")

    def on_select_component_armor_3(self, *args):
        selected_value = self.selected_component_armor_3.get()
        for entry in self.component_armor_list:
            armor_type: str = entry.get("Component Armor")
            if selected_value == armor_type:
                component_armor_adjustment_cost = float(entry.get("Cost"))
                component_armor_adjustment_weight = float(entry.get("Weight"))
                component_armor_cost: float = 5.0
                component_armor_weight:  float = 2.0
                component_armor_spaces_qty = self.var_component_armor_spaces_qty_3.get()
                component_armor_count_qty = self.var_component_armor_count_qty_3.get()

                calculated_armor_cost = component_armor_adjustment_cost * component_armor_cost * component_armor_spaces_qty * component_armor_count_qty
                calculated_armor_weight = component_armor_adjustment_weight * component_armor_weight * component_armor_spaces_qty * component_armor_count_qty

                #calculate that the weight of the armor choice doesn't exceed 20 lbs per space
                if component_armor_weight * component_armor_count_qty * component_armor_adjustment_weight > 20.0:
                    if component_armor_adjustment_weight > 0.0:
                        component_armor_count_qty = min(10, int(10.0/component_armor_adjustment_weight))
                        self.var_component_armor_count_qty_3.set(component_armor_count_qty)


                self.label_hidden_component_armor_3_cost.configure(text=str(component_armor_adjustment_cost*component_armor_cost))
                self.label_hidden_component_armor_3_weight.configure(text=str(component_armor_adjustment_weight*component_armor_weight))
                self.label_hidden_component_armor_3_dp.configure(text=str(component_armor_count_qty))
                self.label_hidden_component_armor_3_space.configure(text=str(1))

                self.label_component_armor_3_cost.configure(text=str(calculated_armor_cost))
                self.label_component_armor_3_weight.configure(text=str(calculated_armor_weight))
                self.label_component_armor_3_space.configure(text=str(1))
                self.label_component_armor_3_dp.configure(text="1")
                self.calculate_component_armor_3(self.canvas_type)
                self.recalculate()

    def on_changed_component_armor_spaces_3(self, *args):
        self.calculate_component_armor_3(self.canvas_type)

    def calculate_component_armor_3(self, canvas_type):
        component_armor_space_qty = self.var_component_armor_spaces_qty_3.get()
        component_armor_count_qty = self.var_component_armor_count_qty_3.get()
        component_armor_cost_adjustment: float = float(self.label_hidden_component_armor_3_cost.cget("text"))
        component_armor_weight_adjustment: float = float(self.label_hidden_component_armor_3_weight.cget("text"))

        if component_armor_space_qty > 0 and component_armor_count_qty > 0:
            component_armor_3_cost:   float = 0.0
            component_armor_3_weight: float = 0.0
            component_armor_3_dp = component_armor_count_qty
            if self.is_cycle:
                component_armor_3_spaces = 0.5
            else:
                component_armor_3_spaces = 1
            component_armor_3_cost =  component_armor_space_qty * component_armor_count_qty * component_armor_cost_adjustment
            component_armor_3_weight =  component_armor_space_qty * component_armor_count_qty * component_armor_weight_adjustment
        else:
            component_armor_3_cost = 0
            component_armor_3_weight = 0
            component_armor_3_dp = 0
            component_armor_3_spaces = 0
        self.label_component_armor_3_cost.configure(text=self.float_to_str(component_armor_3_cost))
        self.label_component_armor_3_weight.configure(text=self.float_to_str(component_armor_3_weight))
        self.label_component_armor_3_dp.configure(text=str(component_armor_3_dp))
        self.label_component_armor_3_space.configure(text=str(component_armor_3_spaces))
        self.recalculate()

    def on_button_component_armor_spaces_3_qty_up(self, *args):
        component_armor_space_qty = self.var_component_armor_spaces_qty_3.get()
        component_armor_space_qty = component_armor_space_qty + 1
        component_armor_space_qty = min(component_armor_space_qty, 10)
        self.var_component_armor_spaces_qty_3.set(component_armor_space_qty)
        self.calculate_component_armor_3(self.canvas_type)

    def on_button_component_armor_spaces_3_qty_down(self, *args):
        component_armor_space_qty = self.var_component_armor_spaces_qty_3.get()
        component_armor_space_qty = component_armor_space_qty - 1
        component_armor_space_qty = max(component_armor_space_qty, 0)
        self.var_component_armor_spaces_qty_3.set(component_armor_space_qty)
        self.calculate_component_armor_3(self.canvas_type)

    def on_changed_component_armor_count_3(self, *args):
        self.calculate_component_armor_3(self.canvas_type)

    def on_button_component_armor_count_3_qty_up(self, *args):
        component_armor_count_qty = self.var_component_armor_count_qty_3.get()
        component_armor_count_qty = component_armor_count_qty + 1
        component_armor_weight_adjustment: float = float(self.label_hidden_component_armor_3_weight.cget("text"))
        #calculate that the weight of the armor choice doesn't exceed 20 lbs per space
        if component_armor_count_qty * component_armor_weight_adjustment > 20.0:
            component_armor_count_qty = component_armor_count_qty - 1
        self.var_component_armor_count_qty_3.set(component_armor_count_qty)
        self.calculate_component_armor_3(self.canvas_type)

    def on_button_component_armor_count_3_qty_down(self, *args):
        component_armor_count_qty = self.var_component_armor_count_qty_3.get()
        component_armor_count_qty = component_armor_count_qty - 1
        component_armor_count_qty = max(component_armor_count_qty, 0)
        self.var_component_armor_count_qty_3.set(component_armor_count_qty)
        self.calculate_component_armor_3(self.canvas_type)

    def add_dropdown_component_armor_facing_3_canvas(self, canvas_type):
        self.selected_component_armor_facing_3 = tk.StringVar()
        self.selected_component_armor_facing_3.set("Component Armor")
        options = ["Facing", "Front", "Back", "Left", "Right", "Top", "Underbody", "Driver", "Gunner", "Driver & Gunner", "Power Plant", "Gas Tank"]
        # Create the dropdown widget
        self.component_armor_facing_dropdown_3 = ttk.OptionMenu(canvas_type, self.selected_component_armor_facing_3, "Facing", *options) #filled elsewhere
        self.component_armor_facing_dropdown_3.grid(column=self.grid_col_max_weight, row=self.grid_row_component_armor_3, sticky="w")

    ######################################################################
    # Component Armor Row 4 processing here                              #
    ######################################################################

    def add_dropdown_component_armor_canvas_4(self, canvas_type):
        self.get_component_armor_dictionaries()
        self.selected_component_armor_4 = tk.StringVar()
        self.selected_component_armor_4.set("Component Armor")
        options = self.get_component_armor_options()
        # Create the dropdown widget
        self.component_armor_dropdown_4 = ttk.OptionMenu(canvas_type, self.selected_component_armor_4, "Component Armor", *options) #filled elsewhere
        self.component_armor_dropdown_4.grid(column=self.grid_col_item, row=self.grid_row_component_armor_4, sticky="w")
        self.selected_component_armor_4.trace_add("write", self.on_select_component_armor_4)

    def add_labels_buttons_component_armor_row_4(self, canvas_type):
        up_arrow = "\u2191"
        down_arrow = "\u2193"

        self.label_hidden_component_armor_4_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_component_armor_4_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_component_armor_4_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_component_armor_4_space = tk.Label(canvas_type, text="0", anchor="w")

        self.label_component_armor_4_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_component_armor_4_cost.grid(column=self.grid_col_cost,row=self.grid_row_component_armor_4, sticky="w")
        self.label_component_armor_4_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_component_armor_4_weight.grid(column=self.grid_col_weight ,row=self.grid_row_component_armor_4, sticky="w")
        self.label_component_armor_4_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_component_armor_4_space.grid(column=self.grid_col_spaces,row=self.grid_row_component_armor_4, sticky="w")
        self.label_component_armor_4_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_component_armor_4_dp.grid(column=self.grid_col_dp,row=self.grid_row_component_armor_4, sticky="w")

        self.var_component_armor_spaces_qty_4 = tk.IntVar()
        self.entry_component_armor_spaces_qty = ttk.Entry(canvas_type, textvariable=self.var_component_armor_spaces_qty_4, width=3)
        self.entry_component_armor_spaces_qty.grid(column=self.grid_col_qty,row=self.grid_row_component_armor_4, sticky="w")
        self.var_component_armor_spaces_qty_4.trace_add("write", self.on_changed_component_armor_spaces_4)

        self.button_component_armor_spaces_4_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_component_armor_spaces_4_qty_up)
        self.button_component_armor_spaces_4_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_component_armor_4, sticky="w")
        self.button_component_armor_spaces_4_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_component_armor_spaces_4_qty_down)
        self.button_component_armor_spaces_4_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_component_armor_4, sticky="w")

        self.var_component_armor_count_qty_4 = tk.IntVar()
        self.entry_component_armor_count_qty = ttk.Entry(canvas_type, textvariable=self.var_component_armor_count_qty_4, width=3)
        self.entry_component_armor_count_qty.grid(column=self.grid_right_qty,row=self.grid_row_component_armor_4, sticky="w")
        self.var_component_armor_count_qty_4.trace_add("write", self.on_changed_component_armor_count_4)

        self.button_component_armor_count_4_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_component_armor_count_4_qty_up)
        self.button_component_armor_count_4_qty_up.grid(column=self.grid_right_up_button,row=self.grid_row_component_armor_4, sticky="w")
        self.button_component_armor_count_4_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_component_armor_count_4_qty_down)
        self.button_component_armor_count_4_qty_down.grid(column=self.grid_right_down_button,row=self.grid_row_component_armor_4, sticky="w")

    def on_select_component_armor_4(self, *args):
        selected_value = self.selected_component_armor_4.get()
        for entry in self.component_armor_list:
            armor_type: str = entry.get("Component Armor")
            if selected_value == armor_type:
                component_armor_adjustment_cost = float(entry.get("Cost"))
                component_armor_adjustment_weight = float(entry.get("Weight"))
                component_armor_cost: float = 5.0
                component_armor_weight:  float = 2.0
                component_armor_spaces_qty = self.var_component_armor_spaces_qty_4.get()
                component_armor_count_qty = self.var_component_armor_count_qty_4.get()

                calculated_armor_cost = component_armor_adjustment_cost * component_armor_cost * component_armor_spaces_qty * component_armor_count_qty
                calculated_armor_weight = component_armor_adjustment_weight * component_armor_weight * component_armor_spaces_qty * component_armor_count_qty

                #calculate that the weight of the armor choice doesn't exceed 20 lbs per space
                if component_armor_weight * component_armor_count_qty * component_armor_adjustment_weight > 20.0:
                    if component_armor_adjustment_weight > 0.0:
                        component_armor_count_qty = min(10, int(10.0/component_armor_adjustment_weight))
                        self.var_component_armor_count_qty_4.set(component_armor_count_qty)


                self.label_hidden_component_armor_4_cost.configure(text=str(component_armor_adjustment_cost*component_armor_cost))
                self.label_hidden_component_armor_4_weight.configure(text=str(component_armor_adjustment_weight*component_armor_weight))
                self.label_hidden_component_armor_4_dp.configure(text=str(component_armor_count_qty))
                self.label_hidden_component_armor_4_space.configure(text=str(1))

                self.label_component_armor_4_cost.configure(text=str(calculated_armor_cost))
                self.label_component_armor_4_weight.configure(text=str(calculated_armor_weight))
                self.label_component_armor_4_space.configure(text=str(1))
                self.label_component_armor_4_dp.configure(text="1")
                self.calculate_component_armor_4(self.canvas_type)
                self.recalculate()

    def on_changed_component_armor_spaces_4(self, *args):
        self.calculate_component_armor_4(self.canvas_type)

    def calculate_component_armor_4(self, canvas_type):
        component_armor_space_qty = self.var_component_armor_spaces_qty_4.get()
        component_armor_count_qty = self.var_component_armor_count_qty_4.get()
        component_armor_cost_adjustment: float = float(self.label_hidden_component_armor_4_cost.cget("text"))
        component_armor_weight_adjustment: float = float(self.label_hidden_component_armor_4_weight.cget("text"))

        if component_armor_space_qty > 0 and component_armor_count_qty > 0:
            component_armor_4_cost:   float = 0.0
            component_armor_4_weight: float = 0.0
            component_armor_4_dp = component_armor_count_qty
            if self.is_cycle:
                component_armor_4_spaces = 0.5
            else:
                component_armor_4_spaces = 1
            component_armor_4_cost =  component_armor_space_qty * component_armor_count_qty * component_armor_cost_adjustment
            component_armor_4_weight =  component_armor_space_qty * component_armor_count_qty * component_armor_weight_adjustment
        else:
            component_armor_4_cost = 0
            component_armor_4_weight = 0
            component_armor_4_dp = 0
            component_armor_4_spaces = 0
        self.label_component_armor_4_cost.configure(text=self.float_to_str(component_armor_4_cost))
        self.label_component_armor_4_weight.configure(text=self.float_to_str(component_armor_4_weight))
        self.label_component_armor_4_dp.configure(text=str(component_armor_4_dp))
        self.label_component_armor_4_space.configure(text=str(component_armor_4_spaces))
        self.recalculate()

    def on_button_component_armor_spaces_4_qty_up(self, *args):
        component_armor_space_qty = self.var_component_armor_spaces_qty_4.get()
        component_armor_space_qty = component_armor_space_qty + 1
        component_armor_space_qty = min(component_armor_space_qty, 10)
        self.var_component_armor_spaces_qty_4.set(component_armor_space_qty)
        self.calculate_component_armor_4(self.canvas_type)

    def on_button_component_armor_spaces_4_qty_down(self, *args):
        component_armor_space_qty = self.var_component_armor_spaces_qty_4.get()
        component_armor_space_qty = component_armor_space_qty - 1
        component_armor_space_qty = max(component_armor_space_qty, 0)
        self.var_component_armor_spaces_qty_4.set(component_armor_space_qty)
        self.calculate_component_armor_4(self.canvas_type)

    def on_changed_component_armor_count_4(self, *args):
        self.calculate_component_armor_4(self.canvas_type)

    def on_button_component_armor_count_4_qty_up(self, *args):
        component_armor_count_qty = self.var_component_armor_count_qty_4.get()
        component_armor_count_qty = component_armor_count_qty + 1
        component_armor_weight_adjustment: float = float(self.label_hidden_component_armor_4_weight.cget("text"))
        #calculate that the weight of the armor choice doesn't exceed 20 lbs per space
        if component_armor_count_qty * component_armor_weight_adjustment > 20.0:
            component_armor_count_qty = component_armor_count_qty - 1
        self.var_component_armor_count_qty_4.set(component_armor_count_qty)
        self.calculate_component_armor_4(self.canvas_type)

    def on_button_component_armor_count_4_qty_down(self, *args):
        component_armor_count_qty = self.var_component_armor_count_qty_4.get()
        component_armor_count_qty = component_armor_count_qty - 1
        component_armor_count_qty = max(component_armor_count_qty, 0)
        self.var_component_armor_count_qty_4.set(component_armor_count_qty)
        self.calculate_component_armor_4(self.canvas_type)

    def add_dropdown_component_armor_facing_4_canvas(self, canvas_type):
        self.selected_component_armor_facing_4 = tk.StringVar()
        self.selected_component_armor_facing_4.set("Component Armor")
        options = ["Facing", "Front", "Back", "Left", "Right", "Top", "Underbody", "Driver", "Gunner", "Driver & Gunner", "Power Plant", "Gas Tank"]
        # Create the dropdown widget
        self.component_armor_facing_dropdown_4 = ttk.OptionMenu(canvas_type, self.selected_component_armor_facing_4, "Facing", *options) #filled elsewhere
        self.component_armor_facing_dropdown_4.grid(column=self.grid_col_max_weight, row=self.grid_row_component_armor_4, sticky="w")

    ######################################################################
    # Component Armor Row 5 processing here                              #
    ######################################################################

    def add_dropdown_component_armor_canvas_5(self, canvas_type):
        self.get_component_armor_dictionaries()
        self.selected_component_armor_5 = tk.StringVar()
        self.selected_component_armor_5.set("Component Armor")
        options = self.get_component_armor_options()
        # Create the dropdown widget
        self.component_armor_dropdown_5 = ttk.OptionMenu(canvas_type, self.selected_component_armor_5, "Component Armor", *options) #filled elsewhere
        self.component_armor_dropdown_5.grid(column=self.grid_col_item, row=self.grid_row_component_armor_5, sticky="w")
        self.selected_component_armor_5.trace_add("write", self.on_select_component_armor_5)

    def add_labels_buttons_component_armor_row_5(self, canvas_type):
        up_arrow = "\u2191"
        down_arrow = "\u2193"

        self.label_hidden_component_armor_5_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_component_armor_5_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_component_armor_5_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_component_armor_5_space = tk.Label(canvas_type, text="0", anchor="w")

        self.label_component_armor_5_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_component_armor_5_cost.grid(column=self.grid_col_cost,row=self.grid_row_component_armor_5, sticky="w")
        self.label_component_armor_5_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_component_armor_5_weight.grid(column=self.grid_col_weight ,row=self.grid_row_component_armor_5, sticky="w")
        self.label_component_armor_5_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_component_armor_5_space.grid(column=self.grid_col_spaces,row=self.grid_row_component_armor_5, sticky="w")
        self.label_component_armor_5_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_component_armor_5_dp.grid(column=self.grid_col_dp,row=self.grid_row_component_armor_5, sticky="w")

        self.var_component_armor_spaces_qty_5 = tk.IntVar()
        self.entry_component_armor_spaces_qty = ttk.Entry(canvas_type, textvariable=self.var_component_armor_spaces_qty_5, width=3)
        self.entry_component_armor_spaces_qty.grid(column=self.grid_col_qty,row=self.grid_row_component_armor_5, sticky="w")
        self.var_component_armor_spaces_qty_5.trace_add("write", self.on_changed_component_armor_spaces_5)

        self.button_component_armor_spaces_5_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_component_armor_spaces_5_qty_up)
        self.button_component_armor_spaces_5_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_component_armor_5, sticky="w")
        self.button_component_armor_spaces_5_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_component_armor_spaces_5_qty_down)
        self.button_component_armor_spaces_5_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_component_armor_5, sticky="w")

        self.var_component_armor_count_qty_5 = tk.IntVar()
        self.entry_component_armor_count_qty = ttk.Entry(canvas_type, textvariable=self.var_component_armor_count_qty_5, width=3)
        self.entry_component_armor_count_qty.grid(column=self.grid_right_qty,row=self.grid_row_component_armor_5, sticky="w")
        self.var_component_armor_count_qty_5.trace_add("write", self.on_changed_component_armor_count_5)

        self.button_component_armor_count_5_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_component_armor_count_5_qty_up)
        self.button_component_armor_count_5_qty_up.grid(column=self.grid_right_up_button,row=self.grid_row_component_armor_5, sticky="w")
        self.button_component_armor_count_5_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_component_armor_count_5_qty_down)
        self.button_component_armor_count_5_qty_down.grid(column=self.grid_right_down_button,row=self.grid_row_component_armor_5, sticky="w")

    def on_select_component_armor_5(self, *args):
        selected_value = self.selected_component_armor_5.get()
        for entry in self.component_armor_list:
            armor_type: str = entry.get("Component Armor")
            if selected_value == armor_type:
                component_armor_adjustment_cost = float(entry.get("Cost"))
                component_armor_adjustment_weight = float(entry.get("Weight"))
                component_armor_cost: float = 5.0
                component_armor_weight:  float = 2.0
                component_armor_spaces_qty = self.var_component_armor_spaces_qty_5.get()
                component_armor_count_qty = self.var_component_armor_count_qty_5.get()

                calculated_armor_cost = component_armor_adjustment_cost * component_armor_cost * component_armor_spaces_qty * component_armor_count_qty
                calculated_armor_weight = component_armor_adjustment_weight * component_armor_weight * component_armor_spaces_qty * component_armor_count_qty

                #calculate that the weight of the armor choice doesn't exceed 20 lbs per space
                if component_armor_weight * component_armor_count_qty * component_armor_adjustment_weight > 20.0:
                    if component_armor_adjustment_weight > 0.0:
                        component_armor_count_qty = min(10, int(10.0/component_armor_adjustment_weight))
                        self.var_component_armor_count_qty_5.set(component_armor_count_qty)


                self.label_hidden_component_armor_5_cost.configure(text=str(component_armor_adjustment_cost*component_armor_cost))
                self.label_hidden_component_armor_5_weight.configure(text=str(component_armor_adjustment_weight*component_armor_weight))
                self.label_hidden_component_armor_5_dp.configure(text=str(component_armor_count_qty))
                self.label_hidden_component_armor_5_space.configure(text=str(1))

                self.label_component_armor_5_cost.configure(text=str(calculated_armor_cost))
                self.label_component_armor_5_weight.configure(text=str(calculated_armor_weight))
                self.label_component_armor_5_space.configure(text=str(1))
                self.label_component_armor_5_dp.configure(text="1")
                self.calculate_component_armor_5(self.canvas_type)
                self.recalculate()

    def on_changed_component_armor_spaces_5(self, *args):
        self.calculate_component_armor_5(self.canvas_type)

    def calculate_component_armor_5(self, canvas_type):
        component_armor_space_qty = self.var_component_armor_spaces_qty_5.get()
        component_armor_count_qty = self.var_component_armor_count_qty_5.get()
        component_armor_cost_adjustment: float = float(self.label_hidden_component_armor_5_cost.cget("text"))
        component_armor_weight_adjustment: float = float(self.label_hidden_component_armor_5_weight.cget("text"))

        if component_armor_space_qty > 0 and component_armor_count_qty > 0:
            component_armor_5_cost:   float = 0.0
            component_armor_5_weight: float = 0.0
            component_armor_5_dp = component_armor_count_qty
            if self.is_cycle:
                component_armor_5_spaces = 0.5
            else:
                component_armor_5_spaces = 1
            component_armor_5_cost =  component_armor_space_qty * component_armor_count_qty * component_armor_cost_adjustment
            component_armor_5_weight = f"{(component_armor_space_qty * component_armor_count_qty * component_armor_weight_adjustment):.2f}"
        else:
            component_armor_5_cost = 0
            component_armor_5_weight = 0
            component_armor_5_dp = 0
            component_armor_5_spaces = 0
        self.label_component_armor_5_cost.configure(text=self.float_to_str(component_armor_5_cost))
        self.label_component_armor_5_weight.configure(text=self.float_to_str(component_armor_5_weight))
        self.label_component_armor_5_dp.configure(text=str(component_armor_5_dp))
        self.label_component_armor_5_space.configure(text=str(component_armor_5_spaces))
        self.recalculate()

    def on_button_component_armor_spaces_5_qty_up(self, *args):
        component_armor_space_qty = self.var_component_armor_spaces_qty_5.get()
        component_armor_space_qty = component_armor_space_qty + 1
        component_armor_space_qty = min(component_armor_space_qty, 10)
        self.var_component_armor_spaces_qty_5.set(component_armor_space_qty)
        self.calculate_component_armor_5(self.canvas_type)

    def on_button_component_armor_spaces_5_qty_down(self, *args):
        component_armor_space_qty = self.var_component_armor_spaces_qty_5.get()
        component_armor_space_qty = component_armor_space_qty - 1
        component_armor_space_qty = max(component_armor_space_qty, 0)
        self.var_component_armor_spaces_qty_5.set(component_armor_space_qty)
        self.calculate_component_armor_5(self.canvas_type)

    def on_changed_component_armor_count_5(self, *args):
        self.calculate_component_armor_5(self.canvas_type)

    def on_button_component_armor_count_5_qty_up(self, *args):
        component_armor_count_qty = self.var_component_armor_count_qty_5.get()
        component_armor_count_qty = component_armor_count_qty + 1
        component_armor_weight_adjustment: float = float(self.label_hidden_component_armor_5_weight.cget("text"))
        #calculate that the weight of the armor choice doesn't exceed 20 lbs per space
        if component_armor_count_qty * component_armor_weight_adjustment > 20.0:
            component_armor_count_qty = component_armor_count_qty - 1
        self.var_component_armor_count_qty_5.set(component_armor_count_qty)
        #self.calculate_component_armor_5(self.canvas_type)

    def on_button_component_armor_count_5_qty_down(self, *args):
        component_armor_count_qty = self.var_component_armor_count_qty_5.get()
        component_armor_count_qty = component_armor_count_qty - 1
        if component_armor_count_qty < 0:
            component_armor_count_qty = 10
        self.var_component_armor_count_qty_5.set(component_armor_count_qty)
        #self.calculate_component_armor_5(self.canvas_type)

    def add_dropdown_component_armor_facing_5_canvas(self, canvas_type):
        self.selected_component_armor_facing_5 = tk.StringVar()
        self.selected_component_armor_facing_5.set("Component Armor")
        options = ["Facing", "Front", "Back", "Left", "Right", "Top", "Underbody", "Driver", "Gunner", "Driver & Gunner", "Power Plant", "Gas Tank"]
        # Create the dropdown widget
        self.component_armor_facing_dropdown_5 = ttk.OptionMenu(canvas_type, self.selected_component_armor_facing_5, "Facing", *options) #filled elsewhere
        self.component_armor_facing_dropdown_5.grid(column=self.grid_col_max_weight, row=self.grid_row_component_armor_5, sticky="w")

    ######################################################
    # Rocket Booster Common processing                   #
    ######################################################
    def get_rocket_booster_facing_dictionaries(self):
        self.rocket_booster_facing_list = []
        entry_dict: dict = {"Facing": "Facing"}
        self.rocket_booster_facing_list.append(entry_dict)
        entry_dict: dict = {"Facing": "Front"}
        self.rocket_booster_facing_list.append(entry_dict)
        entry_dict: dict = {"Facing": "Back"}
        self.rocket_booster_facing_list.append(entry_dict)
        entry_dict: dict = {"Facing": "Left"}
        self.rocket_booster_facing_list.append(entry_dict)
        entry_dict: dict = {"Facing": "Right"}
        self.rocket_booster_facing_list.append(entry_dict)
        entry_dict: dict = {"Facing": "Top"}
        self.rocket_booster_facing_list.append(entry_dict)
        entry_dict: dict = {"Facing": "Underbody"}
        self.rocket_booster_facing_list.append(entry_dict)

    def add_row_rocket_boosters(self, canvas_type):
        self.add_row_rocket_boosters_1_canvas(canvas_type)
        self.add_row_rocket_boosters_2_canvas(canvas_type)
        self.add_row_rocket_boosters_3_canvas(canvas_type)
        self.add_row_rocket_boosters_4_canvas(canvas_type)
        self.add_row_rocket_boosters_5_canvas(canvas_type)
        self.add_dropdown_rocket_boost_facing_1_canvas(canvas_type)
        self.add_dropdown_rocket_boost_facing_2_canvas(canvas_type)
        self.add_dropdown_rocket_boost_facing_3_canvas(canvas_type)
        self.add_dropdown_rocket_boost_facing_4_canvas(canvas_type)
        self.add_dropdown_rocket_boost_facing_5_canvas(canvas_type)

    ######################################################
    # Rocket Booster Row 1 processing                    #
    ######################################################
    def add_row_rocket_boosters_1_canvas(self, canvas_type):
        up_arrow = "\u2191"
        down_arrow = "\u2193"

        self.label_hidden_rocket_booster_1_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_rocket_booster_1_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_rocket_booster_1_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_rocket_booster_1_space = tk.Label(canvas_type, text="0", anchor="w")

        self.label_rocket_booster_1_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_rocket_booster_1_cost.grid(column=self.grid_col_cost,row=self.grid_row_rocket_booster_1, sticky="w")
        self.label_rocket_booster_1_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_rocket_booster_1_weight.grid(column=self.grid_col_weight ,row=self.grid_row_rocket_booster_1, sticky="w")
        self.label_rocket_booster_1_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_rocket_booster_1_space.grid(column=self.grid_col_spaces,row=self.grid_row_rocket_booster_1, sticky="w")
        self.label_rocket_booster_1_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_rocket_booster_1_dp.grid(column=self.grid_col_dp,row=self.grid_row_rocket_booster_1, sticky="w")
        self.label_rocket_booster_1_thrust = tk.Label(canvas_type, text="0", anchor="w")
        self.label_rocket_booster_1_thrust.grid(column=self.grid_col_power_factors,row=self.grid_row_rocket_booster_1, sticky="w")

        self.var_rocket_booster_pounds_qty_1 = tk.IntVar()
        self.entry_rocket_booster_pounds_qty = ttk.Entry(canvas_type, textvariable=self.var_rocket_booster_pounds_qty_1, width=3)
        self.entry_rocket_booster_pounds_qty.grid(column=self.grid_col_qty,row=self.grid_row_rocket_booster_1, sticky="w")
        self.var_rocket_booster_pounds_qty_1.trace_add("write", self.on_changed_rocket_booster_pounds_1)

        self.button_rocket_booster_pounds_1_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_rocket_booster_pounds_1_qty_up)
        self.button_rocket_booster_pounds_1_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_rocket_booster_1, sticky="w")
        self.button_rocket_booster_pounds_1_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_rocket_booster_pounds_1_qty_down)
        self.button_rocket_booster_pounds_1_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_rocket_booster_1, sticky="w")

    def on_changed_rocket_booster_pounds_1(self, *args):
        rocket_boost_qty_1 = self.var_rocket_booster_pounds_qty_1.get()
        self.label_rocket_booster_1_cost.configure(text=str(25*rocket_boost_qty_1))
        self.label_rocket_booster_1_weight.configure(text=str(rocket_boost_qty_1))
        space_value: int = 0
        if rocket_boost_qty_1 == 0:
            space_value = 0
        elif rocket_boost_qty_1 <= 100:
            space_value = 1
        else:
            space_value = math.ceil(float(rocket_boost_qty_1 / 100.0))
        self.label_rocket_booster_1_space.configure(text=str(space_value))
        self.label_rocket_booster_1_dp.configure(text=str(space_value))
        self.recalculate() # we need the accurate current_total weight to calculate thrust

        current_total_weight: float = float(self.label_total_weight.cget("text")) #this could be a decimal
        if current_total_weight > 0.0:
            thrust_value = int(rocket_boost_qty_1 * 1000 / current_total_weight)
        else:
            thrust_value = 0
        thrust_value = math.floor(thrust_value / 5) * 5
        self.label_rocket_booster_1_thrust.configure(text=str(thrust_value))
        self.recalculate() #and re-re-calculate

    def on_button_rocket_booster_pounds_1_qty_up(self):
        rocket_boost_qty_1 = self.var_rocket_booster_pounds_qty_1.get()
        rocket_boost_qty_1 = rocket_boost_qty_1 + 1
        self.var_rocket_booster_pounds_qty_1.set(rocket_boost_qty_1)
        self.on_changed_rocket_booster_pounds_1()

    def on_button_rocket_booster_pounds_1_qty_down(self):
        rocket_boost_qty_1 = self.var_rocket_booster_pounds_qty_1.get()
        rocket_boost_qty_1 = rocket_boost_qty_1 - 1
        rocket_boost_qty_1 = max(rocket_boost_qty_1, 0)
        self.var_rocket_booster_pounds_qty_1.set(rocket_boost_qty_1)
        self.on_changed_rocket_booster_pounds_1()

    def add_dropdown_rocket_boost_facing_1_canvas(self, canvas_type):
        self.selected_rocket_booster_facing_1 = tk.StringVar()
        self.selected_rocket_booster_facing_1.set("Facing")
        options = ["Facing", "Front", "Back", "Left", "Right", "Top", "Underbody"]
        # Create the dropdown widget
        self.rocket_booster_facing_dropdown_1 = ttk.OptionMenu(canvas_type, self.selected_rocket_booster_facing_1, "Facing", *options) #filled elsewhere
        self.rocket_booster_facing_dropdown_1.grid(column=self.grid_col_max_weight, row=self.grid_row_rocket_booster_1, sticky="w")

    ######################################################
    # Rocket Booster Row 2 processing                    #
    ######################################################
    def add_row_rocket_boosters_2_canvas(self, canvas_type):
        up_arrow = "\u2191"
        down_arrow = "\u2193"

        self.label_hidden_rocket_booster_2_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_rocket_booster_2_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_rocket_booster_2_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_rocket_booster_2_space = tk.Label(canvas_type, text="0", anchor="w")

        self.label_rocket_booster_2_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_rocket_booster_2_cost.grid(column=self.grid_col_cost,row=self.grid_row_rocket_booster_2, sticky="w")
        self.label_rocket_booster_2_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_rocket_booster_2_weight.grid(column=self.grid_col_weight ,row=self.grid_row_rocket_booster_2, sticky="w")
        self.label_rocket_booster_2_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_rocket_booster_2_space.grid(column=self.grid_col_spaces,row=self.grid_row_rocket_booster_2, sticky="w")
        self.label_rocket_booster_2_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_rocket_booster_2_dp.grid(column=self.grid_col_dp,row=self.grid_row_rocket_booster_2, sticky="w")
        self.label_rocket_booster_2_thrust = tk.Label(canvas_type, text="0", anchor="w")
        self.label_rocket_booster_2_thrust.grid(column=self.grid_col_power_factors,row=self.grid_row_rocket_booster_2, sticky="w")

        self.var_rocket_booster_pounds_qty_2 = tk.IntVar()
        self.entry_rocket_booster_pounds_qty = ttk.Entry(canvas_type, textvariable=self.var_rocket_booster_pounds_qty_2, width=3)
        self.entry_rocket_booster_pounds_qty.grid(column=self.grid_col_qty,row=self.grid_row_rocket_booster_2, sticky="w")
        self.var_rocket_booster_pounds_qty_2.trace_add("write", self.on_changed_rocket_booster_pounds_2)

        self.button_rocket_booster_pounds_2_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_rocket_booster_pounds_2_qty_up)
        self.button_rocket_booster_pounds_2_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_rocket_booster_2, sticky="w")
        self.button_rocket_booster_pounds_2_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_rocket_booster_pounds_2_qty_down)
        self.button_rocket_booster_pounds_2_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_rocket_booster_2, sticky="w")

    def on_changed_rocket_booster_pounds_2(self, *args):
        rocket_boost_qty_2 = self.var_rocket_booster_pounds_qty_2.get()
        self.label_rocket_booster_2_cost.configure(text=str(25*rocket_boost_qty_2))
        self.label_rocket_booster_2_weight.configure(text=str(rocket_boost_qty_2))
        space_value: int = 0
        if rocket_boost_qty_2 == 0:
            space_value = 0
        elif rocket_boost_qty_2 <= 100:
            space_value = 1
        else:
            space_value = math.ceil(float(rocket_boost_qty_2 / 100.0))
        self.label_rocket_booster_2_space.configure(text=str(space_value))
        self.label_rocket_booster_2_dp.configure(text=str(space_value))
        self.recalculate() # we need the accurate current_total weight to calculate thrust

        current_total_weight: float = float(self.label_total_weight.cget("text")) #this could be a decimal
        if current_total_weight > 0.0:
            thrust_value = int(rocket_boost_qty_2 * 1000 / current_total_weight)
        else:
            thrust_value = 0
        thrust_value = math.floor(thrust_value / 5) * 5
        self.label_rocket_booster_2_thrust.configure(text=str(thrust_value))
        self.recalculate() #and re-re-calculate

    def on_button_rocket_booster_pounds_2_qty_up(self):
        rocket_boost_qty_2 = self.var_rocket_booster_pounds_qty_2.get()
        rocket_boost_qty_2 = rocket_boost_qty_2 + 1
        self.var_rocket_booster_pounds_qty_2.set(rocket_boost_qty_2)
        self.on_changed_rocket_booster_pounds_2()

    def on_button_rocket_booster_pounds_2_qty_down(self, *args):
        rocket_boost_qty_2 = self.var_rocket_booster_pounds_qty_2.get()
        rocket_boost_qty_2 = rocket_boost_qty_2 - 1
        rocket_boost_qty_2 = max(rocket_boost_qty_2, 0)
        self.var_rocket_booster_pounds_qty_2.set(rocket_boost_qty_2)
        self.on_changed_rocket_booster_pounds_2()

    def add_dropdown_rocket_boost_facing_2_canvas(self, canvas_type):
        self.selected_rocket_booster_facing_2 = tk.StringVar()
        self.selected_rocket_booster_facing_2.set("Facing")
        options = ["Facing", "Front", "Back", "Left", "Right", "Top", "Underbody"]
        # Create the dropdown widget
        self.rocket_booster_facing_dropdown_2 = ttk.OptionMenu(canvas_type, self.selected_rocket_booster_facing_2, "Facing", *options) #filled elsewhere
        self.rocket_booster_facing_dropdown_2.grid(column=self.grid_col_max_weight, row=self.grid_row_rocket_booster_2, sticky="w")

    ######################################################
    # Rocket Booster Row 3 processing                    #
    ######################################################
    def add_row_rocket_boosters_3_canvas(self, canvas_type):
        up_arrow = "\u2191"
        down_arrow = "\u2193"

        self.label_hidden_rocket_booster_3_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_rocket_booster_3_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_rocket_booster_3_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_rocket_booster_3_space = tk.Label(canvas_type, text="0", anchor="w")

        self.label_rocket_booster_3_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_rocket_booster_3_cost.grid(column=self.grid_col_cost,row=self.grid_row_rocket_booster_3, sticky="w")
        self.label_rocket_booster_3_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_rocket_booster_3_weight.grid(column=self.grid_col_weight ,row=self.grid_row_rocket_booster_3, sticky="w")
        self.label_rocket_booster_3_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_rocket_booster_3_space.grid(column=self.grid_col_spaces,row=self.grid_row_rocket_booster_3, sticky="w")
        self.label_rocket_booster_3_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_rocket_booster_3_dp.grid(column=self.grid_col_dp,row=self.grid_row_rocket_booster_3, sticky="w")
        self.label_rocket_booster_3_thrust = tk.Label(canvas_type, text="0", anchor="w")
        self.label_rocket_booster_3_thrust.grid(column=self.grid_col_power_factors,row=self.grid_row_rocket_booster_3, sticky="w")

        self.var_rocket_booster_pounds_qty_3 = tk.IntVar()
        self.entry_rocket_booster_pounds_qty = ttk.Entry(canvas_type, textvariable=self.var_rocket_booster_pounds_qty_3, width=3)
        self.entry_rocket_booster_pounds_qty.grid(column=self.grid_col_qty,row=self.grid_row_rocket_booster_3, sticky="w")
        self.var_rocket_booster_pounds_qty_3.trace_add("write", self.on_changed_rocket_booster_pounds_3)

        self.button_rocket_booster_pounds_3_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_rocket_booster_pounds_3_qty_up)
        self.button_rocket_booster_pounds_3_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_rocket_booster_3, sticky="w")
        self.button_rocket_booster_pounds_3_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_rocket_booster_pounds_3_qty_down)
        self.button_rocket_booster_pounds_3_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_rocket_booster_3, sticky="w")

    def on_changed_rocket_booster_pounds_3(self, *args):
        rocket_boost_qty_3 = self.var_rocket_booster_pounds_qty_3.get()
        self.label_rocket_booster_3_cost.configure(text=str(25*rocket_boost_qty_3))
        self.label_rocket_booster_3_weight.configure(text=str(rocket_boost_qty_3))
        space_value: int = 0
        if rocket_boost_qty_3 == 0:
            space_value = 0
        elif rocket_boost_qty_3 <= 100:
            space_value = 1
        else:
            space_value = math.ceil(float(rocket_boost_qty_3 / 100.0))
        self.label_rocket_booster_3_space.configure(text=str(space_value))
        self.label_rocket_booster_3_dp.configure(text=str(space_value))
        self.recalculate() # we need the accurate current_total weight to calculate thrust

        current_total_weight: float = float(self.label_total_weight.cget("text")) #this could be a decimal
        if current_total_weight > 0.0:
            thrust_value = int(rocket_boost_qty_3 * 1000 / current_total_weight)
        else:
            thrust_value = 0
        thrust_value = math.floor(thrust_value / 5) * 5
        self.label_rocket_booster_3_thrust.configure(text=str(thrust_value))
        self.recalculate() #and re-re-calculate

    def on_button_rocket_booster_pounds_3_qty_up(self):
        rocket_boost_qty_3 = self.var_rocket_booster_pounds_qty_3.get()
        rocket_boost_qty_3 = rocket_boost_qty_3 + 1
        self.var_rocket_booster_pounds_qty_3.set(rocket_boost_qty_3)
        self.on_changed_rocket_booster_pounds_3()

    def on_button_rocket_booster_pounds_3_qty_down(self):
        rocket_boost_qty_3 = self.var_rocket_booster_pounds_qty_3.get()
        rocket_boost_qty_3 = rocket_boost_qty_3 - 1
        rocket_boost_qty_3 = max(rocket_boost_qty_3, 0)
        self.var_rocket_booster_pounds_qty_3.set(rocket_boost_qty_3)
        self.on_changed_rocket_booster_pounds_3()

    def add_dropdown_rocket_boost_facing_3_canvas(self, canvas_type):
        self.selected_rocket_booster_facing_3 = tk.StringVar()
        self.selected_rocket_booster_facing_3.set("Facing")
        options = ["Facing", "Front", "Back", "Left", "Right", "Top", "Underbody"]
        # Create the dropdown widget
        self.rocket_booster_facing_dropdown_3 = ttk.OptionMenu(canvas_type, self.selected_rocket_booster_facing_3, "Facing", *options) #filled elsewhere
        self.rocket_booster_facing_dropdown_3.grid(column=self.grid_col_max_weight, row=self.grid_row_rocket_booster_3, sticky="w")

    ######################################################
    # Rocket Booster Row 4 processing                    #
    ######################################################
    def add_row_rocket_boosters_4_canvas(self, canvas_type):
        up_arrow = "\u2191"
        down_arrow = "\u2193"

        self.label_hidden_rocket_booster_4_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_rocket_booster_4_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_rocket_booster_4_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_rocket_booster_4_space = tk.Label(canvas_type, text="0", anchor="w")

        self.label_rocket_booster_4_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_rocket_booster_4_cost.grid(column=self.grid_col_cost,row=self.grid_row_rocket_booster_4, sticky="w")
        self.label_rocket_booster_4_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_rocket_booster_4_weight.grid(column=self.grid_col_weight ,row=self.grid_row_rocket_booster_4, sticky="w")
        self.label_rocket_booster_4_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_rocket_booster_4_space.grid(column=self.grid_col_spaces,row=self.grid_row_rocket_booster_4, sticky="w")
        self.label_rocket_booster_4_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_rocket_booster_4_dp.grid(column=self.grid_col_dp,row=self.grid_row_rocket_booster_4, sticky="w")
        self.label_rocket_booster_4_thrust = tk.Label(canvas_type, text="0", anchor="w")
        self.label_rocket_booster_4_thrust.grid(column=self.grid_col_power_factors,row=self.grid_row_rocket_booster_4, sticky="w")

        self.var_rocket_booster_pounds_qty_4 = tk.IntVar()
        self.entry_rocket_booster_pounds_qty = ttk.Entry(canvas_type, textvariable=self.var_rocket_booster_pounds_qty_4, width=3)
        self.entry_rocket_booster_pounds_qty.grid(column=self.grid_col_qty,row=self.grid_row_rocket_booster_4, sticky="w")
        self.var_rocket_booster_pounds_qty_4.trace_add("write", self.on_changed_rocket_booster_pounds_4)

        self.button_rocket_booster_pounds_4_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_rocket_booster_pounds_4_qty_up)
        self.button_rocket_booster_pounds_4_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_rocket_booster_4, sticky="w")
        self.button_rocket_booster_pounds_4_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_rocket_booster_pounds_4_qty_down)
        self.button_rocket_booster_pounds_4_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_rocket_booster_4, sticky="w")

    def on_changed_rocket_booster_pounds_4(self, *args):
        rocket_boost_qty_4 = self.var_rocket_booster_pounds_qty_4.get()
        self.label_rocket_booster_4_cost.configure(text=str(25*rocket_boost_qty_4))
        self.label_rocket_booster_4_weight.configure(text=str(rocket_boost_qty_4))
        space_value: int = 0
        if rocket_boost_qty_4 == 0:
            space_value = 0
        elif rocket_boost_qty_4 <= 100:
            space_value = 1
        else:
            space_value = math.ceil(float(rocket_boost_qty_4 / 100.0))
        self.label_rocket_booster_4_space.configure(text=str(space_value))
        self.label_rocket_booster_4_dp.configure(text=str(space_value))
        self.recalculate() # we need the accurate current_total weight to calculate thrust

        current_total_weight: float = float(self.label_total_weight.cget("text")) #this could be a decimal
        if current_total_weight > 0.0:
            thrust_value = int(rocket_boost_qty_4 * 1000 / current_total_weight)
        else:
            thrust_value = 0
        thrust_value = math.floor(thrust_value / 5) * 5
        self.label_rocket_booster_4_thrust.configure(text=str(thrust_value))
        self.recalculate() #and re-re-calculate

    def on_button_rocket_booster_pounds_4_qty_up(self):
        rocket_boost_qty_4 = self.var_rocket_booster_pounds_qty_4.get()
        rocket_boost_qty_4 = rocket_boost_qty_4 + 1
        self.var_rocket_booster_pounds_qty_4.set(rocket_boost_qty_4)
        self.on_changed_rocket_booster_pounds_4()

    def on_button_rocket_booster_pounds_4_qty_down(self):
        rocket_boost_qty_4 = self.var_rocket_booster_pounds_qty_4.get()
        rocket_boost_qty_4 = rocket_boost_qty_4 - 1
        rocket_boost_qty_4 = max(rocket_boost_qty_4, 0)
        self.var_rocket_booster_pounds_qty_4.set(rocket_boost_qty_4)
        self.on_changed_rocket_booster_pounds_4()

    def add_dropdown_rocket_boost_facing_4_canvas(self, canvas_type):
        self.selected_rocket_booster_facing_4 = tk.StringVar()
        self.selected_rocket_booster_facing_4.set("Facing")
        options = ["Facing", "Front", "Back", "Left", "Right", "Top", "Underbody"]
        # Create the dropdown widget
        self.rocket_booster_facing_dropdown_4 = ttk.OptionMenu(canvas_type, self.selected_rocket_booster_facing_4, "Facing", *options) #filled elsewhere
        self.rocket_booster_facing_dropdown_4.grid(column=self.grid_col_max_weight, row=self.grid_row_rocket_booster_4, sticky="w")

    ######################################################
    # Rocket Booster Row 5 processing                    #
    ######################################################
    def add_row_rocket_boosters_5_canvas(self, canvas_type):
        up_arrow = "\u2191"
        down_arrow = "\u2193"

        self.label_hidden_rocket_booster_5_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_rocket_booster_5_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_rocket_booster_5_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_rocket_booster_5_space = tk.Label(canvas_type, text="0", anchor="w")

        self.label_rocket_booster_5_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_rocket_booster_5_cost.grid(column=self.grid_col_cost,row=self.grid_row_rocket_booster_5, sticky="w")
        self.label_rocket_booster_5_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_rocket_booster_5_weight.grid(column=self.grid_col_weight ,row=self.grid_row_rocket_booster_5, sticky="w")
        self.label_rocket_booster_5_space = tk.Label(canvas_type, text="0", anchor="w")
        self.label_rocket_booster_5_space.grid(column=self.grid_col_spaces,row=self.grid_row_rocket_booster_5, sticky="w")
        self.label_rocket_booster_5_dp = tk.Label(canvas_type, text="0", anchor="w")
        self.label_rocket_booster_5_dp.grid(column=self.grid_col_dp,row=self.grid_row_rocket_booster_5, sticky="w")
        self.label_rocket_booster_5_thrust = tk.Label(canvas_type, text="0", anchor="w")
        self.label_rocket_booster_5_thrust.grid(column=self.grid_col_power_factors,row=self.grid_row_rocket_booster_5, sticky="w")

        self.var_rocket_booster_pounds_qty_5 = tk.IntVar()
        self.entry_rocket_booster_pounds_qty = ttk.Entry(canvas_type, textvariable=self.var_rocket_booster_pounds_qty_5, width=3)
        self.entry_rocket_booster_pounds_qty.grid(column=self.grid_col_qty,row=self.grid_row_rocket_booster_5, sticky="w")
        self.var_rocket_booster_pounds_qty_5.trace_add("write", self.on_changed_rocket_booster_pounds_5)

        self.button_rocket_booster_pounds_5_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_rocket_booster_pounds_5_qty_up)
        self.button_rocket_booster_pounds_5_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_rocket_booster_5, sticky="w")
        self.button_rocket_booster_pounds_5_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_rocket_booster_pounds_5_qty_down)
        self.button_rocket_booster_pounds_5_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_rocket_booster_5, sticky="w")

    def on_changed_rocket_booster_pounds_5(self, *args):
        rocket_boost_qty_5 = self.var_rocket_booster_pounds_qty_5.get()
        self.label_rocket_booster_5_cost.configure(text=str(25*rocket_boost_qty_5))
        self.label_rocket_booster_5_weight.configure(text=str(rocket_boost_qty_5))
        space_value: int = 0
        if rocket_boost_qty_5 == 0:
            space_value = 0
        elif rocket_boost_qty_5 <= 100:
            space_value = 1
        else:
            space_value = math.ceil(float(rocket_boost_qty_5 / 100.0))
        self.label_rocket_booster_5_space.configure(text=str(space_value))
        self.label_rocket_booster_5_dp.configure(text=str(space_value))
        self.recalculate() # we need the accurate current_total weight to calculate thrust

        current_total_weight: float = float(self.label_total_weight.cget("text")) #this could be a decimal
        if current_total_weight > 0.0:
            thrust_value = int(rocket_boost_qty_5 * 1000 / current_total_weight)
        else:
            thrust_value = 0
        thrust_value = math.floor(thrust_value / 5) * 5
        self.label_rocket_booster_5_thrust.configure(text=str(thrust_value))
        self.recalculate() #and re-re-calculate

    def on_button_rocket_booster_pounds_5_qty_up(self):
        rocket_boost_qty_5 = self.var_rocket_booster_pounds_qty_5.get()
        rocket_boost_qty_5 = rocket_boost_qty_5 + 1
        self.var_rocket_booster_pounds_qty_5.set(rocket_boost_qty_5)
        self.on_changed_rocket_booster_pounds_5()

    def on_button_rocket_booster_pounds_5_qty_down(self):
        rocket_boost_qty_5 = self.var_rocket_booster_pounds_qty_5.get()
        rocket_boost_qty_5 = rocket_boost_qty_5 - 1
        rocket_boost_qty_5 = max(rocket_boost_qty_5, 0)
        self.var_rocket_booster_pounds_qty_5.set(rocket_boost_qty_5)
        self.on_changed_rocket_booster_pounds_5()

    def add_dropdown_rocket_boost_facing_5_canvas(self, canvas_type):
        self.selected_rocket_booster_facing_5 = tk.StringVar()
        self.selected_rocket_booster_facing_5.set("Facing")
        options = ["Facing", "Front", "Back", "Left", "Right", "Top", "Underbody"]
        # Create the dropdown widget
        self.rocket_booster_facing_dropdown_5 = ttk.OptionMenu(canvas_type, self.selected_rocket_booster_facing_5, "Facing", *options) #filled elsewhere
        self.rocket_booster_facing_dropdown_5.grid(column=self.grid_col_max_weight, row=self.grid_row_rocket_booster_5, sticky="w")

    ######################################################################
    # Personal Equipment Common Funtions here                            #
    ######################################################################
    def get_personal_equipment_dictionaries(self):
        self.personal_equipment_list = []
        entry_dict: dict = {"Item": "Personal Equipment",                      "Cost": "0",    "GE": "0",   "Weight":   "0", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "- - - Melee Weapons - - -	",             "Cost": "0",    "GE": "0",   "Weight":   "0", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Axe",                                     "Cost": "50",   "GE": "3",   "Weight":   "4", "To-Hit": "9",   "Damage": "1d",     "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Bowie Knife / Bayonet",                   "Cost": "50",   "GE": "1",   "Weight": "0.5", "To-Hit": "8",   "Damage": "1d-2",   "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Chainsaw",                                "Cost": "150",  "GE": "4",   "Weight":  "15", "To-Hit": "9",   "Damage": "1d+1",   "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Hatchet",                                 "Cost": "25",   "GE": "1",   "Weight":   "2", "To-Hit": "8",   "Damage": "1d-2",   "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Knife",                                   "Cost": "25",   "GE": "1",   "Weight": "0.5", "To-Hit": "5",   "Damage": "1d-4",   "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Machete",                                 "Cost": "75",   "GE": "2",   "Weight":   "3", "To-Hit": "7",   "Damage": "1d-3",   "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Spear",                                   "Cost": "50",   "GE": "3",   "Weight":   "5", "To-Hit": "7",   "Damage": "1d-2",   "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Sword",                                   "Cost": "200",  "GE": "2",   "Weight":   "3", "To-Hit": "7",   "Damage": "1d-1",   "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "",                                        "Cost": "0",    "GE": "0",   "Weight":   "0", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "- - - Firepower Weapons - - -",           "Cost": "0",    "GE": "0",   "Weight":   "0", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Portable Flamethrower",                   "Cost": "750",  "GE": "5",   "Weight":  "50", "To-Hit": "6",   "Damage": "1d",     "Shots": "5",  "CPS": "25",  "WPS": "5",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Portable Flamethrower, HT Fuel",          "Cost": "750",  "GE": "5",   "Weight":  "50", "To-Hit": "6",   "Damage": "1d+2",   "Shots": "5",  "CPS": "100", "WPS": "7.5", "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Portable StickyFoam Sprayer",             "Cost": "700",  "GE": "5",   "Weight":  "50", "To-Hit": "6",   "Damage": "*",      "Shots": "10", "CPS": "30",  "WPS": "2",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Grenade Launcher",                        "Cost": "300",  "GE": "2",   "Weight":  "11", "To-Hit": "7",   "Damage": "",       "Shots": "5",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Rifle Launching for Grenade",             "Cost": "150",  "GE": "0",   "Weight":   "0", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Under-Barrel Grenade Launcher",           "Cost": "200",  "GE": "1",   "Weight":   "8", "To-Hit": "7",   "Damage": "",       "Shots": "1",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Laser LAW",                               "Cost": "2000", "GE": "3",   "Weight":  "25", "To-Hit": "6",   "Damage": "3d",     "Shots": "1",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Laser VLAW",                              "Cost": "1500", "GE": "2",   "Weight":  "18", "To-Hit": "6",   "Damage": "2d",     "Shots": "1",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Laser Rifle",                             "Cost": "4500", "GE": "2",   "Weight":  "10", "To-Hit": "6",   "Damage": "1d",     "Shots": "2",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Laser Rifle Power Pack",                  "Cost": "1000", "GE": "3",   "Weight":  "30", "To-Hit": "0",   "Damage": "",       "Shots": "20", "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "AV Rifle",                                "Cost": "600",  "GE": "3",   "Weight":  "25", "To-Hit": "8",   "Damage": "1d",     "Shots": "10", "CPS": "5",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Heavy AV Rifle",                          "Cost": "800",  "GE": "4",   "Weight":  "30", "To-Hit": "8",   "Damage": "1d+3",   "Shots": "10", "CPS": "10",  "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Assault Rifle",                           "Cost": "400",  "GE": "3",   "Weight":  "12", "To-Hit": "7",   "Damage": "1d+1",   "Shots": "10", "CPS": "15",  "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Assault Rifle w/HP Ammo",                 "Cost": "400",  "GE": "3",   "Weight":  "12", "To-Hit": "7",   "Damage": "1d+2",   "Shots": "10", "CPS": "30",  "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Gauss Rifle",                             "Cost": "1500", "GE": "2",   "Weight":   "9", "To-Hit": "6",   "Damage": "1d",     "Shots": "20", "CPS": "15",  "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Needle Gun",                              "Cost": "100",  "GE": "2",   "Weight":   "6", "To-Hit": "6",   "Damage": "",       "Shots": "20", "CPS": "1",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Rifle",                                   "Cost": "120",  "GE": "2",   "Weight":  "10", "To-Hit": "7",   "Damage": "3 hits", "Shots": "20", "CPS": "1",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Rifle w/HP Ammo",                         "Cost": "120",  "GE": "2",   "Weight":  "10", "To-Hit": "7",   "Damage": "4 hits", "Shots": "20", "CPS": "2",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Shotgun",                                 "Cost": "120",  "GE": "2",   "Weight":   "8", "To-Hit": "6",   "Damage": "2 hits", "Shots": "10", "CPS": "1",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Double-Barrel Shotgun",                   "Cost": "200",  "GE": "3",   "Weight":  "12", "To-Hit": "6",   "Damage": "2 hits", "Shots": "10", "CPS": "1",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Stun Gun",                                "Cost": "750",  "GE": "2",   "Weight":  "15", "To-Hit": "7",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Submachine Gun",                          "Cost": "250",  "GE": "2",   "Weight":   "9", "To-Hit": "6",   "Damage": "1d",     "Shots": "10", "CPS": "12",  "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Submachine Gun w/HP Ammo",                "Cost": "250",  "GE": "2",   "Weight":   "9", "To-Hit": "6",   "Damage": "1d+1",   "Shots": "10", "CPS": "24",  "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Derringer",                               "Cost": "30",   "GE": "0",   "Weight": "0.5", "To-Hit": "8",   "Damage": "2 hits", "Shots": "1",  "CPS": "1",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Light Pistol",                            "Cost": "75",   "GE": "1",   "Weight":   "1", "To-Hit": "8",   "Damage": "1 hit",  "Shots": "8",  "CPS": "1",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Light Pistol with HP Ammo",               "Cost": "75",   "GE": "1",   "Weight":   "1", "To-Hit": "8",   "Damage": "2 hits", "Shots": "8",  "CPS": "2",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Heavy Pistol",                            "Cost": "100",  "GE": "1",   "Weight":   "3", "To-Hit": "7",   "Damage": "2 hits", "Shots": "8",  "CPS": "1",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Heavy Pistol with HP Ammo",               "Cost": "100",  "GE": "1",   "Weight":   "3", "To-Hit": "7",   "Damage": "3 hits", "Shots": "8",  "CPS": "2",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Gauss Pistol",                            "Cost": "500",  "GE": "1",   "Weight":   "2", "To-Hit": "6",   "Damage": "1d-2",   "Shots": "20", "CPS": "5",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Gauss Pistol Power Pack",                 "Cost": "1000", "GE": "3",   "Weight":   "0", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Needle Pistol",                           "Cost": "50",   "GE": "1",   "Weight":   "2", "To-Hit": "7",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Machine Pistol",                          "Cost": "250",  "GE": "1",   "Weight":   "5", "To-Hit": "7",   "Damage": "1d-2",   "Shots": "6",  "CPS": "12",  "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Handheld Flare Launcher",                 "Cost": "300",  "GE": "1",   "Weight":   "6", "To-Hit": "0",   "Damage": "",       "Shots": "5",  "CPS": "10",  "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Bazooka",                                 "Cost": "1500", "GE": "4",   "Weight":  "20", "To-Hit": "8",   "Damage": "3d",     "Shots": "1",  "CPS": "50",  "WPS": "2",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Bazooka w/AP Ammo",                       "Cost": "1500", "GE": "4",   "Weight":  "20", "To-Hit": "8",   "Damage": "3d+3",   "Shots": "1",  "CPS": "75",  "WPS": "2",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Gyroslugger, 1 barrel",                   "Cost": "1200", "GE": "2",   "Weight":  "14", "To-Hit": "8",   "Damage": "",       "Shots": "1",  "CPS": "0",   "WPS": "1",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Gyroslugger, 2 barrel",                   "Cost": "1500", "GE": "3",   "Weight":  "18", "To-Hit": "8",   "Damage": "",       "Shots": "2",  "CPS": "0",   "WPS": "1",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Under-Barrel Gyroslugger",                "Cost": "1200", "GE": "1",   "Weight":   "8", "To-Hit": "8",   "Damage": "",       "Shots": "1",  "CPS": "0",   "WPS": "1",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "LAW",                                     "Cost": "500",  "GE": "2",   "Weight":  "20", "To-Hit": "8",   "Damage": "2d",     "Shots": "1",  "CPS": "0",   "WPS": "1",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "LAW w/AP Ammo",                           "Cost": "750",  "GE": "2",   "Weight":  "20", "To-Hit": "8",   "Damage": "2d+2",   "Shots": "1",  "CPS": "0",   "WPS": "1",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "VLAW",                                    "Cost": "200",  "GE": "1",   "Weight":  "10", "To-Hit": "8",   "Damage": "1d",     "Shots": "1",  "CPS": "0",   "WPS": "1",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "VLAW w/AP Ammo",                          "Cost": "300",  "GE": "1",   "Weight":  "10", "To-Hit": "8",   "Damage": "1d+1",   "Shots": "1",  "CPS": "0",   "WPS": "1",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "M-P Rocket Launcher",                     "Cost": "800",  "GE": "6",   "Weight":  "35", "To-Hit": "9",   "Damage": "2d",     "Shots": "4",  "CPS": "50",  "WPS": "1",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "M-P Rocket Launcher w/AP Ammo",           "Cost": "800",  "GE": "6",   "Weight":  "35", "To-Hit": "9",   "Damage": "2d+2",   "Shots": "4",  "CPS": "75",  "WPS": "1",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Portable Micromissile Launcher",          "Cost": "900",  "GE": "5",   "Weight":  "30", "To-Hit": "8",   "Damage": "1d",     "Shots": "8",  "CPS": "30",  "WPS": "1",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Portable Micromissile Launcher, AP Ammo", "Cost": "900",  "GE": "5",   "Weight":  "30", "To-Hit": "8",   "Damage": "1d+1",   "Shots": "8",  "CPS": "45",  "WPS": "1",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Stinger SAM",                             "Cost": "1000", "GE": "5",   "Weight":  "30", "To-Hit": "7/9", "Damage": "4d",     "Shots": "1",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Stinger SAM w/AP Ammo",                   "Cost": "1500", "GE": "5",   "Weight":  "30", "To-Hit": "7/9", "Damage": "4d+4",   "Shots": "1",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "",                                        "Cost": "0",    "GE": "0",   "Weight":   "0", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "- - - Grenades - - -",                    "Cost": "0",    "GE": "0",   "Weight":   "0", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Concussion Grenade",                      "Cost": "40",   "GE": "1",   "Weight":   "1", "To-Hit": "0",   "Damage": "Spec.",  "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "See table in UACFH, page 134"}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Explosive Grenade",                       "Cost": "25",   "GE": "1",   "Weight":   "1", "To-Hit": "0",   "Damage": "1d",	  "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "1d to vehicles within 1 inch, 1d to all else within 2 inches"}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Fake Grenade",                            "Cost": "5",    "GE": "1",   "Weight":   "1", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Flaming Oil Grenade",                     "Cost": "75",   "GE": "1",   "Weight":   "1", "To-Hit": "0",   "Damage": "1d-2",	  "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "Creates 1/2 inch x 1/2 inch slick, ignites after 1 phase"}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "High-Temp Flaming Oil Grenade",           "Cost": "300",  "GE": "1",   "Weight":   "1", "To-Hit": "0",   "Damage": "1d",	  "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "Creates 1/2 inch x 1/2 inch slick, ignites after 1 phase"}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Flash Grenade",                           "Cost": "150",  "GE": "1",   "Weight":   "1", "To-Hit": "0",   "Damage": "Blind",  "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "2 inch  range, blinds for 2 seconds at night. No day effect"}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Flechette Grenade",                       "Cost": "20",   "GE": "1",   "Weight":   "1", "To-Hit": "0",   "Damage": "1d",	  "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "1d to peds in 2 inch range, no dmg to vehicles or tires"}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Foam Grenade",                            "Cost": "30",   "GE": "1",   "Weight":   "1", "To-Hit": "0",   "Damage": "",		  "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "1 on 1d6 to put out fire if 1/2 inch from fire; cumulative ea."}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Paint Grenade",                           "Cost": "20",   "GE": "1",   "Weight":   "1", "To-Hit": "0",   "Damage": "Paint",  "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "1 inch x 1 inch standard paint cloud"}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Smoke Grenade",                           "Cost": "20",   "GE": "1",   "Weight":   "1", "To-Hit": "0",   "Damage": "Smoke",  "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "1 inch x 1 inch standard smoke cloud"}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Tear Gas Grenade",                        "Cost": "30",   "GE": "1",   "Weight":   "1", "To-Hit": "0",   "Damage": "Tgas",	  "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "1 inch x 1 inch Tear gas cloud; see rules in UACFG page 135"}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Thermite Grenade",                        "Cost": "100",  "GE": "1",   "Weight":   "1", "To-Hit": "0",   "Damage": "1d",     "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "1/2 inch range; does full damage to everything; Burn: 2/1"}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "White Phosphorus Grenade",                "Cost": "75",   "GE": "1",   "Weight":   "1", "To-Hit": "0",   "Damage": "1d",     "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "1/2 dam. To vehicles; Burn:2/1; leaves 1/2x1/2 HS cloud"}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Impact Fuse",                             "Cost": "50",   "GE": "0",   "Weight":   "0", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "",                                        "Cost": "0",    "GE": "0",   "Weight":   "0", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "- - - GyroSlugger Ammo - - -",            "Cost": "0",    "GE": "0",   "Weight":   "0", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Standard Gyro Round",                     "Cost": "100",  "GE": "1",   "Weight":   "0", "To-Hit": "0",   "Damage": "2d",     "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "AP Gyro Round",                           "Cost": "150",  "GE": "1",   "Weight":   "0", "To-Hit": "0",   "Damage": "2d+2",   "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "HESH Gyro Round",                         "Cost": "250",  "GE": "1",   "Weight":   "0", "To-Hit": "0",   "Damage": "2d",     "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Incendiary Gyro Round",                   "Cost": "300",  "GE": "1",   "Weight":   "0", "To-Hit": "0",   "Damage": "1d",     "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "Burst Effect, Burn: 2/1"}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Flare Gyro Round",                        "Cost": "50",   "GE": "1",   "Weight":   "0", "To-Hit": "0",   "Damage": "1/2d",   "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "Lights 10 inch radius; burn 1/0"}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Smoke Gyro Round",                        "Cost": "50",   "GE": "1",   "Weight":   "0", "To-Hit": "0",   "Damage": "Smoke",  "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "1 inch x 1 inch standard smoke cloud"}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Paint Gyro Round",                        "Cost": "100",  "GE": "1",   "Weight":   "0", "To-Hit": "0",   "Damage": "Paint",  "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "1 inch x 1 inch standard paint cloud"}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "",                                        "Cost": "0",    "GE": "0",   "Weight":   "0", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "- - - Equipment - - -",                   "Cost": "0",    "GE": "0",   "Weight":   "0", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Ammo Clip",                               "Cost": "50",   "GE": "0.5", "Weight":   "1", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "Must buy ammo separately"}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "SMG and GL Ammo Clip",                    "Cost": "50",   "GE": "1",   "Weight":   "2", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "Must buy ammo separately"}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Extended Ammo Clip",                      "Cost": "80",   "GE": "1",   "Weight":   "1", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "Must buy ammo separately, holds 2x normal ammo"}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "SMG Extended Ammo Clip",                  "Cost": "80",   "GE": "2",   "Weight":   "2", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "Must buy ammo separately, holds 2x normal ammo"}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Anti-Toxin Kit",                          "Cost": "25",   "GE": "0.5", "Weight": "0.5", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Backpack",                                "Cost": "40",   "GE": "5",   "Weight":   "0", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "Carries 5 extra GE"}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Arm. Battle Vest/BA Combo",               "Cost": "475",  "GE": "3",   "Weight":  "15", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Battle Vest",                             "Cost": "75",   "GE": "3",   "Weight":   "5", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "Holds 1 pistol, 2 grenades, 2 ammo clips, 1 knife."}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Battle Vest, Armored",                    "Cost": "225",  "GE": "3",   "Weight":   "5", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "Same as BV, +3 DP, takes damage on 1-4 on 1d"}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Body Armor",                              "Cost": "250",  "GE": "0",   "Weight":  "10", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "+3DP"}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Body Armor, Blended",                     "Cost": "750",  "GE": "5",   "Weight":   "0", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "+3DP, looks like normal clothing"}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Body Armor, Improved",                    "Cost": "1500", "GE": "1",   "Weight":  "25", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "+6DP; reflex reduced by 1"}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Body Armor, Improved, Blended",           "Cost": "5000", "GE": "1",   "Weight":  "10", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "+6DP; reflex reduced by 1', looks like clothing"}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Impact Armor",                            "Cost": "2000", "GE": "1",   "Weight":  "25", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "+6DP, protects against collisions and falls"}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Spiked Armor",                            "Cost": "100",  "GE": "1",   "Weight":   "0", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Duellist's Shades",                       "Cost": "25",   "GE": "0",   "Weight":   "0", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "Acts like tinted windshield"}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Fireproof Suit",                          "Cost": "500",  "GE": "0",   "Weight":   "0", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Flak Jacket",                             "Cost": "150",  "GE": "3",   "Weight":   "5", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "+3DP on 1-4 on 1d; Can wear over body armor"}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Folding Stock",                           "Cost": "10",   "GE": "1",   "Weight":   "3", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Gas Mask",                                "Cost": "30",   "GE": "1",   "Weight":   "3", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Gas Mask, No Paint",                      "Cost": "50",   "GE": "1",   "Weight":   "3", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Hazard Detector",                         "Cost": "250",  "GE": "0",   "Weight":   "0", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "IFF Sender	100",                          "Cost": "1",    "GE": "0",   "Weight":   "0", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "IR Goggles",                              "Cost": "750",  "GE": "1",   "Weight":   "0", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Laser Targeting Scope",                   "Cost": "500",  "GE": "1",   "Weight":   "0", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "+1 to hit; may be tuned to rockets"}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Light Intensifier Goggles",               "Cost": "300",  "GE": "1",   "Weight":   "0", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Light Intensifier Goggles/Gas Mask",      "Cost": "400",  "GE": "1",   "Weight":   "3", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Limpet Mine",                             "Cost": "60",   "GE": "1",   "Weight":   "3", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "1d+1 damage"}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Limpet Mine, Heavy",                      "Cost": "250",  "GE": "2",   "Weight":  "10", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "3d damage"}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Medikit",                                 "Cost": "1000", "GE": "0",   "Weight":  "50", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "3 DP, 50 lbs; takes 1 vehicular space"}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Portable Medikit",                        "Cost": "750",  "GE": "3",   "Weight":   "0", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "Worn like a backpack"}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Mini-Mechanic",                           "Cost": "50",   "GE": "1",   "Weight": "0.5", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Pedestrian Chaff Discharger",             "Cost": "75",   "GE": "2",   "Weight":   "5", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Pedestrian Fake Discharger",              "Cost": "30",   "GE": "2",   "Weight":   "5", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Pedestrian Flame Cloud Discharger",       "Cost": "175",  "GE": "2",   "Weight":   "5", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Pedestrian Flaming Oil Discharger",       "Cost": "125",  "GE": "2",   "Weight":   "5", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Pedestrian FO Discharger, Hi-temp Fuel",  "Cost": "500",  "GE": "2",   "Weight":   "8", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Pedestrian Flechette Discharger",         "Cost": "75",   "GE": "2",   "Weight":   "5", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Pedestrian Foam Discharger",              "Cost": "50",   "GE": "2",   "Weight":   "5", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Pedestrian Hot Smoke Discharger",         "Cost": "90",   "GE": "2",   "Weight":   "5", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Pedestrian Ice Discharger",               "Cost": "100",  "GE": "2",   "Weight":   "5", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Pedestrian Oil Discharger",               "Cost": "75",   "GE": "2",   "Weight":   "5", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Pedestrian Paint Discharger",             "Cost": "65",   "GE": "2",   "Weight":   "5", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Pedestrian Point Defense Discharger",     "Cost": "125",  "GE": "2",   "Weight":   "5", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Pedestrian Sand Discharger",              "Cost": "50",   "GE": "2",   "Weight":   "5", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Pedestrian Smoke Discharger",             "Cost": "75",   "GE": "2",   "Weight":   "5", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Pedestrian Tear Gas Discharger",          "Cost": "100",  "GE": "2",   "Weight":   "5", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Portable Fire Extiguisher",               "Cost": "150",  "GE": "3",   "Weight":  "20", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "Puts out fire on a 1-2 on 1d6"}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Portable Searchlight",                    "Cost": "100",  "GE": "2",   "Weight":   "4", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Riot Shield",                             "Cost": "750",  "GE": "3",   "Weight":  "25", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "7DP when carried protects on 1-4 on 1d6"}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Tinted Goggles",                          "Cost": "20",   "GE": "0",   "Weight":   "0", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": "Acts as tinted windshield"}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Tool Kit",                                "Cost": "600",  "GE": "6",   "Weight":  "40", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)
        entry_dict: dict = {"Item": "Walkie Talkie",                           "Cost": "250",  "GE": "1",   "Weight":   "2", "To-Hit": "0",   "Damage": "",       "Shots": "0",  "CPS": "0",   "WPS": "0",   "Notes": ""}
        self.personal_equipment_list.append(entry_dict)

    def get_personal_equipment_options(self):
        options: list = []
        for entry in self.personal_equipment_list:
            personal_equipment_name: str = entry.get("Item")
            options.append(personal_equipment_name)
        return options

    def var_alternate_grenade_equivalent_changed(self):
        """Examine the value of the checkbox and adjust weights of personal equipment, and the total recalc"""
        self.age_value = int(self.var_alternate_grenade_equivalent.get())
        self.personal_equipment_qty_1_update()
        self.personal_equipment_qty_2_update()
        self.personal_equipment_qty_3_update()
        self.personal_equipment_qty_4_update()
        self.personal_equipment_qty_5_update()
        self.personal_equipment_qty_6_update()
        self.personal_equipment_qty_7_update()
        self.personal_equipment_qty_8_update()
        self.personal_equipment_qty_9_update()
        self.personal_equipment_qty_10_update()

    def add_labels_buttons_personal_equipment(self, canvas_type):
        self.var_alternate_grenade_equivalent = tk.IntVar()
        self.check_alternate_grenade_equivalent = tk.Checkbutton(canvas_type, text="Alternate Grenade Equivalent", variable=self.var_alternate_grenade_equivalent, command=self.var_alternate_grenade_equivalent_changed, anchor="w")
        self.check_alternate_grenade_equivalent.grid(column=self.grid_col_last_column,row=self.grid_row_personal_equipment_header, sticky="w")

        self.add_labels_buttons_personal_equipment_1_canvas(canvas_type=canvas_type)
        self.add_labels_buttons_personal_equipment_2_canvas(canvas_type=canvas_type)
        self.add_labels_buttons_personal_equipment_3_canvas(canvas_type=canvas_type)
        self.add_labels_buttons_personal_equipment_4_canvas(canvas_type=canvas_type)
        self.add_labels_buttons_personal_equipment_5_canvas(canvas_type=canvas_type)
        self.add_labels_buttons_personal_equipment_6_canvas(canvas_type=canvas_type)
        self.add_labels_buttons_personal_equipment_7_canvas(canvas_type=canvas_type)
        self.add_labels_buttons_personal_equipment_8_canvas(canvas_type=canvas_type)
        self.add_labels_buttons_personal_equipment_9_canvas(canvas_type=canvas_type)
        self.add_labels_buttons_personal_equipment_10_canvas(canvas_type=canvas_type)

    ######################################################################
    # Personal Equipment Row 1 processing here                           #
    ######################################################################
    def add_labels_buttons_personal_equipment_1_canvas(self, canvas_type):
        up_arrow = "\u2191"
        down_arrow = "\u2193"

        self.label_hidden_personal_equipment_1_name   = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_1_cost   = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_1_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_1_ge     = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_1_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_1_damage = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_1_shots  = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_1_cps    = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_1_wps    = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_1_notes  = tk.Label(canvas_type, text="0", anchor="w")

        self.label_personal_equipment_1_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_1_cost.grid(column=self.grid_col_cost,row=self.grid_row_personal_equipment_1, sticky="w")
        self.label_personal_equipment_1_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_1_weight.grid(column=self.grid_col_weight ,row=self.grid_row_personal_equipment_1, sticky="w")
        self.label_personal_equipment_1_ge  = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_1_ge.grid(column=self.grid_col_spaces,row=self.grid_row_personal_equipment_1, sticky="w")
        self.label_personal_equipment_1_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_1_to_hit.grid(column=self.grid_col_dp,row=self.grid_row_personal_equipment_1, sticky="w")
        self.label_personal_equipment_1_damage = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_1_damage.grid(column=self.grid_col_max_weight,row=self.grid_row_personal_equipment_1, sticky="w")
        self.label_personal_equipment_1_shots = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_1_shots.grid(column=self.grid_col_power_factors,row=self.grid_row_personal_equipment_1, sticky="w")
        self.label_personal_equipment_1_cps = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_1_cps.grid(column=self.grid_col_base_mpg,row=self.grid_row_personal_equipment_1, sticky="w")
        self.label_personal_equipment_1_wps = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_1_wps.grid(column=self.grid_col_test_track,row=self.grid_row_personal_equipment_1, sticky="w")
        self.label_personal_equipment_1_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_1_notes.grid(column=self.grid_col_test_track_numbers,row=self.grid_row_personal_equipment_1, sticky="w")

        self.var_personal_equipment_1_qty = tk.IntVar()
        self.entry_personal_equipment_1_qty = ttk.Entry(canvas_type, textvariable=self.var_personal_equipment_1_qty, width=3)
        self.entry_personal_equipment_1_qty.grid(column=self.grid_col_qty, row=self.grid_row_personal_equipment_1, sticky="w")

        self.button_personal_equipment_1_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_personal_equipment_1_qty_up)
        self.button_personal_equipment_1_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_personal_equipment_1, sticky="w")
        self.button_personal_equipment_1_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_personal_equipment_1_qty_down)
        self.button_personal_equipment_1_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_personal_equipment_1, sticky="w")

    def add_dropdown_personal_equipment_1_canvas(self, canvas_type):
        self.selected_personal_equipment_1 = tk.StringVar()
        self.selected_personal_equipment_1.set("Personal Equipment")
        options = self.get_personal_equipment_options()
        # Create the dropdown widget
        self.personal_equipment_1_dropdown = ttk.OptionMenu(canvas_type, self.selected_personal_equipment_1, "Personal Equipment", *options) #filled elsewhere
        self.personal_equipment_1_dropdown.grid(column=self.grid_col_item, row=self.grid_row_personal_equipment_1, sticky="w")
        self.selected_personal_equipment_1.trace_add("write", self.on_select_personal_equipment_1)

    def on_select_personal_equipment_1(self, *args):
        selected_value = self.selected_personal_equipment_1.get()
        for entry in self.personal_equipment_list: #use the same self.personal_equipment_list for every personal_equipment dropdown
            personal_equipment_name: str = entry.get("Item")
            if selected_value == personal_equipment_name:
                personal_equipment_cost:   str = entry.get("Cost")
                personal_equipment_ge:     str = entry.get("GE")
                personal_equipment_weight: str = entry.get("Weight")
                personal_equipment_to_hit: str = entry.get("To-Hit")
                personal_equipment_damage: str = entry.get("Damage")
                personal_equipment_shots:  str = entry.get("Shots")
                personal_equipment_cps:    str = entry.get("CPS")
                personal_equipemnt_wps:    str = entry.get("WPS")
                personal_equipment_notes:  str = entry.get("Notes")

                self.label_hidden_personal_equipment_1_name.configure(text=str(personal_equipment_name))
                self.label_hidden_personal_equipment_1_cost.configure(text=str(personal_equipment_cost))
                self.label_hidden_personal_equipment_1_ge.configure(text=str(personal_equipment_ge))
                self.label_hidden_personal_equipment_1_weight.configure(text=str(personal_equipment_weight))
                self.label_hidden_personal_equipment_1_to_hit.configure(text=str(personal_equipment_to_hit))
                self.label_hidden_personal_equipment_1_damage.configure(text=str(personal_equipment_damage))
                self.label_hidden_personal_equipment_1_shots.configure(text=str(personal_equipment_shots))
                self.label_hidden_personal_equipment_1_cps.configure(text=str(personal_equipment_cps))
                self.label_hidden_personal_equipment_1_wps.configure(text=str(personal_equipemnt_wps))
                self.label_hidden_personal_equipment_1_notes.configure(text=str(personal_equipment_notes))
                self.personal_equipment_qty_1_update()
                return

    def on_button_personal_equipment_1_qty_up(self, *args):
        personal_equipment_1_qty = self.var_personal_equipment_1_qty.get()
        personal_equipment_1_qty = personal_equipment_1_qty + 1
        self.var_personal_equipment_1_qty.set(value=personal_equipment_1_qty)
        self.personal_equipment_qty_1_update()

    def on_button_personal_equipment_1_qty_down(self, *args):
        personal_equipment_1_qty = self.var_personal_equipment_1_qty.get()
        personal_equipment_1_qty = max(personal_equipment_1_qty - 1, 0)
        self.var_personal_equipment_1_qty.set(value=personal_equipment_1_qty)
        self.personal_equipment_qty_1_update()

    def personal_equipment_qty_1_update(self):
        personal_equipment_1_qty = self.var_personal_equipment_1_qty.get()

        personal_equipment_1_cost        = int(self.label_hidden_personal_equipment_1_cost.cget("text"))
        if self.age_value == 1: #use alternate grenade equivalent settings, set weight to zero
            personal_equipment_1_weight = 0
        else:
            personal_equipment_1_weight      = int(self.label_hidden_personal_equipment_1_weight.cget("text"))
        personal_equipment_1_ge:     str = self.label_hidden_personal_equipment_1_ge.cget("text")
        personal_equipment_1_to_hit: str = self.label_hidden_personal_equipment_1_to_hit.cget("text")
        personal_equipment_1_damage: str = self.label_hidden_personal_equipment_1_damage.cget("text")
        personal_equipment_1_shots:  str = self.label_hidden_personal_equipment_1_shots.cget("text")
        personal_equipment_1_cps:    str = self.label_hidden_personal_equipment_1_cps.cget("text")
        personal_equipment_1_wps:    str = self.label_hidden_personal_equipment_1_wps.cget("text")
        personal_equipment_1_notes:  str = self.label_hidden_personal_equipment_1_notes.cget("text")

        self.label_personal_equipment_1_cost.configure(text=str(personal_equipment_1_cost * personal_equipment_1_qty))
        self.label_personal_equipment_1_weight.configure(text=str(personal_equipment_1_weight * personal_equipment_1_qty))
        self.label_personal_equipment_1_ge.configure(text=str(personal_equipment_1_ge))
        self.label_personal_equipment_1_to_hit.configure(text=str(personal_equipment_1_to_hit))
        self.label_personal_equipment_1_damage.configure(text=str(personal_equipment_1_damage))
        self.label_personal_equipment_1_shots.configure(text=str(personal_equipment_1_shots))
        self.label_personal_equipment_1_cps.configure(text=str(personal_equipment_1_cps))
        self.label_personal_equipment_1_wps.configure(text=str(personal_equipment_1_wps))
        self.label_personal_equipment_1_notes.configure(text=str(personal_equipment_1_notes))

        self.recalculate()

    ######################################################################
    # Personal Equipment Row 2 processing here                           #
    ######################################################################
    def add_labels_buttons_personal_equipment_2_canvas(self, canvas_type):
        up_arrow = "\u2191"
        down_arrow = "\u2193"

        self.label_hidden_personal_equipment_2_name   = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_2_cost   = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_2_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_2_ge     = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_2_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_2_damage = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_2_shots  = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_2_cps    = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_2_wps    = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_2_notes  = tk.Label(canvas_type, text="0", anchor="w")

        self.label_personal_equipment_2_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_2_cost.grid(column=self.grid_col_cost,row=self.grid_row_personal_equipment_2, sticky="w")
        self.label_personal_equipment_2_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_2_weight.grid(column=self.grid_col_weight ,row=self.grid_row_personal_equipment_2, sticky="w")
        self.label_personal_equipment_2_ge  = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_2_ge.grid(column=self.grid_col_spaces,row=self.grid_row_personal_equipment_2, sticky="w")
        self.label_personal_equipment_2_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_2_to_hit.grid(column=self.grid_col_dp,row=self.grid_row_personal_equipment_2, sticky="w")
        self.label_personal_equipment_2_damage = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_2_damage.grid(column=self.grid_col_max_weight,row=self.grid_row_personal_equipment_2, sticky="w")
        self.label_personal_equipment_2_shots = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_2_shots.grid(column=self.grid_col_power_factors,row=self.grid_row_personal_equipment_2, sticky="w")
        self.label_personal_equipment_2_cps = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_2_cps.grid(column=self.grid_col_base_mpg,row=self.grid_row_personal_equipment_2, sticky="w")
        self.label_personal_equipment_2_wps = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_2_wps.grid(column=self.grid_col_test_track,row=self.grid_row_personal_equipment_2, sticky="w")
        self.label_personal_equipment_2_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_2_notes.grid(column=self.grid_col_test_track_numbers,row=self.grid_row_personal_equipment_2, sticky="w")

        self.var_personal_equipment_2_qty = tk.IntVar()
        self.entry_personal_equipment_2_qty = ttk.Entry(canvas_type, textvariable=self.var_personal_equipment_2_qty, width=3)
        self.entry_personal_equipment_2_qty.grid(column=self.grid_col_qty, row=self.grid_row_personal_equipment_2, sticky="w")

        self.button_personal_equipment_2_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_personal_equipment_2_qty_up)
        self.button_personal_equipment_2_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_personal_equipment_2, sticky="w")
        self.button_personal_equipment_2_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_personal_equipment_2_qty_down)
        self.button_personal_equipment_2_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_personal_equipment_2, sticky="w")

    def add_dropdown_personal_equipment_2_canvas(self, canvas_type):
        self.selected_personal_equipment_2 = tk.StringVar()
        self.selected_personal_equipment_2.set("Personal Equipment")
        options = self.get_personal_equipment_options()
        # Create the dropdown widget
        self.personal_equipment_2_dropdown = ttk.OptionMenu(canvas_type, self.selected_personal_equipment_2, "Personal Equipment", *options) #filled elsewhere
        self.personal_equipment_2_dropdown.grid(column=self.grid_col_item, row=self.grid_row_personal_equipment_2, sticky="w")
        self.selected_personal_equipment_2.trace_add("write", self.on_select_personal_equipment_2)

    def on_select_personal_equipment_2(self, *args):
        selected_value = self.selected_personal_equipment_2.get()
        for entry in self.personal_equipment_list: #use the same self.personal_equipment_list for every personal_equipment dropdown
            personal_equipment_name: str = entry.get("Item")
            if selected_value == personal_equipment_name:
                personal_equipment_cost:   str = entry.get("Cost")
                personal_equipment_ge:     str = entry.get("GE")
                personal_equipment_weight: str = entry.get("Weight")
                personal_equipment_to_hit: str = entry.get("To-Hit")
                personal_equipment_damage: str = entry.get("Damage")
                personal_equipment_shots:  str = entry.get("Shots")
                personal_equipment_cps:    str = entry.get("CPS")
                personal_equipemnt_wps:    str = entry.get("WPS")
                personal_equipment_notes:  str = entry.get("Notes")

                self.label_hidden_personal_equipment_2_name.configure(text=str(personal_equipment_name))
                self.label_hidden_personal_equipment_2_cost.configure(text=str(personal_equipment_cost))
                self.label_hidden_personal_equipment_2_ge.configure(text=str(personal_equipment_ge))
                self.label_hidden_personal_equipment_2_weight.configure(text=str(personal_equipment_weight))
                self.label_hidden_personal_equipment_2_to_hit.configure(text=str(personal_equipment_to_hit))
                self.label_hidden_personal_equipment_2_damage.configure(text=str(personal_equipment_damage))
                self.label_hidden_personal_equipment_2_shots.configure(text=str(personal_equipment_shots))
                self.label_hidden_personal_equipment_2_cps.configure(text=str(personal_equipment_cps))
                self.label_hidden_personal_equipment_2_wps.configure(text=str(personal_equipemnt_wps))
                self.label_hidden_personal_equipment_2_notes.configure(text=str(personal_equipment_notes))
                self.personal_equipment_qty_2_update()
                return

    def on_button_personal_equipment_2_qty_up(self, *args):
        personal_equipment_2_qty = self.var_personal_equipment_2_qty.get()
        personal_equipment_2_qty = personal_equipment_2_qty + 1
        self.var_personal_equipment_2_qty.set(value=personal_equipment_2_qty)
        self.personal_equipment_qty_2_update()

    def on_button_personal_equipment_2_qty_down(self, *args):
        personal_equipment_2_qty = self.var_personal_equipment_2_qty.get()
        personal_equipment_2_qty = max(personal_equipment_2_qty - 1, 0)
        self.var_personal_equipment_2_qty.set(value=personal_equipment_2_qty)
        self.personal_equipment_qty_2_update()

    def personal_equipment_qty_2_update(self):
        personal_equipment_2_qty = self.var_personal_equipment_2_qty.get()

        personal_equipment_2_cost        = int(self.label_hidden_personal_equipment_2_cost.cget("text"))
        if self.age_value == 1: #use alternate grenade equivalent settings, set weight to zero
            personal_equipment_2_weight = 0
        else:
            personal_equipment_2_weight      = int(self.label_hidden_personal_equipment_2_weight.cget("text"))
        personal_equipment_2_ge:     str = self.label_hidden_personal_equipment_2_ge.cget("text")
        personal_equipment_2_to_hit: str = self.label_hidden_personal_equipment_2_to_hit.cget("text")
        personal_equipment_2_damage: str = self.label_hidden_personal_equipment_2_damage.cget("text")
        personal_equipment_2_shots:  str = self.label_hidden_personal_equipment_2_shots.cget("text")
        personal_equipment_2_cps:    str = self.label_hidden_personal_equipment_2_cps.cget("text")
        personal_equipment_2_wps:    str = self.label_hidden_personal_equipment_2_wps.cget("text")
        personal_equipment_2_notes:  str = self.label_hidden_personal_equipment_2_notes.cget("text")

        self.label_personal_equipment_2_cost.configure(text=str(personal_equipment_2_cost * personal_equipment_2_qty))
        self.label_personal_equipment_2_weight.configure(text=str(personal_equipment_2_weight * personal_equipment_2_qty))
        self.label_personal_equipment_2_ge.configure(text=str(personal_equipment_2_ge))
        self.label_personal_equipment_2_to_hit.configure(text=str(personal_equipment_2_to_hit))
        self.label_personal_equipment_2_damage.configure(text=str(personal_equipment_2_damage))
        self.label_personal_equipment_2_shots.configure(text=str(personal_equipment_2_shots))
        self.label_personal_equipment_2_cps.configure(text=str(personal_equipment_2_cps))
        self.label_personal_equipment_2_wps.configure(text=str(personal_equipment_2_wps))
        self.label_personal_equipment_2_notes.configure(text=str(personal_equipment_2_notes))

        self.recalculate()

    ######################################################################
    # Personal Equipment Row 3 processing here                           #
    ######################################################################
    def add_labels_buttons_personal_equipment_3_canvas(self, canvas_type):
        up_arrow = "\u2191"
        down_arrow = "\u2193"

        self.label_hidden_personal_equipment_3_name   = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_3_cost   = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_3_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_3_ge     = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_3_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_3_damage = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_3_shots  = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_3_cps    = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_3_wps    = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_3_notes  = tk.Label(canvas_type, text="0", anchor="w")

        self.label_personal_equipment_3_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_3_cost.grid(column=self.grid_col_cost,row=self.grid_row_personal_equipment_3, sticky="w")
        self.label_personal_equipment_3_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_3_weight.grid(column=self.grid_col_weight ,row=self.grid_row_personal_equipment_3, sticky="w")
        self.label_personal_equipment_3_ge  = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_3_ge.grid(column=self.grid_col_spaces,row=self.grid_row_personal_equipment_3, sticky="w")
        self.label_personal_equipment_3_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_3_to_hit.grid(column=self.grid_col_dp,row=self.grid_row_personal_equipment_3, sticky="w")
        self.label_personal_equipment_3_damage = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_3_damage.grid(column=self.grid_col_max_weight,row=self.grid_row_personal_equipment_3, sticky="w")
        self.label_personal_equipment_3_shots = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_3_shots.grid(column=self.grid_col_power_factors,row=self.grid_row_personal_equipment_3, sticky="w")
        self.label_personal_equipment_3_cps = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_3_cps.grid(column=self.grid_col_base_mpg,row=self.grid_row_personal_equipment_3, sticky="w")
        self.label_personal_equipment_3_wps = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_3_wps.grid(column=self.grid_col_test_track,row=self.grid_row_personal_equipment_3, sticky="w")
        self.label_personal_equipment_3_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_3_notes.grid(column=self.grid_col_test_track_numbers,row=self.grid_row_personal_equipment_3, sticky="w")

        self.var_personal_equipment_3_qty = tk.IntVar()
        self.entry_personal_equipment_3_qty = ttk.Entry(canvas_type, textvariable=self.var_personal_equipment_3_qty, width=3)
        self.entry_personal_equipment_3_qty.grid(column=self.grid_col_qty, row=self.grid_row_personal_equipment_3, sticky="w")

        self.button_personal_equipment_3_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_personal_equipment_3_qty_up)
        self.button_personal_equipment_3_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_personal_equipment_3, sticky="w")
        self.button_personal_equipment_3_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_personal_equipment_3_qty_down)
        self.button_personal_equipment_3_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_personal_equipment_3, sticky="w")

    def add_dropdown_personal_equipment_3_canvas(self, canvas_type):
        self.selected_personal_equipment_3 = tk.StringVar()
        self.selected_personal_equipment_3.set("Personal Equipment")
        options = self.get_personal_equipment_options()
        # Create the dropdown widget
        self.personal_equipment_3_dropdown = ttk.OptionMenu(canvas_type, self.selected_personal_equipment_3, "Personal Equipment", *options) #filled elsewhere
        self.personal_equipment_3_dropdown.grid(column=self.grid_col_item, row=self.grid_row_personal_equipment_3, sticky="w")
        self.selected_personal_equipment_3.trace_add("write", self.on_select_personal_equipment_3)

    def on_select_personal_equipment_3(self, *args):
        selected_value = self.selected_personal_equipment_3.get()
        for entry in self.personal_equipment_list: #use the same self.personal_equipment_list for every personal_equipment dropdown
            personal_equipment_name: str = entry.get("Item")
            if selected_value == personal_equipment_name:
                personal_equipment_cost:   str = entry.get("Cost")
                personal_equipment_ge:     str = entry.get("GE")
                personal_equipment_weight: str = entry.get("Weight")
                personal_equipment_to_hit: str = entry.get("To-Hit")
                personal_equipment_damage: str = entry.get("Damage")
                personal_equipment_shots:  str = entry.get("Shots")
                personal_equipment_cps:    str = entry.get("CPS")
                personal_equipemnt_wps:    str = entry.get("WPS")
                personal_equipment_notes:  str = entry.get("Notes")

                self.label_hidden_personal_equipment_3_name.configure(text=str(personal_equipment_name))
                self.label_hidden_personal_equipment_3_cost.configure(text=str(personal_equipment_cost))
                self.label_hidden_personal_equipment_3_ge.configure(text=str(personal_equipment_ge))
                self.label_hidden_personal_equipment_3_weight.configure(text=str(personal_equipment_weight))
                self.label_hidden_personal_equipment_3_to_hit.configure(text=str(personal_equipment_to_hit))
                self.label_hidden_personal_equipment_3_damage.configure(text=str(personal_equipment_damage))
                self.label_hidden_personal_equipment_3_shots.configure(text=str(personal_equipment_shots))
                self.label_hidden_personal_equipment_3_cps.configure(text=str(personal_equipment_cps))
                self.label_hidden_personal_equipment_3_wps.configure(text=str(personal_equipemnt_wps))
                self.label_hidden_personal_equipment_3_notes.configure(text=str(personal_equipment_notes))
                self.personal_equipment_qty_3_update()
                return

    def on_button_personal_equipment_3_qty_up(self, *args):
        personal_equipment_3_qty = self.var_personal_equipment_3_qty.get()
        personal_equipment_3_qty = personal_equipment_3_qty + 1
        self.var_personal_equipment_3_qty.set(value=personal_equipment_3_qty)
        self.personal_equipment_qty_3_update()

    def on_button_personal_equipment_3_qty_down(self, *args):
        personal_equipment_3_qty = self.var_personal_equipment_3_qty.get()
        personal_equipment_3_qty = max(personal_equipment_3_qty - 1, 0)
        self.var_personal_equipment_3_qty.set(value=personal_equipment_3_qty)
        self.personal_equipment_qty_3_update()

    def personal_equipment_qty_3_update(self):
        personal_equipment_3_qty = self.var_personal_equipment_3_qty.get()

        personal_equipment_3_cost        = int(self.label_hidden_personal_equipment_3_cost.cget("text"))
        if self.age_value == 1: #use alternate grenade equivalent settings, set weight to zero
            personal_equipment_3_weight = 0
        else:
            personal_equipment_3_weight      = int(self.label_hidden_personal_equipment_3_weight.cget("text"))
        personal_equipment_3_ge:     str = self.label_hidden_personal_equipment_3_ge.cget("text")
        personal_equipment_3_to_hit: str = self.label_hidden_personal_equipment_3_to_hit.cget("text")
        personal_equipment_3_damage: str = self.label_hidden_personal_equipment_3_damage.cget("text")
        personal_equipment_3_shots:  str = self.label_hidden_personal_equipment_3_shots.cget("text")
        personal_equipment_3_cps:    str = self.label_hidden_personal_equipment_3_cps.cget("text")
        personal_equipment_3_wps:    str = self.label_hidden_personal_equipment_3_wps.cget("text")
        personal_equipment_3_notes:  str = self.label_hidden_personal_equipment_3_notes.cget("text")

        self.label_personal_equipment_3_cost.configure(text=str(personal_equipment_3_cost * personal_equipment_3_qty))
        self.label_personal_equipment_3_weight.configure(text=str(personal_equipment_3_weight * personal_equipment_3_qty))
        self.label_personal_equipment_3_ge.configure(text=str(personal_equipment_3_ge))
        self.label_personal_equipment_3_to_hit.configure(text=str(personal_equipment_3_to_hit))
        self.label_personal_equipment_3_damage.configure(text=str(personal_equipment_3_damage))
        self.label_personal_equipment_3_shots.configure(text=str(personal_equipment_3_shots))
        self.label_personal_equipment_3_cps.configure(text=str(personal_equipment_3_cps))
        self.label_personal_equipment_3_wps.configure(text=str(personal_equipment_3_wps))
        self.label_personal_equipment_3_notes.configure(text=str(personal_equipment_3_notes))
        self.recalculate()

    ######################################################################
    # Personal Equipment Row 4 processing here                           #
    ######################################################################
    def add_labels_buttons_personal_equipment_4_canvas(self, canvas_type):
        up_arrow = "\u2191"
        down_arrow = "\u2193"

        self.label_hidden_personal_equipment_4_name   = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_4_cost   = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_4_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_4_ge     = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_4_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_4_damage = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_4_shots  = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_4_cps    = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_4_wps    = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_4_notes  = tk.Label(canvas_type, text="0", anchor="w")

        self.label_personal_equipment_4_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_4_cost.grid(column=self.grid_col_cost,row=self.grid_row_personal_equipment_4, sticky="w")
        self.label_personal_equipment_4_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_4_weight.grid(column=self.grid_col_weight ,row=self.grid_row_personal_equipment_4, sticky="w")
        self.label_personal_equipment_4_ge  = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_4_ge.grid(column=self.grid_col_spaces,row=self.grid_row_personal_equipment_4, sticky="w")
        self.label_personal_equipment_4_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_4_to_hit.grid(column=self.grid_col_dp,row=self.grid_row_personal_equipment_4, sticky="w")
        self.label_personal_equipment_4_damage = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_4_damage.grid(column=self.grid_col_max_weight,row=self.grid_row_personal_equipment_4, sticky="w")
        self.label_personal_equipment_4_shots = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_4_shots.grid(column=self.grid_col_power_factors,row=self.grid_row_personal_equipment_4, sticky="w")
        self.label_personal_equipment_4_cps = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_4_cps.grid(column=self.grid_col_base_mpg,row=self.grid_row_personal_equipment_4, sticky="w")
        self.label_personal_equipment_4_wps = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_4_wps.grid(column=self.grid_col_test_track,row=self.grid_row_personal_equipment_4, sticky="w")
        self.label_personal_equipment_4_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_4_notes.grid(column=self.grid_col_test_track_numbers,row=self.grid_row_personal_equipment_4, sticky="w")

        self.var_personal_equipment_4_qty = tk.IntVar()
        self.entry_personal_equipment_4_qty = ttk.Entry(canvas_type, textvariable=self.var_personal_equipment_4_qty, width=3)
        self.entry_personal_equipment_4_qty.grid(column=self.grid_col_qty, row=self.grid_row_personal_equipment_4, sticky="w")

        self.button_personal_equipment_4_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_personal_equipment_4_qty_up)
        self.button_personal_equipment_4_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_personal_equipment_4, sticky="w")
        self.button_personal_equipment_4_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_personal_equipment_4_qty_down)
        self.button_personal_equipment_4_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_personal_equipment_4, sticky="w")

    def add_dropdown_personal_equipment_4_canvas(self, canvas_type):
        self.selected_personal_equipment_4 = tk.StringVar()
        self.selected_personal_equipment_4.set("Personal Equipment")
        options = self.get_personal_equipment_options()
        # Create the dropdown widget
        self.personal_equipment_4_dropdown = ttk.OptionMenu(canvas_type, self.selected_personal_equipment_4, "Personal Equipment", *options) #filled elsewhere
        self.personal_equipment_4_dropdown.grid(column=self.grid_col_item, row=self.grid_row_personal_equipment_4, sticky="w")
        self.selected_personal_equipment_4.trace_add("write", self.on_select_personal_equipment_4)

    def on_select_personal_equipment_4(self, *args):
        selected_value = self.selected_personal_equipment_4.get()
        for entry in self.personal_equipment_list: #use the same self.personal_equipment_list for every personal_equipment dropdown
            personal_equipment_name: str = entry.get("Item")
            if selected_value == personal_equipment_name:
                personal_equipment_cost:   str = entry.get("Cost")
                personal_equipment_ge:     str = entry.get("GE")
                personal_equipment_weight: str = entry.get("Weight")
                personal_equipment_to_hit: str = entry.get("To-Hit")
                personal_equipment_damage: str = entry.get("Damage")
                personal_equipment_shots:  str = entry.get("Shots")
                personal_equipment_cps:    str = entry.get("CPS")
                personal_equipemnt_wps:    str = entry.get("WPS")
                personal_equipment_notes:  str = entry.get("Notes")

                self.label_hidden_personal_equipment_4_name.configure(text=str(personal_equipment_name))
                self.label_hidden_personal_equipment_4_cost.configure(text=str(personal_equipment_cost))
                self.label_hidden_personal_equipment_4_ge.configure(text=str(personal_equipment_ge))
                self.label_hidden_personal_equipment_4_weight.configure(text=str(personal_equipment_weight))
                self.label_hidden_personal_equipment_4_to_hit.configure(text=str(personal_equipment_to_hit))
                self.label_hidden_personal_equipment_4_damage.configure(text=str(personal_equipment_damage))
                self.label_hidden_personal_equipment_4_shots.configure(text=str(personal_equipment_shots))
                self.label_hidden_personal_equipment_4_cps.configure(text=str(personal_equipment_cps))
                self.label_hidden_personal_equipment_4_wps.configure(text=str(personal_equipemnt_wps))
                self.label_hidden_personal_equipment_4_notes.configure(text=str(personal_equipment_notes))
                self.personal_equipment_qty_4_update()
                return

    def on_button_personal_equipment_4_qty_up(self, *args):
        personal_equipment_4_qty = self.var_personal_equipment_4_qty.get()
        personal_equipment_4_qty = personal_equipment_4_qty + 1
        self.var_personal_equipment_4_qty.set(value=personal_equipment_4_qty)
        self.personal_equipment_qty_4_update()

    def on_button_personal_equipment_4_qty_down(self, *args):
        personal_equipment_4_qty = self.var_personal_equipment_4_qty.get()
        personal_equipment_4_qty = max(personal_equipment_4_qty - 1, 0)
        self.var_personal_equipment_4_qty.set(value=personal_equipment_4_qty)
        self.personal_equipment_qty_4_update()

    def personal_equipment_qty_4_update(self):
        personal_equipment_4_qty = self.var_personal_equipment_4_qty.get()

        personal_equipment_4_cost        = int(self.label_hidden_personal_equipment_4_cost.cget("text"))
        if self.age_value == 1: #use alternate grenade equivalent settings, set weight to zero
            personal_equipment_4_weight = 0
        else:
            personal_equipment_4_weight      = int(self.label_hidden_personal_equipment_4_weight.cget("text"))
        personal_equipment_4_ge:     str = self.label_hidden_personal_equipment_4_ge.cget("text")
        personal_equipment_4_to_hit: str = self.label_hidden_personal_equipment_4_to_hit.cget("text")
        personal_equipment_4_damage: str = self.label_hidden_personal_equipment_4_damage.cget("text")
        personal_equipment_4_shots:  str = self.label_hidden_personal_equipment_4_shots.cget("text")
        personal_equipment_4_cps:    str = self.label_hidden_personal_equipment_4_cps.cget("text")
        personal_equipment_4_wps:    str = self.label_hidden_personal_equipment_4_wps.cget("text")
        personal_equipment_4_notes:  str = self.label_hidden_personal_equipment_4_notes.cget("text")

        self.label_personal_equipment_4_cost.configure(text=str(personal_equipment_4_cost * personal_equipment_4_qty))
        self.label_personal_equipment_4_weight.configure(text=str(personal_equipment_4_weight * personal_equipment_4_qty))
        self.label_personal_equipment_4_ge.configure(text=str(personal_equipment_4_ge))
        self.label_personal_equipment_4_to_hit.configure(text=str(personal_equipment_4_to_hit))
        self.label_personal_equipment_4_damage.configure(text=str(personal_equipment_4_damage))
        self.label_personal_equipment_4_shots.configure(text=str(personal_equipment_4_shots))
        self.label_personal_equipment_4_cps.configure(text=str(personal_equipment_4_cps))
        self.label_personal_equipment_4_wps.configure(text=str(personal_equipment_4_wps))
        self.label_personal_equipment_4_notes.configure(text=str(personal_equipment_4_notes))
        self.recalculate()

    ######################################################################
    # Personal Equipment Row 5 processing here                           #
    ######################################################################
    def add_labels_buttons_personal_equipment_5_canvas(self, canvas_type):
        up_arrow = "\u2191"
        down_arrow = "\u2193"

        self.label_hidden_personal_equipment_5_name   = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_5_cost   = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_5_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_5_ge     = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_5_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_5_damage = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_5_shots  = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_5_cps    = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_5_wps    = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_5_notes  = tk.Label(canvas_type, text="0", anchor="w")

        self.label_personal_equipment_5_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_5_cost.grid(column=self.grid_col_cost,row=self.grid_row_personal_equipment_5, sticky="w")
        self.label_personal_equipment_5_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_5_weight.grid(column=self.grid_col_weight ,row=self.grid_row_personal_equipment_5, sticky="w")
        self.label_personal_equipment_5_ge  = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_5_ge.grid(column=self.grid_col_spaces,row=self.grid_row_personal_equipment_5, sticky="w")
        self.label_personal_equipment_5_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_5_to_hit.grid(column=self.grid_col_dp,row=self.grid_row_personal_equipment_5, sticky="w")
        self.label_personal_equipment_5_damage = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_5_damage.grid(column=self.grid_col_max_weight,row=self.grid_row_personal_equipment_5, sticky="w")
        self.label_personal_equipment_5_shots = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_5_shots.grid(column=self.grid_col_power_factors,row=self.grid_row_personal_equipment_5, sticky="w")
        self.label_personal_equipment_5_cps = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_5_cps.grid(column=self.grid_col_base_mpg,row=self.grid_row_personal_equipment_5, sticky="w")
        self.label_personal_equipment_5_wps = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_5_wps.grid(column=self.grid_col_test_track,row=self.grid_row_personal_equipment_5, sticky="w")
        self.label_personal_equipment_5_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_5_notes.grid(column=self.grid_col_test_track_numbers,row=self.grid_row_personal_equipment_5, sticky="w")

        self.var_personal_equipment_5_qty = tk.IntVar()
        self.entry_personal_equipment_5_qty = ttk.Entry(canvas_type, textvariable=self.var_personal_equipment_5_qty, width=3)
        self.entry_personal_equipment_5_qty.grid(column=self.grid_col_qty, row=self.grid_row_personal_equipment_5, sticky="w")

        self.button_personal_equipment_5_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_personal_equipment_5_qty_up)
        self.button_personal_equipment_5_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_personal_equipment_5, sticky="w")
        self.button_personal_equipment_5_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_personal_equipment_5_qty_down)
        self.button_personal_equipment_5_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_personal_equipment_5, sticky="w")

    def add_dropdown_personal_equipment_5_canvas(self, canvas_type):
        self.selected_personal_equipment_5 = tk.StringVar()
        self.selected_personal_equipment_5.set("Personal Equipment")
        options = self.get_personal_equipment_options()
        # Create the dropdown widget
        self.personal_equipment_5_dropdown = ttk.OptionMenu(canvas_type, self.selected_personal_equipment_5, "Personal Equipment", *options) #filled elsewhere
        self.personal_equipment_5_dropdown.grid(column=self.grid_col_item, row=self.grid_row_personal_equipment_5, sticky="w")
        self.selected_personal_equipment_5.trace_add("write", self.on_select_personal_equipment_5)

    def on_select_personal_equipment_5(self, *args):
        selected_value = self.selected_personal_equipment_5.get()
        for entry in self.personal_equipment_list: #use the same self.personal_equipment_list for every personal_equipment dropdown
            personal_equipment_name: str = entry.get("Item")
            if selected_value == personal_equipment_name:
                personal_equipment_cost:   str = entry.get("Cost")
                personal_equipment_ge:     str = entry.get("GE")
                personal_equipment_weight: str = entry.get("Weight")
                personal_equipment_to_hit: str = entry.get("To-Hit")
                personal_equipment_damage: str = entry.get("Damage")
                personal_equipment_shots:  str = entry.get("Shots")
                personal_equipment_cps:    str = entry.get("CPS")
                personal_equipemnt_wps:    str = entry.get("WPS")
                personal_equipment_notes:  str = entry.get("Notes")

                self.label_hidden_personal_equipment_5_name.configure(text=str(personal_equipment_name))
                self.label_hidden_personal_equipment_5_cost.configure(text=str(personal_equipment_cost))
                self.label_hidden_personal_equipment_5_ge.configure(text=str(personal_equipment_ge))
                self.label_hidden_personal_equipment_5_weight.configure(text=str(personal_equipment_weight))
                self.label_hidden_personal_equipment_5_to_hit.configure(text=str(personal_equipment_to_hit))
                self.label_hidden_personal_equipment_5_damage.configure(text=str(personal_equipment_damage))
                self.label_hidden_personal_equipment_5_shots.configure(text=str(personal_equipment_shots))
                self.label_hidden_personal_equipment_5_cps.configure(text=str(personal_equipment_cps))
                self.label_hidden_personal_equipment_5_wps.configure(text=str(personal_equipemnt_wps))
                self.label_hidden_personal_equipment_5_notes.configure(text=str(personal_equipment_notes))
                self.personal_equipment_qty_5_update()
                return

    def on_button_personal_equipment_5_qty_up(self, *args):
        personal_equipment_5_qty = self.var_personal_equipment_5_qty.get()
        personal_equipment_5_qty = personal_equipment_5_qty + 1
        self.var_personal_equipment_5_qty.set(value=personal_equipment_5_qty)
        self.personal_equipment_qty_5_update()

    def on_button_personal_equipment_5_qty_down(self, *args):
        personal_equipment_5_qty = self.var_personal_equipment_5_qty.get()
        personal_equipment_5_qty = max(personal_equipment_5_qty - 1, 0)
        self.var_personal_equipment_5_qty.set(value=personal_equipment_5_qty)
        self.personal_equipment_qty_5_update()

    def personal_equipment_qty_5_update(self):
        personal_equipment_5_qty = self.var_personal_equipment_5_qty.get()

        personal_equipment_5_cost        = int(self.label_hidden_personal_equipment_5_cost.cget("text"))
        if self.age_value == 1: #use alternate grenade equivalent settings, set weight to zero
            personal_equipment_5_weight = 0
        else:
            personal_equipment_5_weight      = int(self.label_hidden_personal_equipment_5_weight.cget("text"))
        personal_equipment_5_ge:     str = self.label_hidden_personal_equipment_5_ge.cget("text")
        personal_equipment_5_to_hit: str = self.label_hidden_personal_equipment_5_to_hit.cget("text")
        personal_equipment_5_damage: str = self.label_hidden_personal_equipment_5_damage.cget("text")
        personal_equipment_5_shots:  str = self.label_hidden_personal_equipment_5_shots.cget("text")
        personal_equipment_5_cps:    str = self.label_hidden_personal_equipment_5_cps.cget("text")
        personal_equipment_5_wps:    str = self.label_hidden_personal_equipment_5_wps.cget("text")
        personal_equipment_5_notes:  str = self.label_hidden_personal_equipment_5_notes.cget("text")

        self.label_personal_equipment_5_cost.configure(text=str(personal_equipment_5_cost * personal_equipment_5_qty))
        self.label_personal_equipment_5_weight.configure(text=str(personal_equipment_5_weight * personal_equipment_5_qty))
        self.label_personal_equipment_5_ge.configure(text=str(personal_equipment_5_ge))
        self.label_personal_equipment_5_to_hit.configure(text=str(personal_equipment_5_to_hit))
        self.label_personal_equipment_5_damage.configure(text=str(personal_equipment_5_damage))
        self.label_personal_equipment_5_shots.configure(text=str(personal_equipment_5_shots))
        self.label_personal_equipment_5_cps.configure(text=str(personal_equipment_5_cps))
        self.label_personal_equipment_5_wps.configure(text=str(personal_equipment_5_wps))
        self.label_personal_equipment_5_notes.configure(text=str(personal_equipment_5_notes))
        self.recalculate()

    ######################################################################
    # Personal Equipment Row 6 processing here                           #
    ######################################################################
    def add_labels_buttons_personal_equipment_6_canvas(self, canvas_type):
        up_arrow = "\u2191"
        down_arrow = "\u2193"

        self.label_hidden_personal_equipment_6_name   = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_6_cost   = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_6_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_6_ge     = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_6_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_6_damage = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_6_shots  = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_6_cps    = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_6_wps    = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_6_notes  = tk.Label(canvas_type, text="0", anchor="w")

        self.label_personal_equipment_6_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_6_cost.grid(column=self.grid_col_cost,row=self.grid_row_personal_equipment_6, sticky="w")
        self.label_personal_equipment_6_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_6_weight.grid(column=self.grid_col_weight ,row=self.grid_row_personal_equipment_6, sticky="w")
        self.label_personal_equipment_6_ge  = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_6_ge.grid(column=self.grid_col_spaces,row=self.grid_row_personal_equipment_6, sticky="w")
        self.label_personal_equipment_6_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_6_to_hit.grid(column=self.grid_col_dp,row=self.grid_row_personal_equipment_6, sticky="w")
        self.label_personal_equipment_6_damage = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_6_damage.grid(column=self.grid_col_max_weight,row=self.grid_row_personal_equipment_6, sticky="w")
        self.label_personal_equipment_6_shots = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_6_shots.grid(column=self.grid_col_power_factors,row=self.grid_row_personal_equipment_6, sticky="w")
        self.label_personal_equipment_6_cps = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_6_cps.grid(column=self.grid_col_base_mpg,row=self.grid_row_personal_equipment_6, sticky="w")
        self.label_personal_equipment_6_wps = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_6_wps.grid(column=self.grid_col_test_track,row=self.grid_row_personal_equipment_6, sticky="w")
        self.label_personal_equipment_6_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_6_notes.grid(column=self.grid_col_test_track_numbers,row=self.grid_row_personal_equipment_6, sticky="w")

        self.var_personal_equipment_6_qty = tk.IntVar()
        self.entry_personal_equipment_6_qty = ttk.Entry(canvas_type, textvariable=self.var_personal_equipment_6_qty, width=3)
        self.entry_personal_equipment_6_qty.grid(column=self.grid_col_qty, row=self.grid_row_personal_equipment_6, sticky="w")

        self.button_personal_equipment_6_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_personal_equipment_6_qty_up)
        self.button_personal_equipment_6_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_personal_equipment_6, sticky="w")
        self.button_personal_equipment_6_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_personal_equipment_6_qty_down)
        self.button_personal_equipment_6_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_personal_equipment_6, sticky="w")

    def add_dropdown_personal_equipment_6_canvas(self, canvas_type):
        self.selected_personal_equipment_6 = tk.StringVar()
        self.selected_personal_equipment_6.set("Personal Equipment")
        options = self.get_personal_equipment_options()
        # Create the dropdown widget
        self.personal_equipment_6_dropdown = ttk.OptionMenu(canvas_type, self.selected_personal_equipment_6, "Personal Equipment", *options) #filled elsewhere
        self.personal_equipment_6_dropdown.grid(column=self.grid_col_item, row=self.grid_row_personal_equipment_6, sticky="w")
        self.selected_personal_equipment_6.trace_add("write", self.on_select_personal_equipment_6)

    def on_select_personal_equipment_6(self, *args):
        selected_value = self.selected_personal_equipment_6.get()
        for entry in self.personal_equipment_list: #use the same self.personal_equipment_list for every personal_equipment dropdown
            personal_equipment_name: str = entry.get("Item")
            if selected_value == personal_equipment_name:
                personal_equipment_cost:   str = entry.get("Cost")
                personal_equipment_ge:     str = entry.get("GE")
                personal_equipment_weight: str = entry.get("Weight")
                personal_equipment_to_hit: str = entry.get("To-Hit")
                personal_equipment_damage: str = entry.get("Damage")
                personal_equipment_shots:  str = entry.get("Shots")
                personal_equipment_cps:    str = entry.get("CPS")
                personal_equipemnt_wps:    str = entry.get("WPS")
                personal_equipment_notes:  str = entry.get("Notes")

                self.label_hidden_personal_equipment_6_name.configure(text=str(personal_equipment_name))
                self.label_hidden_personal_equipment_6_cost.configure(text=str(personal_equipment_cost))
                self.label_hidden_personal_equipment_6_ge.configure(text=str(personal_equipment_ge))
                self.label_hidden_personal_equipment_6_weight.configure(text=str(personal_equipment_weight))
                self.label_hidden_personal_equipment_6_to_hit.configure(text=str(personal_equipment_to_hit))
                self.label_hidden_personal_equipment_6_damage.configure(text=str(personal_equipment_damage))
                self.label_hidden_personal_equipment_6_shots.configure(text=str(personal_equipment_shots))
                self.label_hidden_personal_equipment_6_cps.configure(text=str(personal_equipment_cps))
                self.label_hidden_personal_equipment_6_wps.configure(text=str(personal_equipemnt_wps))
                self.label_hidden_personal_equipment_6_notes.configure(text=str(personal_equipment_notes))
                self.personal_equipment_qty_6_update()
                return

    def on_button_personal_equipment_6_qty_up(self, *args):
        personal_equipment_6_qty = self.var_personal_equipment_6_qty.get()
        personal_equipment_6_qty = personal_equipment_6_qty + 1
        self.var_personal_equipment_6_qty.set(value=personal_equipment_6_qty)
        self.personal_equipment_qty_6_update()

    def on_button_personal_equipment_6_qty_down(self, *args):
        personal_equipment_6_qty = self.var_personal_equipment_6_qty.get()
        personal_equipment_6_qty = max(personal_equipment_6_qty - 1, 0)
        self.var_personal_equipment_6_qty.set(value=personal_equipment_6_qty)
        self.personal_equipment_qty_6_update()

    def personal_equipment_qty_6_update(self):
        personal_equipment_6_qty = self.var_personal_equipment_6_qty.get()

        personal_equipment_6_cost        = int(self.label_hidden_personal_equipment_6_cost.cget("text"))
        if self.age_value == 1: #use alternate grenade equivalent settings, set weight to zero
            personal_equipment_6_weight = 0
        else:
            personal_equipment_6_weight      = int(self.label_hidden_personal_equipment_6_weight.cget("text"))
        personal_equipment_6_ge:     str = self.label_hidden_personal_equipment_6_ge.cget("text")
        personal_equipment_6_to_hit: str = self.label_hidden_personal_equipment_6_to_hit.cget("text")
        personal_equipment_6_damage: str = self.label_hidden_personal_equipment_6_damage.cget("text")
        personal_equipment_6_shots:  str = self.label_hidden_personal_equipment_6_shots.cget("text")
        personal_equipment_6_cps:    str = self.label_hidden_personal_equipment_6_cps.cget("text")
        personal_equipment_6_wps:    str = self.label_hidden_personal_equipment_6_wps.cget("text")
        personal_equipment_6_notes:  str = self.label_hidden_personal_equipment_6_notes.cget("text")

        self.label_personal_equipment_6_cost.configure(text=str(personal_equipment_6_cost * personal_equipment_6_qty))
        self.label_personal_equipment_6_weight.configure(text=str(personal_equipment_6_weight * personal_equipment_6_qty))
        self.label_personal_equipment_6_ge.configure(text=str(personal_equipment_6_ge))
        self.label_personal_equipment_6_to_hit.configure(text=str(personal_equipment_6_to_hit))
        self.label_personal_equipment_6_damage.configure(text=str(personal_equipment_6_damage))
        self.label_personal_equipment_6_shots.configure(text=str(personal_equipment_6_shots))
        self.label_personal_equipment_6_cps.configure(text=str(personal_equipment_6_cps))
        self.label_personal_equipment_6_wps.configure(text=str(personal_equipment_6_wps))
        self.label_personal_equipment_6_notes.configure(text=str(personal_equipment_6_notes))
        self.recalculate()

    ######################################################################
    # Personal Equipment Row 7 processing here                           #
    ######################################################################
    def add_labels_buttons_personal_equipment_7_canvas(self, canvas_type):
        up_arrow = "\u2191"
        down_arrow = "\u2193"

        self.label_hidden_personal_equipment_7_name   = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_7_cost   = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_7_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_7_ge     = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_7_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_7_damage = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_7_shots  = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_7_cps    = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_7_wps    = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_7_notes  = tk.Label(canvas_type, text="0", anchor="w")

        self.label_personal_equipment_7_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_7_cost.grid(column=self.grid_col_cost,row=self.grid_row_personal_equipment_7, sticky="w")
        self.label_personal_equipment_7_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_7_weight.grid(column=self.grid_col_weight ,row=self.grid_row_personal_equipment_7, sticky="w")
        self.label_personal_equipment_7_ge  = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_7_ge.grid(column=self.grid_col_spaces,row=self.grid_row_personal_equipment_7, sticky="w")
        self.label_personal_equipment_7_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_7_to_hit.grid(column=self.grid_col_dp,row=self.grid_row_personal_equipment_7, sticky="w")
        self.label_personal_equipment_7_damage = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_7_damage.grid(column=self.grid_col_max_weight,row=self.grid_row_personal_equipment_7, sticky="w")
        self.label_personal_equipment_7_shots = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_7_shots.grid(column=self.grid_col_power_factors,row=self.grid_row_personal_equipment_7, sticky="w")
        self.label_personal_equipment_7_cps = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_7_cps.grid(column=self.grid_col_base_mpg,row=self.grid_row_personal_equipment_7, sticky="w")
        self.label_personal_equipment_7_wps = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_7_wps.grid(column=self.grid_col_test_track,row=self.grid_row_personal_equipment_7, sticky="w")
        self.label_personal_equipment_7_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_7_notes.grid(column=self.grid_col_test_track_numbers,row=self.grid_row_personal_equipment_7, sticky="w")

        self.var_personal_equipment_7_qty = tk.IntVar()
        self.entry_personal_equipment_7_qty = ttk.Entry(canvas_type, textvariable=self.var_personal_equipment_7_qty, width=3)
        self.entry_personal_equipment_7_qty.grid(column=self.grid_col_qty, row=self.grid_row_personal_equipment_7, sticky="w")

        self.button_personal_equipment_7_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_personal_equipment_7_qty_up)
        self.button_personal_equipment_7_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_personal_equipment_7, sticky="w")
        self.button_personal_equipment_7_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_personal_equipment_7_qty_down)
        self.button_personal_equipment_7_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_personal_equipment_7, sticky="w")

    def add_dropdown_personal_equipment_7_canvas(self, canvas_type):
        self.selected_personal_equipment_7 = tk.StringVar()
        self.selected_personal_equipment_7.set("Personal Equipment")
        options = self.get_personal_equipment_options()
        # Create the dropdown widget
        self.personal_equipment_7_dropdown = ttk.OptionMenu(canvas_type, self.selected_personal_equipment_7, "Personal Equipment", *options) #filled elsewhere
        self.personal_equipment_7_dropdown.grid(column=self.grid_col_item, row=self.grid_row_personal_equipment_7, sticky="w")
        self.selected_personal_equipment_7.trace_add("write", self.on_select_personal_equipment_7)

    def on_select_personal_equipment_7(self, *args):
        selected_value = self.selected_personal_equipment_7.get()
        for entry in self.personal_equipment_list: #use the same self.personal_equipment_list for every personal_equipment dropdown
            personal_equipment_name: str = entry.get("Item")
            if selected_value == personal_equipment_name:
                personal_equipment_cost:   str = entry.get("Cost")
                personal_equipment_ge:     str = entry.get("GE")
                personal_equipment_weight: str = entry.get("Weight")
                personal_equipment_to_hit: str = entry.get("To-Hit")
                personal_equipment_damage: str = entry.get("Damage")
                personal_equipment_shots:  str = entry.get("Shots")
                personal_equipment_cps:    str = entry.get("CPS")
                personal_equipemnt_wps:    str = entry.get("WPS")
                personal_equipment_notes:  str = entry.get("Notes")

                self.label_hidden_personal_equipment_7_name.configure(text=str(personal_equipment_name))
                self.label_hidden_personal_equipment_7_cost.configure(text=str(personal_equipment_cost))
                self.label_hidden_personal_equipment_7_ge.configure(text=str(personal_equipment_ge))
                self.label_hidden_personal_equipment_7_weight.configure(text=str(personal_equipment_weight))
                self.label_hidden_personal_equipment_7_to_hit.configure(text=str(personal_equipment_to_hit))
                self.label_hidden_personal_equipment_7_damage.configure(text=str(personal_equipment_damage))
                self.label_hidden_personal_equipment_7_shots.configure(text=str(personal_equipment_shots))
                self.label_hidden_personal_equipment_7_cps.configure(text=str(personal_equipment_cps))
                self.label_hidden_personal_equipment_7_wps.configure(text=str(personal_equipemnt_wps))
                self.label_hidden_personal_equipment_7_notes.configure(text=str(personal_equipment_notes))
                self.personal_equipment_qty_7_update()
                return

    def on_button_personal_equipment_7_qty_up(self, *args):
        personal_equipment_7_qty = self.var_personal_equipment_7_qty.get()
        personal_equipment_7_qty = personal_equipment_7_qty + 1
        self.var_personal_equipment_7_qty.set(value=personal_equipment_7_qty)
        self.personal_equipment_qty_7_update()

    def on_button_personal_equipment_7_qty_down(self, *args):
        personal_equipment_7_qty = self.var_personal_equipment_7_qty.get()
        personal_equipment_7_qty = max(personal_equipment_7_qty - 1, 0)
        self.var_personal_equipment_7_qty.set(value=personal_equipment_7_qty)
        self.personal_equipment_qty_7_update()

    def personal_equipment_qty_7_update(self):
        personal_equipment_7_qty = self.var_personal_equipment_7_qty.get()

        personal_equipment_7_cost        = int(self.label_hidden_personal_equipment_7_cost.cget("text"))
        if self.age_value == 1: #use alternate grenade equivalent settings, set weight to zero
            personal_equipment_7_weight = 0
        else:
            personal_equipment_7_weight      = int(self.label_hidden_personal_equipment_7_weight.cget("text"))
        personal_equipment_7_ge:     str = self.label_hidden_personal_equipment_7_ge.cget("text")
        personal_equipment_7_to_hit: str = self.label_hidden_personal_equipment_7_to_hit.cget("text")
        personal_equipment_7_damage: str = self.label_hidden_personal_equipment_7_damage.cget("text")
        personal_equipment_7_shots:  str = self.label_hidden_personal_equipment_7_shots.cget("text")
        personal_equipment_7_cps:    str = self.label_hidden_personal_equipment_7_cps.cget("text")
        personal_equipment_7_wps:    str = self.label_hidden_personal_equipment_7_wps.cget("text")
        personal_equipment_7_notes:  str = self.label_hidden_personal_equipment_7_notes.cget("text")

        self.label_personal_equipment_7_cost.configure(text=str(personal_equipment_7_cost * personal_equipment_7_qty))
        self.label_personal_equipment_7_weight.configure(text=str(personal_equipment_7_weight * personal_equipment_7_qty))
        self.label_personal_equipment_7_ge.configure(text=str(personal_equipment_7_ge))
        self.label_personal_equipment_7_to_hit.configure(text=str(personal_equipment_7_to_hit))
        self.label_personal_equipment_7_damage.configure(text=str(personal_equipment_7_damage))
        self.label_personal_equipment_7_shots.configure(text=str(personal_equipment_7_shots))
        self.label_personal_equipment_7_cps.configure(text=str(personal_equipment_7_cps))
        self.label_personal_equipment_7_wps.configure(text=str(personal_equipment_7_wps))
        self.label_personal_equipment_7_notes.configure(text=str(personal_equipment_7_notes))
        self.recalculate()

    ######################################################################
    # Personal Equipment Row 8 processing here                           #
    ######################################################################
    def add_labels_buttons_personal_equipment_8_canvas(self, canvas_type):
        up_arrow = "\u2191"
        down_arrow = "\u2193"

        self.label_hidden_personal_equipment_8_name   = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_8_cost   = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_8_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_8_ge     = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_8_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_8_damage = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_8_shots  = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_8_cps    = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_8_wps    = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_8_notes  = tk.Label(canvas_type, text="0", anchor="w")

        self.label_personal_equipment_8_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_8_cost.grid(column=self.grid_col_cost,row=self.grid_row_personal_equipment_8, sticky="w")
        self.label_personal_equipment_8_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_8_weight.grid(column=self.grid_col_weight ,row=self.grid_row_personal_equipment_8, sticky="w")
        self.label_personal_equipment_8_ge  = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_8_ge.grid(column=self.grid_col_spaces,row=self.grid_row_personal_equipment_8, sticky="w")
        self.label_personal_equipment_8_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_8_to_hit.grid(column=self.grid_col_dp,row=self.grid_row_personal_equipment_8, sticky="w")
        self.label_personal_equipment_8_damage = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_8_damage.grid(column=self.grid_col_max_weight,row=self.grid_row_personal_equipment_8, sticky="w")
        self.label_personal_equipment_8_shots = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_8_shots.grid(column=self.grid_col_power_factors,row=self.grid_row_personal_equipment_8, sticky="w")
        self.label_personal_equipment_8_cps = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_8_cps.grid(column=self.grid_col_base_mpg,row=self.grid_row_personal_equipment_8, sticky="w")
        self.label_personal_equipment_8_wps = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_8_wps.grid(column=self.grid_col_test_track,row=self.grid_row_personal_equipment_8, sticky="w")
        self.label_personal_equipment_8_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_8_notes.grid(column=self.grid_col_test_track_numbers,row=self.grid_row_personal_equipment_8, sticky="w")

        self.var_personal_equipment_8_qty = tk.IntVar()
        self.entry_personal_equipment_8_qty = ttk.Entry(canvas_type, textvariable=self.var_personal_equipment_8_qty, width=3)
        self.entry_personal_equipment_8_qty.grid(column=self.grid_col_qty, row=self.grid_row_personal_equipment_8, sticky="w")

        self.button_personal_equipment_8_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_personal_equipment_8_qty_up)
        self.button_personal_equipment_8_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_personal_equipment_8, sticky="w")
        self.button_personal_equipment_8_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_personal_equipment_8_qty_down)
        self.button_personal_equipment_8_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_personal_equipment_8, sticky="w")

    def add_dropdown_personal_equipment_8_canvas(self, canvas_type):
        self.selected_personal_equipment_8 = tk.StringVar()
        self.selected_personal_equipment_8.set("Personal Equipment")
        options = self.get_personal_equipment_options()
        # Create the dropdown widget
        self.personal_equipment_8_dropdown = ttk.OptionMenu(canvas_type, self.selected_personal_equipment_8, "Personal Equipment", *options) #filled elsewhere
        self.personal_equipment_8_dropdown.grid(column=self.grid_col_item, row=self.grid_row_personal_equipment_8, sticky="w")
        self.selected_personal_equipment_8.trace_add("write", self.on_select_personal_equipment_8)

    def on_select_personal_equipment_8(self, *args):
        selected_value = self.selected_personal_equipment_8.get()
        for entry in self.personal_equipment_list: #use the same self.personal_equipment_list for every personal_equipment dropdown
            personal_equipment_name: str = entry.get("Item")
            if selected_value == personal_equipment_name:
                personal_equipment_cost:   str = entry.get("Cost")
                personal_equipment_ge:     str = entry.get("GE")
                personal_equipment_weight: str = entry.get("Weight")
                personal_equipment_to_hit: str = entry.get("To-Hit")
                personal_equipment_damage: str = entry.get("Damage")
                personal_equipment_shots:  str = entry.get("Shots")
                personal_equipment_cps:    str = entry.get("CPS")
                personal_equipemnt_wps:    str = entry.get("WPS")
                personal_equipment_notes:  str = entry.get("Notes")

                self.label_hidden_personal_equipment_8_name.configure(text=str(personal_equipment_name))
                self.label_hidden_personal_equipment_8_cost.configure(text=str(personal_equipment_cost))
                self.label_hidden_personal_equipment_8_ge.configure(text=str(personal_equipment_ge))
                self.label_hidden_personal_equipment_8_weight.configure(text=str(personal_equipment_weight))
                self.label_hidden_personal_equipment_8_to_hit.configure(text=str(personal_equipment_to_hit))
                self.label_hidden_personal_equipment_8_damage.configure(text=str(personal_equipment_damage))
                self.label_hidden_personal_equipment_8_shots.configure(text=str(personal_equipment_shots))
                self.label_hidden_personal_equipment_8_cps.configure(text=str(personal_equipment_cps))
                self.label_hidden_personal_equipment_8_wps.configure(text=str(personal_equipemnt_wps))
                self.label_hidden_personal_equipment_8_notes.configure(text=str(personal_equipment_notes))
                self.personal_equipment_qty_8_update()
                return

    def on_button_personal_equipment_8_qty_up(self, *args):
        personal_equipment_8_qty = self.var_personal_equipment_8_qty.get()
        personal_equipment_8_qty = personal_equipment_8_qty + 1
        self.var_personal_equipment_8_qty.set(value=personal_equipment_8_qty)
        self.personal_equipment_qty_8_update()

    def on_button_personal_equipment_8_qty_down(self, *args):
        personal_equipment_8_qty = self.var_personal_equipment_8_qty.get()
        personal_equipment_8_qty = max(personal_equipment_8_qty - 1, 0)
        self.var_personal_equipment_8_qty.set(value=personal_equipment_8_qty)
        self.personal_equipment_qty_8_update()

    def personal_equipment_qty_8_update(self):
        personal_equipment_8_qty = self.var_personal_equipment_8_qty.get()

        personal_equipment_8_cost        = int(self.label_hidden_personal_equipment_8_cost.cget("text"))
        if self.age_value == 1: #use alternate grenade equivalent settings, set weight to zero
            personal_equipment_8_weight = 0
        else:
            personal_equipment_8_weight      = int(self.label_hidden_personal_equipment_8_weight.cget("text"))
        personal_equipment_8_ge:     str = self.label_hidden_personal_equipment_8_ge.cget("text")
        personal_equipment_8_to_hit: str = self.label_hidden_personal_equipment_8_to_hit.cget("text")
        personal_equipment_8_damage: str = self.label_hidden_personal_equipment_8_damage.cget("text")
        personal_equipment_8_shots:  str = self.label_hidden_personal_equipment_8_shots.cget("text")
        personal_equipment_8_cps:    str = self.label_hidden_personal_equipment_8_cps.cget("text")
        personal_equipment_8_wps:    str = self.label_hidden_personal_equipment_8_wps.cget("text")
        personal_equipment_8_notes:  str = self.label_hidden_personal_equipment_8_notes.cget("text")

        self.label_personal_equipment_8_cost.configure(text=str(personal_equipment_8_cost * personal_equipment_8_qty))
        self.label_personal_equipment_8_weight.configure(text=str(personal_equipment_8_weight * personal_equipment_8_qty))
        self.label_personal_equipment_8_ge.configure(text=str(personal_equipment_8_ge))
        self.label_personal_equipment_8_to_hit.configure(text=str(personal_equipment_8_to_hit))
        self.label_personal_equipment_8_damage.configure(text=str(personal_equipment_8_damage))
        self.label_personal_equipment_8_shots.configure(text=str(personal_equipment_8_shots))
        self.label_personal_equipment_8_cps.configure(text=str(personal_equipment_8_cps))
        self.label_personal_equipment_8_wps.configure(text=str(personal_equipment_8_wps))
        self.label_personal_equipment_8_notes.configure(text=str(personal_equipment_8_notes))
        self.recalculate()

    ######################################################################
    # Personal Equipment Row 9 processing here                           #
    ######################################################################
    def add_labels_buttons_personal_equipment_9_canvas(self, canvas_type):
        up_arrow = "\u2191"
        down_arrow = "\u2193"

        self.label_hidden_personal_equipment_9_name   = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_9_cost   = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_9_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_9_ge     = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_9_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_9_damage = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_9_shots  = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_9_cps    = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_9_wps    = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_9_notes  = tk.Label(canvas_type, text="0", anchor="w")

        self.label_personal_equipment_9_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_9_cost.grid(column=self.grid_col_cost,row=self.grid_row_personal_equipment_9, sticky="w")
        self.label_personal_equipment_9_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_9_weight.grid(column=self.grid_col_weight ,row=self.grid_row_personal_equipment_9, sticky="w")
        self.label_personal_equipment_9_ge  = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_9_ge.grid(column=self.grid_col_spaces,row=self.grid_row_personal_equipment_9, sticky="w")
        self.label_personal_equipment_9_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_9_to_hit.grid(column=self.grid_col_dp,row=self.grid_row_personal_equipment_9, sticky="w")
        self.label_personal_equipment_9_damage = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_9_damage.grid(column=self.grid_col_max_weight,row=self.grid_row_personal_equipment_9, sticky="w")
        self.label_personal_equipment_9_shots = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_9_shots.grid(column=self.grid_col_power_factors,row=self.grid_row_personal_equipment_9, sticky="w")
        self.label_personal_equipment_9_cps = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_9_cps.grid(column=self.grid_col_base_mpg,row=self.grid_row_personal_equipment_9, sticky="w")
        self.label_personal_equipment_9_wps = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_9_wps.grid(column=self.grid_col_test_track,row=self.grid_row_personal_equipment_9, sticky="w")
        self.label_personal_equipment_9_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_9_notes.grid(column=self.grid_col_test_track_numbers,row=self.grid_row_personal_equipment_9, sticky="w")

        self.var_personal_equipment_9_qty = tk.IntVar()
        self.entry_personal_equipment_9_qty = ttk.Entry(canvas_type, textvariable=self.var_personal_equipment_9_qty, width=3)
        self.entry_personal_equipment_9_qty.grid(column=self.grid_col_qty, row=self.grid_row_personal_equipment_9, sticky="w")

        self.button_personal_equipment_9_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_personal_equipment_9_qty_up)
        self.button_personal_equipment_9_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_personal_equipment_9, sticky="w")
        self.button_personal_equipment_9_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_personal_equipment_9_qty_down)
        self.button_personal_equipment_9_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_personal_equipment_9, sticky="w")

    def add_dropdown_personal_equipment_9_canvas(self, canvas_type):
        self.selected_personal_equipment_9 = tk.StringVar()
        self.selected_personal_equipment_9.set("Personal Equipment")
        options = self.get_personal_equipment_options()
        # Create the dropdown widget
        self.personal_equipment_9_dropdown = ttk.OptionMenu(canvas_type, self.selected_personal_equipment_9, "Personal Equipment", *options) #filled elsewhere
        self.personal_equipment_9_dropdown.grid(column=self.grid_col_item, row=self.grid_row_personal_equipment_9, sticky="w")
        self.selected_personal_equipment_9.trace_add("write", self.on_select_personal_equipment_9)

    def on_select_personal_equipment_9(self, *args):
        selected_value = self.selected_personal_equipment_9.get()
        for entry in self.personal_equipment_list: #use the same self.personal_equipment_list for every personal_equipment dropdown
            personal_equipment_name: str = entry.get("Item")
            if selected_value == personal_equipment_name:
                personal_equipment_cost:   str = entry.get("Cost")
                personal_equipment_ge:     str = entry.get("GE")
                personal_equipment_weight: str = entry.get("Weight")
                personal_equipment_to_hit: str = entry.get("To-Hit")
                personal_equipment_damage: str = entry.get("Damage")
                personal_equipment_shots:  str = entry.get("Shots")
                personal_equipment_cps:    str = entry.get("CPS")
                personal_equipemnt_wps:    str = entry.get("WPS")
                personal_equipment_notes:  str = entry.get("Notes")

                self.label_hidden_personal_equipment_9_name.configure(text=str(personal_equipment_name))
                self.label_hidden_personal_equipment_9_cost.configure(text=str(personal_equipment_cost))
                self.label_hidden_personal_equipment_9_ge.configure(text=str(personal_equipment_ge))
                self.label_hidden_personal_equipment_9_weight.configure(text=str(personal_equipment_weight))
                self.label_hidden_personal_equipment_9_to_hit.configure(text=str(personal_equipment_to_hit))
                self.label_hidden_personal_equipment_9_damage.configure(text=str(personal_equipment_damage))
                self.label_hidden_personal_equipment_9_shots.configure(text=str(personal_equipment_shots))
                self.label_hidden_personal_equipment_9_cps.configure(text=str(personal_equipment_cps))
                self.label_hidden_personal_equipment_9_wps.configure(text=str(personal_equipemnt_wps))
                self.label_hidden_personal_equipment_9_notes.configure(text=str(personal_equipment_notes))
                self.personal_equipment_qty_9_update()
                return

    def on_button_personal_equipment_9_qty_up(self, *args):
        personal_equipment_9_qty = self.var_personal_equipment_9_qty.get()
        personal_equipment_9_qty = personal_equipment_9_qty + 1
        self.var_personal_equipment_9_qty.set(value=personal_equipment_9_qty)
        self.personal_equipment_qty_9_update()

    def on_button_personal_equipment_9_qty_down(self, *args):
        personal_equipment_9_qty = self.var_personal_equipment_9_qty.get()
        personal_equipment_9_qty = max(personal_equipment_9_qty - 1, 0)
        self.var_personal_equipment_9_qty.set(value=personal_equipment_9_qty)
        self.personal_equipment_qty_9_update()

    def personal_equipment_qty_9_update(self):
        personal_equipment_9_qty = self.var_personal_equipment_9_qty.get()

        personal_equipment_9_cost        = int(self.label_hidden_personal_equipment_9_cost.cget("text"))
        if self.age_value == 1: #use alternate grenade equivalent settings, set weight to zero
            personal_equipment_9_weight = 0
        else:
            personal_equipment_9_weight      = int(self.label_hidden_personal_equipment_9_weight.cget("text"))
        personal_equipment_9_ge:     str = self.label_hidden_personal_equipment_9_ge.cget("text")
        personal_equipment_9_to_hit: str = self.label_hidden_personal_equipment_9_to_hit.cget("text")
        personal_equipment_9_damage: str = self.label_hidden_personal_equipment_9_damage.cget("text")
        personal_equipment_9_shots:  str = self.label_hidden_personal_equipment_9_shots.cget("text")
        personal_equipment_9_cps:    str = self.label_hidden_personal_equipment_9_cps.cget("text")
        personal_equipment_9_wps:    str = self.label_hidden_personal_equipment_9_wps.cget("text")
        personal_equipment_9_notes:  str = self.label_hidden_personal_equipment_9_notes.cget("text")

        self.label_personal_equipment_9_cost.configure(text=str(personal_equipment_9_cost * personal_equipment_9_qty))
        self.label_personal_equipment_9_weight.configure(text=str(personal_equipment_9_weight * personal_equipment_9_qty))
        self.label_personal_equipment_9_ge.configure(text=str(personal_equipment_9_ge))
        self.label_personal_equipment_9_to_hit.configure(text=str(personal_equipment_9_to_hit))
        self.label_personal_equipment_9_damage.configure(text=str(personal_equipment_9_damage))
        self.label_personal_equipment_9_shots.configure(text=str(personal_equipment_9_shots))
        self.label_personal_equipment_9_cps.configure(text=str(personal_equipment_9_cps))
        self.label_personal_equipment_9_wps.configure(text=str(personal_equipment_9_wps))
        self.label_personal_equipment_9_notes.configure(text=str(personal_equipment_9_notes))
        self.recalculate()

    ######################################################################
    # Personal Equipment Row 10 processing here                          #
    ######################################################################
    def add_labels_buttons_personal_equipment_10_canvas(self, canvas_type):
        up_arrow = "\u2191"
        down_arrow = "\u2193"

        self.label_hidden_personal_equipment_10_name   = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_10_cost   = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_10_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_10_ge     = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_10_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_10_damage = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_10_shots  = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_10_cps    = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_10_wps    = tk.Label(canvas_type, text="0", anchor="w")
        self.label_hidden_personal_equipment_10_notes  = tk.Label(canvas_type, text="0", anchor="w")

        self.label_personal_equipment_10_cost = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_10_cost.grid(column=self.grid_col_cost,row=self.grid_row_personal_equipment_10, sticky="w")
        self.label_personal_equipment_10_weight = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_10_weight.grid(column=self.grid_col_weight ,row=self.grid_row_personal_equipment_10, sticky="w")
        self.label_personal_equipment_10_ge  = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_10_ge.grid(column=self.grid_col_spaces,row=self.grid_row_personal_equipment_10, sticky="w")
        self.label_personal_equipment_10_to_hit = tk.Label(canvas_type, text="0", anchor="w")
        self.label_personal_equipment_10_to_hit.grid(column=self.grid_col_dp,row=self.grid_row_personal_equipment_10, sticky="w")
        self.label_personal_equipment_10_damage = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_10_damage.grid(column=self.grid_col_max_weight,row=self.grid_row_personal_equipment_10, sticky="w")
        self.label_personal_equipment_10_shots = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_10_shots.grid(column=self.grid_col_power_factors,row=self.grid_row_personal_equipment_10, sticky="w")
        self.label_personal_equipment_10_cps = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_10_cps.grid(column=self.grid_col_base_mpg,row=self.grid_row_personal_equipment_10, sticky="w")
        self.label_personal_equipment_10_wps = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_10_wps.grid(column=self.grid_col_test_track,row=self.grid_row_personal_equipment_10, sticky="w")
        self.label_personal_equipment_10_notes = tk.Label(canvas_type, text="", anchor="w")
        self.label_personal_equipment_10_notes.grid(column=self.grid_col_test_track_numbers,row=self.grid_row_personal_equipment_10, sticky="w")

        self.var_personal_equipment_10_qty = tk.IntVar()
        self.entry_personal_equipment_10_qty = ttk.Entry(canvas_type, textvariable=self.var_personal_equipment_10_qty, width=3)
        self.entry_personal_equipment_10_qty.grid(column=self.grid_col_qty, row=self.grid_row_personal_equipment_10, sticky="w")

        self.button_personal_equipment_10_qty_up = tk.Button(canvas_type, text=up_arrow, command=self.on_button_personal_equipment_10_qty_up)
        self.button_personal_equipment_10_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_personal_equipment_10, sticky="w")
        self.button_personal_equipment_10_qty_down = tk.Button(canvas_type, text=down_arrow, command=self.on_button_personal_equipment_10_qty_down)
        self.button_personal_equipment_10_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_personal_equipment_10, sticky="w")

    def add_dropdown_personal_equipment_10_canvas(self, canvas_type):
        self.selected_personal_equipment_10 = tk.StringVar()
        self.selected_personal_equipment_10.set("Personal Equipment")
        options = self.get_personal_equipment_options()
        # Create the dropdown widget
        self.personal_equipment_10_dropdown = ttk.OptionMenu(canvas_type, self.selected_personal_equipment_10, "Personal Equipment", *options) #filled elsewhere
        self.personal_equipment_10_dropdown.grid(column=self.grid_col_item, row=self.grid_row_personal_equipment_10, sticky="w")
        self.selected_personal_equipment_10.trace_add("write", self.on_select_personal_equipment_10)

    def on_select_personal_equipment_10(self, *args):
        selected_value = self.selected_personal_equipment_10.get()
        for entry in self.personal_equipment_list: #use the same self.personal_equipment_list for every personal_equipment dropdown
            personal_equipment_name: str = entry.get("Item")
            if selected_value == personal_equipment_name:
                personal_equipment_cost:   str = entry.get("Cost")
                personal_equipment_ge:     str = entry.get("GE")
                personal_equipment_weight: str = entry.get("Weight")
                personal_equipment_to_hit: str = entry.get("To-Hit")
                personal_equipment_damage: str = entry.get("Damage")
                personal_equipment_shots:  str = entry.get("Shots")
                personal_equipment_cps:    str = entry.get("CPS")
                personal_equipemnt_wps:    str = entry.get("WPS")
                personal_equipment_notes:  str = entry.get("Notes")

                self.label_hidden_personal_equipment_10_name.configure(text=str(personal_equipment_name))
                self.label_hidden_personal_equipment_10_cost.configure(text=str(personal_equipment_cost))
                self.label_hidden_personal_equipment_10_ge.configure(text=str(personal_equipment_ge))
                self.label_hidden_personal_equipment_10_weight.configure(text=str(personal_equipment_weight))
                self.label_hidden_personal_equipment_10_to_hit.configure(text=str(personal_equipment_to_hit))
                self.label_hidden_personal_equipment_10_damage.configure(text=str(personal_equipment_damage))
                self.label_hidden_personal_equipment_10_shots.configure(text=str(personal_equipment_shots))
                self.label_hidden_personal_equipment_10_cps.configure(text=str(personal_equipment_cps))
                self.label_hidden_personal_equipment_10_wps.configure(text=str(personal_equipemnt_wps))
                self.label_hidden_personal_equipment_10_notes.configure(text=str(personal_equipment_notes))
                self.personal_equipment_qty_10_update()
                return

    def on_button_personal_equipment_10_qty_up(self, *args):
        personal_equipment_10_qty = self.var_personal_equipment_10_qty.get()
        personal_equipment_10_qty = personal_equipment_10_qty + 1
        self.var_personal_equipment_10_qty.set(value=personal_equipment_10_qty)
        self.personal_equipment_qty_10_update()

    def on_button_personal_equipment_10_qty_down(self, *args):
        personal_equipment_10_qty = self.var_personal_equipment_10_qty.get()
        personal_equipment_10_qty = max(personal_equipment_10_qty - 1, 0)
        self.var_personal_equipment_10_qty.set(value=personal_equipment_10_qty)
        self.personal_equipment_qty_10_update()

    def personal_equipment_qty_10_update(self):
        personal_equipment_10_qty = self.var_personal_equipment_10_qty.get()

        personal_equipment_10_cost        = int(self.label_hidden_personal_equipment_10_cost.cget("text"))
        if self.age_value == 1: #use alternate grenade equivalent settings, set weight to zero
            personal_equipment_10_weight = 0
        else:
            personal_equipment_10_weight      = int(self.label_hidden_personal_equipment_10_weight.cget("text"))
        personal_equipment_10_ge:     str = self.label_hidden_personal_equipment_10_ge.cget("text")
        personal_equipment_10_to_hit: str = self.label_hidden_personal_equipment_10_to_hit.cget("text")
        personal_equipment_10_damage: str = self.label_hidden_personal_equipment_10_damage.cget("text")
        personal_equipment_10_shots:  str = self.label_hidden_personal_equipment_10_shots.cget("text")
        personal_equipment_10_cps:    str = self.label_hidden_personal_equipment_10_cps.cget("text")
        personal_equipment_10_wps:    str = self.label_hidden_personal_equipment_10_wps.cget("text")
        personal_equipment_10_notes:  str = self.label_hidden_personal_equipment_10_notes.cget("text")

        self.label_personal_equipment_10_cost.configure(text=str(personal_equipment_10_cost * personal_equipment_10_qty))
        self.label_personal_equipment_10_weight.configure(text=str(personal_equipment_10_weight * personal_equipment_10_qty))
        self.label_personal_equipment_10_ge.configure(text=str(personal_equipment_10_ge))
        self.label_personal_equipment_10_to_hit.configure(text=str(personal_equipment_10_to_hit))
        self.label_personal_equipment_10_damage.configure(text=str(personal_equipment_10_damage))
        self.label_personal_equipment_10_shots.configure(text=str(personal_equipment_10_shots))
        self.label_personal_equipment_10_cps.configure(text=str(personal_equipment_10_cps))
        self.label_personal_equipment_10_wps.configure(text=str(personal_equipment_10_wps))
        self.label_personal_equipment_10_notes.configure(text=str(personal_equipment_10_notes))
        self.recalculate()

    def facing_compilations(self) -> str:
        return_facing: str = ""
        body_spaces = int(self.label_body_spaces.cget("text"))
        modification_spaces = int(self.label_modificiation_space.cget("text"))
        total_allowable_per_facing = int((body_spaces - modification_spaces)/3)
        facings_list: list = []
        entry_dict: dict = {}
        entry_dict[self.weapon_armor_facing_1.get()] = float(self.label_sub_weapon_1_space.cget("text"))
        facings_list.append(entry_dict)
        entry_dict: dict = {}
        entry_dict[self.weapon_armor_facing_2.get()] = float(self.label_sub_weapon_2_space.cget("text"))
        facings_list.append(entry_dict)
        entry_dict: dict = {}
        entry_dict[self.weapon_armor_facing_3.get()] = float(self.label_sub_weapon_3_space.cget("text"))
        facings_list.append(entry_dict)
        entry_dict: dict = {}
        entry_dict[self.weapon_armor_facing_4.get()] = float(self.label_sub_weapon_4_space.cget("text"))
        facings_list.append(entry_dict)
        entry_dict: dict = {}
        entry_dict[self.weapon_armor_facing_5.get()] = float(self.label_sub_weapon_5_space.cget("text"))
        facings_list.append(entry_dict)
        entry_dict: dict = {}
        entry_dict[self.weapon_armor_facing_6.get()] = float(self.label_sub_weapon_6_space.cget("text"))
        facings_list.append(entry_dict)
        entry_dict: dict = {}
        entry_dict[self.weapon_armor_facing_7.get()] = float(self.label_sub_weapon_7_space.cget("text"))
        facings_list.append(entry_dict)
        entry_dict: dict = {}
        entry_dict[self.weapon_armor_facing_8.get()] = float(self.label_sub_weapon_8_space.cget("text"))
        facings_list.append(entry_dict)
        entry_dict: dict = {}
        entry_dict[self.weapon_armor_facing_9.get()] = float(self.label_sub_weapon_9_space.cget("text"))
        facings_list.append(entry_dict)
        entry_dict: dict = {}
        entry_dict[self.weapon_armor_facing_10.get()] = float(self.label_sub_weapon_10_space.cget("text"))
        facings_list.append(entry_dict)

        entry_dict: dict = {}
        entry_dict[self.selected_component_armor_facing_1.get()] = float(self.label_component_armor_1_space.cget("text"))
        facings_list.append(entry_dict)
        entry_dict: dict = {}
        entry_dict[self.selected_component_armor_facing_2.get()] = float(self.label_component_armor_2_space.cget("text"))
        facings_list.append(entry_dict)
        entry_dict: dict = {}
        entry_dict[self.selected_component_armor_facing_3.get()] = float(self.label_component_armor_3_space.cget("text"))
        facings_list.append(entry_dict)
        entry_dict: dict = {}
        entry_dict[self.selected_component_armor_facing_4.get()] = float(self.label_component_armor_4_space.cget("text"))
        facings_list.append(entry_dict)
        entry_dict: dict = {}
        entry_dict[self.selected_component_armor_facing_5.get()] = float(self.label_component_armor_5_space.cget("text"))
        facings_list.append(entry_dict)

        entry_dict: dict = {}
        entry_dict[self.selected_rocket_booster_facing_1.get()] = float(self.label_rocket_booster_1_space.cget("text"))
        facings_list.append(entry_dict)
        entry_dict: dict = {}
        entry_dict[self.selected_rocket_booster_facing_2.get()] = float(self.label_rocket_booster_2_space.cget("text"))
        facings_list.append(entry_dict)
        entry_dict: dict = {}
        entry_dict[self.selected_rocket_booster_facing_3.get()] = float(self.label_rocket_booster_3_space.cget("text"))
        facings_list.append(entry_dict)
        entry_dict: dict = {}
        entry_dict[self.selected_rocket_booster_facing_4.get()] = float(self.label_rocket_booster_4_space.cget("text"))
        facings_list.append(entry_dict)
        entry_dict: dict = {}
        entry_dict[self.selected_rocket_booster_facing_5.get()] = float(self.label_rocket_booster_5_space.cget("text"))
        facings_list.append(entry_dict)

        front_facing:  int = 0
        back_facing:   int = 0
        left_facing:   int = 0
        right_facing:  int = 0
        top_facing:    int = 0
        bottom_facing: int = 0
        for facing_entry in facings_list:
            for facing, spaces in facing_entry.items():
                match facing:
                    case "Front":
                        front_facing = front_facing + spaces
                    case "Back":
                        back_facing = back_facing + spaces
                    case "Left":
                        left_facing = left_facing + spaces
                    case "Right":
                        right_facing = right_facing + spaces
                    case "Top":
                        top_facing = top_facing + spaces
                    case "Bottom":
                        bottom_facing = bottom_facing + spaces

        if front_facing > total_allowable_per_facing:
            return_facing = "Too Many Front Spaces"
        elif back_facing > total_allowable_per_facing:
            return_facing = "Too Many Back Spaces"
        elif left_facing > total_allowable_per_facing:
            return_facing = "Too Many Left Spaces"
        elif right_facing > total_allowable_per_facing:
            return_facing = "Too Many Right Spaces"
        elif top_facing > total_allowable_per_facing:
            return_facing = "Too Many Top Spaces"
        elif bottom_facing > total_allowable_per_facing:
            return_facing = "Too Many Bottom Spaces"
        return return_facing

    def show_gas_engine_options(self):
        self.label_gas_header.grid(column=self.grid_col_item, row=self.grid_row_gas_engine_mods, sticky="w")
        self.check_engine_gas_super_charger.grid(column=self.grid_col_power_factors,row=self.grid_row_gas_engine_mods, sticky="w")
        self.check_engine_gas_vp_turbo.grid(column=self.grid_col_base_mpg,row=self.grid_row_gas_engine_mods, sticky="w")
        self.check_engine_gas_tube_headers.grid(column=self.grid_col_test_track,row=self.grid_row_gas_engine_mods, sticky="w")
        self.check_engine_gas_blue_print.grid(column=self.grid_col_test_track_numbers,row=self.grid_row_gas_engine_mods, sticky="w")
        self.check_engine_gas_turbo.grid(column=self.grid_col_last_column,row=self.grid_row_gas_engine_mods, sticky="w")
        self.gas_tank_dropdown.grid(column=self.grid_col_item, row=self.grid_row_gas_tank, sticky="w")
        self.label_gas_tank_cost.grid(column=self.grid_col_cost,row=self.grid_row_gas_tank, sticky="w")
        self.label_gas_tank_weight.grid(column=self.grid_col_weight ,row=self.grid_row_gas_tank, sticky="w")
        self.label_gas_tank_space.grid(column=self.grid_col_spaces,row=self.grid_row_gas_tank, sticky="w")
        self.label_gas_tank_dp.grid(column=self.grid_col_dp,row=self.grid_row_gas_tank, sticky="w")
        self.entry_gas_gallon_qty.grid(column=self.grid_col_qty,row=self.grid_row_gas_tank, sticky="w")
        self.button_gas_qty_up.grid(column=self.grid_left_up_button,row=self.grid_row_gas_tank, sticky="w")
        self.button_gas_qty_down.grid(column=self.grid_left_down_button,row=self.grid_row_gas_tank, sticky="w")

    def hide_gas_engine_options(self):
        self.check_engine_gas_super_charger.grid_forget()
        self.check_engine_gas_vp_turbo.grid_forget()
        self.check_engine_gas_tube_headers.grid_forget()
        self.check_engine_gas_blue_print.grid_forget()
        self.check_engine_gas_turbo.grid_forget()
        self.label_gas_header.grid_forget()
        if self.gas_tank_dropdown is not None:
            self.gas_tank_dropdown.grid_forget()
        self.label_gas_tank_cost.grid_forget()
        self.label_gas_tank_weight.grid_forget()
        self.label_gas_tank_space.grid_forget()
        self.label_gas_tank_dp.grid_forget()
        self.entry_gas_gallon_qty.grid_forget()
        self.button_gas_qty_up.grid_forget()
        self.button_gas_qty_down.grid_forget()

    def show_electric_engine_options(self):
        self.label_electric_header.grid(column=self.grid_col_item, row=self.grid_row_electric_mods, sticky="w")
        self.check_engine_electric_super_conductors.grid(column=self.grid_col_power_factors,row=self.grid_row_electric_mods, sticky="w")
        self.check_engine_electric_platnium_catalysts.grid(column=self.grid_col_base_mpg,row=self.grid_row_electric_mods, sticky="w")
        self.check_engine_electric_extra_power_cells.grid(column=self.grid_col_test_track,row=self.grid_row_electric_mods, sticky="w")

    def hide_electric_engine_options(self):
        self.label_electric_header.grid_forget()
        self.check_engine_electric_super_conductors.grid_forget()
        self.check_engine_electric_platnium_catalysts.grid_forget()
        self.check_engine_electric_extra_power_cells.grid_forget()
        
    def print_weapon(self, canvas, weapon_qty, ammo_qty, extra_mags_qty, armor_facing) -> str:
        """Print details for a given weapon selection"""
        return_text: str = ""
        if canvas is not None:
            if weapon_qty.get() > 0:
                return_text = return_text + str(weapon_qty.get())
                return_text = return_text + " " + str(canvas.get())
                if weapon_qty.get() > 1:
                    return_text = return_text + "s"
                if ammo_qty.get() > 0:
                    return_text = return_text + f" with {str(ammo_qty.get())} shot"
                    if ammo_qty.get() > 1:
                        return_text = return_text + "s"
                if extra_mags_qty.get() > 0:
                    return_text = return_text + f" and {extra_mags_qty.get()} extra magazines"
                if armor_facing.get() != "Facing":
                    return_text = return_text + f" facing {armor_facing.get()}"
                return_text = return_text + ".\n"
        return return_text

if __name__ == '__main__':
    print("Launching Python_Designer")
    local_designer: Python_Designer = Python_Designer()
    local_designer.launch_it()
    print('Leaving Python_Designer')
